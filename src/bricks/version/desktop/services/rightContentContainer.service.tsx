// ----------------------------------------------------------------
/* eslint-disable react-hooks/exhaustive-deps */
// ----------------------------------------------------------------
import React, { ReactElement, useState, useEffect } from 'react'
import { CSSProperties } from 'styled-components'
import { useAppSelector, useAppDispatch } from '../../../store/hooks'
import { setShow, setShowType } from '../../../store/slices/right-content-slice'
import { setShow as setShowFOS, 
  setShowType as setShowTypeFOS } from '../../../store/slices/fos-slice'
import { setContractFile, resetContractFile, setCompleteFile, resetCompleteFile } from '../../../store/slices/create-task-slice'
import { setAboutText } from '../../../store/slices/about-text-slice'
import { setCaseName,
  setCaseSY,
  setCaseSM,
  setCaseFY,
  setCaseFM,
  setCasePay,
  setCaseFiles,
  setCaseParams1,
  setCaseParams2,
  setCaseParams3,
  setCaseParams4,
  setCaseText,
  setCaseTags } from '../../../store/slices/new-case-slice'
import { setShow as setShowAlert , setType, setMessage } from '../../../store/slices/alert-content-slice'
import { addInEducation1Title, 
  addInEducation1Finish,
  addInEducation1Special,
  addInSkills1Title,
  addInSkills1Site,
  addInSkills1Sm,
  addInSkills1Sy,
  addInSkills1Fm,
  addInSkills1Fy,
  addInSkills1Job,
  addInSkills1JobTasks
}  from '../../../store/slices/new-skills-slice'

import DocumentLine from '../views/localViews/DocumentLine'
import Switch from '@mui/material/Switch'
import Radio from '@mui/material/Radio'
import RadioGroup from '@mui/material/RadioGroup'
import FormControlLabel from '@mui/material/FormControlLabel'
import FormGroup from '@mui/material/FormGroup'
import Checkbox from '@mui/material/Checkbox'
import ButtonComponent from '../comps/button/Button'
import InputComponent from '../comps/input/Input'
import SelectField from '../comps/select/SelectField'
import SelectFieldPercent from '../comps/select/SelectFieldPercentWidth'
import ChatMessagesContainer from './chatMessagesContainer.service'
import CommunicationTable from '../views/localViews/CommunicationTable'
import ChapterController from '../views/localViews/Ð¡hapterController'
import { IRightContentContainer } from '../../../models-ts/services/right-content-container-models'
import RequestActionsComponent from './request.service'
import css from '../styles/services/rightContentContainer.css'
import Fab from '@mui/material/Fab'
import ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew'
import CloseIcon from '@mui/icons-material/Clear'

import bearAvatar from '../../../img/avatars/bear.svg'
import enotAvatar from '../../../img/avatars/enot.svg'
import foxAvatar from '../../../img/avatars/fox.svg'
import groupAvatar from '../../../img/avatars/group.svg'
import manAvatar from '../../../img/avatars/man.svg'
import womanAvatar from '../../../img/avatars/woman.svg'

import closeIcon from '../../../img/icons/close.svg'
import defaulrAvatar from '../../../img/stock/avatar.svg'
import ArrowUpwardIcon from '@mui/icons-material/ArrowUpward'
import EmailIcon from '@mui/icons-material/Email'
import clipIcon from '../../../img/icons/clip.svg'
import tillIcon from '../../../img/icons/till.svg'
import linesIcon from '../../../img/icons/lines.svg'
import arraySortIcon from '../../../img/icons/sortArray.svg'
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import document from '../../../img/icons/chatActions/blankRound.svg'
import semiMenu from '../../../img/icons/semiMenu.svg'
import correctIcon from '../../../img/icons/correct.svg'
import docCorrect from '../../../img/icons/docCorrect.svg'
import docWait from '../../../img/icons/docTime.svg'
import doc from '../../../img/icons/files/withActionTwo/doc.svg'
import txt from '../../../img/icons/files/withActionTwo/txt.svg'
import pdf from '../../../img/icons/files/withActionTwo/pdf.svg'
import correct from '../../../img/icons/correct.svg'
import wait from '../../../img/icons/wait.svg'
import plus from '../../../img/icons/plus.svg'
import infoGrey from '../../../img/icons/infoGrey.svg'

const { ShadowContainer, 
  ShadowContainerInner, 
  ChatFork, 
  MasterDocFork, 
  EditProfileFork,
  EditProjectsEducationFork } = css

const RightContentContainer: React.FC<IRightContentContainer> = (props: IRightContentContainer) => {

  const dispatch = useAppDispatch()
  const [ docviewFormat, setDocviewFormat ] = useState<'lines' | 'tiles'>('tiles')
  const [ spec, setSpec ] = useState<string>('')
  const [ masterDocsShadowContent, setMasterDocsShadowContent ] = useState<boolean>(false)
  const [ localImage, setLocalImage ] = useState<any>()

  const [ SPEC_REQUEST, SET_SPEC_REQUEST ] = useState(false)
  const [ ABOUT_TEXT_REQUEST, SET_ABOUT_TEXT_REQUEST ] = useState(false)
  const [ SEND_CONTRACT_REQUEST, SET_SEND_CONTRACT_REQUEST ] = useState(false)
  const [ SEND_COMPLETE_REQUEST, SET_SEND_COMPLETE_REQUEST ] = useState(false)
  const [ ADD_CASE_REQUEST, SET_ADD_CASE_REQUEST ] = useState(false)
  const [ ADD_EDUCATION_REQUEST, SET_ADD_EDUCATION_REQUEST ] = useState(false)
  const [ ADD_JOB_REQUEST, SET_ADD_JOB_REQUEST ] = useState(false)
  const [ SEND_CASE_REQUEST, SET_SEND_CASE_REQUEST ] = useState(false)

  const [ educationCounter, setEducationCounter ] = useState<number>(1)
  const [ skillCounter, setSkillCounter] = useState<number>(1)
  const [ actsCounter, setActsCounter] = useState<number>(1)
  const [ chapterStep, setChapterStep ] = useState<number>(0)
  const [ chapters, setChapters ] = useState<Array<{ 
    
    title: string, 
    tags: Array<any>, 
    description: string 

  }>>([{ title: '', tags: [], description: '' }])
  const [ contractFileServer, setContractFileServer ] = useState<{ name: string, size: number, text: string }>({

    name: '',
    size: 0,
    text: ''

  })
  const [ contractFileServerPDF, setContractFileServerPDF ] = useState<{ name: string, size: number, text: string }>({

    name: '',
    size: 0,
    text: ''

  })
  const [ completeFileServer, setCompleteFileServer ] = useState<{ name: string, size: number, text: string }>({

    name: '',
    size: 0,
    text: ''

  })

  const selectTask = useAppSelector(state => state.taskContentReducer.TASKS_DATA.actualOne)
  const taskList = useAppSelector(state => state.taskContentReducer.TASKS_DATA.list)
  const ordersList = useAppSelector(state => state.taskContentReducer.TASKS_DATA.listOrders)

  const localText = 'Nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et. Posuere fringilla erat consectetur mi commodo congue erat sed pellentesque. Adipiscing in eget lacinia amet dui eu sit facilisi. Neque id tortor ut egestas nunc in blandit. Sed elit nulla nibh dolor massa facilisis in urna. Ac morbi lobortis nulla justo. Nisl leo a lobortis et. Fusce habitasse id blandit non felis tortor eget turpis. Diam eleifend varius luctus leo. Suspendisse ornare enim egestas in velit feugiat purus vulputate. Egestas odio vitae cras in. Auctor consectetur feugiat molestie adipiscing non tortor parturient et. Sed leo orci vitae adipiscing. Sit posuere massa vel vestibulum sollicitudin'

  const { contentType,
    scroll, 
    chatData: { 
      userID, 
      userName, 
      userLastctive 
    }
  } = props

  const backgroundColor = useAppSelector(state => state.theme.bg)
  const greyColor = useAppSelector(state => state.theme.grey)
  const greyColor2 = useAppSelector(state => state.theme.grey2)
  const greyColor3 = useAppSelector(state => state.theme.grey3)
  const chatBorderColor = useAppSelector(state => state.theme.blue3)
  const chatBackground = useAppSelector(state => state.theme.white)
  const inputBackground = useAppSelector(state => state.theme.white)
  const chatSubmitColor = useAppSelector(state => state.theme.blue2)
  const blueColor2 = useAppSelector(state => state.theme.blue2)
  const blankCorrectColor = useAppSelector(state => state.theme.blue4)

  const USER_ROLE = useAppSelector(state => state.roleTypeReducer.activeRole)
  const USER_ID = useAppSelector(state => state.roleTypeReducer.roleData.userID)
  const EXECUTOR = useAppSelector(state => state.userContentReducer.USERS_DATA.listExecutors)
    .filter((executor: any) => executor.clientId === USER_ID)
  const CUSTOMER = useAppSelector(state => state.userContentReducer.USERS_DATA.listCustomers)
    .filter((customer: any) => customer.clientId === USER_ID)
  const ABOUT_TEXT = useAppSelector(state => state.aboutTextReducer.aboutText)

  const NEW_AGREE_COAST = useAppSelector(state => state.changeAgreeReducer.newCoast)
  const NEW_AGREE_PREPAY = useAppSelector(state => state.changeAgreeReducer.newPrepay)
  const NEW_AGREE_EXPERT = useAppSelector(state => state.changeAgreeReducer.newExpert)
  const NEW_AGREE_TEXT = useAppSelector(state => state.changeAgreeReducer.newText)

  const avatarFile = useAppSelector(state => state.avatarReducer.avatarFile)
  const CONTRACT_FILE = useAppSelector(state => state.createTaskReducer.contractFile)
  const COMPLETE_FILE = useAppSelector(state => state.createTaskReducer.completeFile)

  const CASE_NAME = useAppSelector(state => state.newCaseReducer.caseName)
  const CASE_SY = useAppSelector(state => state.newCaseReducer.caseStartYear)
  const CASE_SM = useAppSelector(state => state.newCaseReducer.caseStartMonth)
  const CASE_FY = useAppSelector(state => state.newCaseReducer.caseFinishYear)
  const CASE_FM = useAppSelector(state => state.newCaseReducer.caseFinishMonth)
  const CASE_PAY = useAppSelector(state => state.newCaseReducer.casePay)
  const CASE_FILE = useAppSelector(state => state.newCaseReducer.caseFiles)
  const CASE_P1 = useAppSelector(state => state.newCaseReducer.caseParams.one)
  const CASE_P2 = useAppSelector(state => state.newCaseReducer.caseParams.two)
  const CASE_P3 = useAppSelector(state => state.newCaseReducer.caseParams.three)
  const CASE_P4 = useAppSelector(state => state.newCaseReducer.caseParams.four)
  const CASE_TEXT = useAppSelector(state => state.newCaseReducer.caseText)
  const CASE_TAGS = useAppSelector(state => state.newCaseReducer.caseTags)

  const EDUCATION_BLOCK_1 = useAppSelector(state => state.newSkillsReducer.education[0])
  const JOB_BLOCK_1 = useAppSelector(state => state.newSkillsReducer.skills[0])

  const avatarCSS: CSSProperties = {
    display: 'block',
    position: 'relative',
    width: '50px',
    height: '50px',
  }
  const nameSpanCSS: CSSProperties = {
    display: 'block',
    position: 'relative',
    fontWeight: 'bold',
    marginBottom: '4px'
  }
  const lastActiveSpanCSS: CSSProperties = {
    display: 'block',
    position: 'relative',
    color: greyColor2,
    fontSize: '13px'
  }
  const divCSS: CSSProperties = {
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative'
  }
  const bottomDivCSS: CSSProperties = {
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    position:'relative',
    width: '100%',
    height: 'auto',
    paddingLeft: '20px',
    paddingRight: '20px',
    boxSizing: 'border-box'
  }
  const bottomDivInnerCSS: CSSProperties = {
    display: 'flex',
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    position:'relative',
    width: '100%',
    height: 'auto',
    borderTop: '1px solid #D9E7F0',
    boxSizing: 'border-box',
    paddingTop: '20px',
    paddingBottom: '22px',
  }
  const clipDivCSS: CSSProperties = {
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around',
    position: 'relative',
    width: '50px',
    height: '50px',
    marginRight: '6px'
  }
  const fileSorterCSS: CSSProperties = {
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'flex-start',
    position: 'relative'
  }
  const semiIconsCSS: CSSProperties = {
    display: 'block',
    position: 'absolute',
    top: '0%',
    left: '100%',
    marginTop: '0px',
    cursor: 'pointer',
  }
  const blankButtonCSS: CSSProperties = {
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'flex-start',
    position: 'relative',
    backgroundColor: blankCorrectColor,
    height: '38px',
    width: '164px',
    borderRadius: '4px',
    paddingBottom: '2px',
    paddingLeft: '16px',
    cursor: 'pointer',
  }
  const doctileCSS: CSSProperties = {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'flex-start',
    justifyContent: 'flex-start',
    position: 'relative',
    width: '16.666%',
    marginBottom: '13px'
  }
  const whiteContainerCSS: CSSProperties = {
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'flex-start',
    position: 'relative',
    width: '100%',
    height: 'auto',
    minHeight: '40px',
    padding: '26px 34px',
    borderRadius: '8px',
    backgroundColor: 'white',
    marginTop: '20px'
  }
  const avatarContainerCSS: React.CSSProperties = {
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'flex-start',
    position: 'relative',
  }

  function showrightContent(): void {
    dispatch(setShow(false))
  }
  function showNewAgreement(): void {
    dispatch(setShowType('AgreementNewCC'))
  }
  function changeAvatar(): void {
    dispatch(setShowFOS(true))
    dispatch(setShowTypeFOS('changeAvatar'))
  }
  function changeAboutText(): void {
    SET_ABOUT_TEXT_REQUEST(true)
    setTimeout(() => { SET_ABOUT_TEXT_REQUEST(false) }, 1300)
  }
  function changeContract(): void {
    SET_SEND_CONTRACT_REQUEST(true)
    setTimeout(() => {
      dispatch(setShow(false)) 
      dispatch(resetContractFile(''))
      SET_SEND_CONTRACT_REQUEST(false) 
    }, 1300)
  }
  function changeComplete(): void {
    SET_SEND_COMPLETE_REQUEST(true)
    setTimeout(() => {
      dispatch(setShow(false)) 
      dispatch(resetCompleteFile(''))
      SET_SEND_COMPLETE_REQUEST(false) 
    }, 1300)
  }
  const changeTechTaskFile = (param: File) => {
    dispatch(resetContractFile(''))
    dispatch(setContractFile(param))
  }
  const changeCompleteFile = (param: File) => {
    dispatch(resetCompleteFile(''))
    dispatch(setCompleteFile(param))
  }

  const changeSM = (param: string) => {
    dispatch(setCaseSM(param))
  }
  const changeFM = (param: string) => {
    dispatch(setCaseFM(param))
  }
  const changeCaseRegion = (param: string) => {
    dispatch(setCaseParams4(param))
  }
  const changeCaseTags = (param: string) => {
    dispatch(setCaseTags(param))
  }

  const newCaseFile = (param: File) => {

    dispatch(setCaseFiles(param))

  }

  const sendEducation = () => {

    if ( EDUCATION_BLOCK_1.title !== '' && EDUCATION_BLOCK_1.finish !== '' && EDUCATION_BLOCK_1.special !== '' ) {

      console.log({
        clientId: USER_ID,
        addInEducation1Title: EDUCATION_BLOCK_1.title,
        addInEducation1Finish: EDUCATION_BLOCK_1.finish,
        addInEducation1Special: EDUCATION_BLOCK_1.special
      })

      SET_ADD_EDUCATION_REQUEST(true)

      dispatch(setShowAlert(true))
      dispatch(setType('success'))
      dispatch(setMessage('ÐÐ°Ð½Ð½ÑÐµ Ð¾Ð± Ð¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°Ð½Ð¸Ð¸ ÑÑÐ¿ÐµÑÐ½Ð¾ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ñ'))

      setTimeout(() => {

        SET_ADD_EDUCATION_REQUEST(false)

        dispatch(addInEducation1Title(''))
        dispatch(addInEducation1Finish(''))
        dispatch(addInEducation1Special(''))

        dispatch(setShowAlert(false))
        dispatch(setType('success'))

      }, 2000)

    } else {

      dispatch(setShowAlert(true))
      dispatch(setType('error'))
      dispatch(setMessage('ÐÑÐ¶Ð½Ð¾ Ð·Ð°Ð¿Ð¾Ð»Ð½Ð¸ÑÑ Ð²ÑÐµ Ð¿Ð¾Ð»Ñ Ð²Ð²Ð¾Ð´Ð° Ð´Ð»Ñ ÑÐ¾Ð³Ð¾, ÑÑÐ¾Ð±Ñ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ Ð½Ð¾Ð²ÑÐµ Ð´Ð°Ð½Ð½ÑÐµ Ð¾Ð± Ð¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°Ð½Ð¸Ð¸'))

    }

  }

  const sendSkill = () => {

    if ( JOB_BLOCK_1.title !== '' 
      && JOB_BLOCK_1.site !== ''
      && JOB_BLOCK_1.sm !== ''
      && JOB_BLOCK_1.sy !== ''
      && JOB_BLOCK_1.fm !== '' 
      && JOB_BLOCK_1.fy !== ''
      && JOB_BLOCK_1.job !== ''
      && JOB_BLOCK_1.jobTasks !== '' ) {

      console.log({
        clientId: USER_ID,
        addInSkills1Title: JOB_BLOCK_1.title,
        addInSkills1Site: JOB_BLOCK_1.site,
        addInSkills1Sm: JOB_BLOCK_1.sm,
        addInSkills1Sy: JOB_BLOCK_1.sy,
        addInSkills1Fm: JOB_BLOCK_1.fm,
        addInSkills1Fy: JOB_BLOCK_1.fy,
        addInSkills1NowTime: JOB_BLOCK_1.nowTime,
        addInSkills1Job: JOB_BLOCK_1.job,
        addInSkills1JobTasks: JOB_BLOCK_1.jobTasks 
      })

      SET_ADD_JOB_REQUEST(true)

      dispatch(setShowAlert(true))
      dispatch(setType('success'))
      dispatch(setMessage('ÐÐ°Ð½Ð½ÑÐµ Ð¾ Ð¼ÐµÑÑÐµ ÑÐ°Ð±Ð¾ÑÑ ÑÑÐ¿ÐµÑÐ½Ð¾ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ñ'))

      setTimeout(() => {

        SET_ADD_JOB_REQUEST(false)

        dispatch(addInSkills1Title(''))
        dispatch(addInSkills1Site('ÐÐµ ÑÐºÐ°Ð·Ð°Ð½Ð¾'))
        dispatch(addInSkills1Sm('ÐÐµ ÑÐºÐ°Ð·Ð°Ð½Ð¾'))
        dispatch(addInSkills1Sy('ÐÐµ ÑÐºÐ°Ð·Ð°Ð½Ð¾'))
        dispatch(addInSkills1Fm('ÐÐµ ÑÐºÐ°Ð·Ð°Ð½Ð¾'))
        dispatch(addInSkills1Fy('ÐÐµ ÑÐºÐ°Ð·Ð°Ð½Ð¾'))
        dispatch(addInSkills1Job(''))
        dispatch(addInSkills1JobTasks(''))

        dispatch(setShowAlert(false))
        dispatch(setType('success'))

      }, 2000)

    } else {

      dispatch(setShowAlert(true))
      dispatch(setType('error'))
      dispatch(setMessage('ÐÑÐ¶Ð½Ð¾ Ð·Ð°Ð¿Ð¾Ð»Ð½Ð¸ÑÑ Ð²ÑÐµ Ð¿Ð¾Ð»Ñ Ð²Ð²Ð¾Ð´Ð° Ð´Ð»Ñ ÑÐ¾Ð³Ð¾, ÑÑÐ¾Ð±Ñ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ Ð½Ð¾Ð²ÑÐµ Ð´Ð°Ð½Ð½ÑÐµ Ð¾ Ð¼ÐµÑÑÐµ ÑÐ°Ð±Ð¾ÑÐµ'))

    }

  }

  const sendCase = () => {

    console.log({
      CASE_NAME,
      CASE_SY,
      CASE_SM,
      CASE_FY,
      CASE_FM,
      CASE_PAY,
      CASE_P1,
      CASE_P2,
      CASE_P3,
      CASE_P4,
      CASE_TEXT,
      CASE_TAGS,
      CASE_FILE
    })

    if ( USER_ROLE === 'CUSTOMER' && CUSTOMER[0].portfolio && CUSTOMER[0].portfolio?.length < 1 ) {

      SET_SEND_CASE_REQUEST(true)

      if ( CASE_NAME          && 
        CASE_SY               && 
        CASE_SM               && 
        CASE_FY               && 
        CASE_FM               && 
        CASE_PAY              && 
        CASE_FILE.length > 0  &&
        CASE_P1               && 
        CASE_P2               && 
        CASE_P3               && 
        CASE_P4               &&
        CASE_TEXT             &&
        CASE_TAGS ) {

          SET_ADD_CASE_REQUEST(true)
          setTimeout(() => { SET_ADD_CASE_REQUEST(false) }, 1300)

          setTimeout(() => {

            SET_SEND_CASE_REQUEST(true)

          }, 1300)

          dispatch(setShowAlert(true))
          dispatch(setType('success'))
          dispatch(setMessage('ÐÑÐ¾ÐµÐºÑ Ð±ÑÐ» ÑÑÐ¿ÐµÑÐ½Ð¾ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½ Ð² ÑÐ¿Ð¸ÑÐ¾Ðº Ð²Ð°ÑÐ¸Ñ ÑÐ°Ð±Ð¾Ñ'))

          setTimeout(() => {

            dispatch(setShowAlert(false))
            dispatch(setType('success'))
      
          }, 2000)

        } else {

          dispatch(setShowAlert(true))
          dispatch(setType('error'))
          dispatch(setMessage('ÐÑÐ¶Ð½Ð¾ Ð·Ð°Ð¿Ð¾Ð»Ð½Ð¸ÑÑ Ð²ÑÐµ Ð¿Ð¾Ð»Ñ Ð²Ð²Ð¾Ð´Ð° Ð¸ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ ÑÐ°Ð¹Ð» Ð²Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð´Ð»Ñ ÑÐ¾Ð³Ð¾, ÑÑÐ¾Ð±Ñ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ Ð½Ð¾Ð²ÑÐ¹ Ð¿ÑÐ¾ÐµÐºÑ Ð² Ð±Ð°Ð·Ñ Ð¿Ð¾ÑÑÑÐ¾Ð»Ð¸Ð¾'))

          setTimeout(() => {

            dispatch(setShowAlert(false))
            dispatch(setType('success'))
      
          }, 2000)
        
        }} else {

          dispatch(setShowAlert(true))
          dispatch(setType('warning'))
          dispatch(setMessage('Ð Ð½Ð°ÑÑÐ¾ÑÑÐµÐµ Ð²ÑÐµÐ¼Ñ ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð¿ÑÐ¾ÐµÐºÑÐ¾Ð², ÐºÐ¾ÑÐ¾ÑÑÐµ Ð²Ñ Ð¼Ð¾Ð¶ÐµÑÐµ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ Ð² ÑÐ¸ÑÑÐµÐ¼Ñ, Ð¾Ð³ÑÐ°Ð½Ð¸ÑÐµÐ½Ð¾ 1 ÑÑÑÐºÐ¾Ð¹'))

          setTimeout(() => {

            dispatch(setShowAlert(false))
            dispatch(setType('success'))
      
          }, 2000)
        
        }

    if ( USER_ROLE === 'EXECUTOR' && EXECUTOR[0].portfolio && EXECUTOR[0].portfolio?.length < 1 ) {

      SET_SEND_CASE_REQUEST(true)

      if ( CASE_NAME          && 
        CASE_SY               && 
        CASE_SM               && 
        CASE_FY               && 
        CASE_FM               && 
        CASE_PAY              && 
        CASE_FILE.length > 0  &&
        CASE_P1               && 
        CASE_P2               && 
        CASE_P3               && 
        CASE_P4               &&
        CASE_TEXT             &&
        CASE_TAGS ) {

          SET_ADD_CASE_REQUEST(true)
          setTimeout(() => { SET_ADD_CASE_REQUEST(false) }, 1300)

          setTimeout(() => {

            SET_SEND_CASE_REQUEST(true)

          }, 1300)

          dispatch(setShowAlert(true))
          dispatch(setType('success'))
          dispatch(setMessage('ÐÑÐ¾ÐµÐºÑ Ð±ÑÐ» ÑÑÐ¿ÐµÑÐ½Ð¾ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½ Ð² ÑÐ¿Ð¸ÑÐ¾Ðº Ð²Ð°ÑÐ¸Ñ ÑÐ°Ð±Ð¾Ñ'))

        } else {

          dispatch(setShowAlert(true))
          dispatch(setType('error'))
          dispatch(setMessage('ÐÑÐ¶Ð½Ð¾ Ð·Ð°Ð¿Ð¾Ð»Ð½Ð¸ÑÑ Ð²ÑÐµ Ð¿Ð¾Ð»Ñ Ð²Ð²Ð¾Ð´Ð° Ð¸ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ ÑÐ°Ð¹Ð» Ð²Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð´Ð»Ñ ÑÐ¾Ð³Ð¾, ÑÑÐ¾Ð±Ñ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ Ð½Ð¾Ð²ÑÐ¹ Ð¿ÑÐ¾ÐµÐºÑ Ð² Ð±Ð°Ð·Ñ Ð¿Ð¾ÑÑÑÐ¾Ð»Ð¸Ð¾'))

        }} else {

          dispatch(setShowAlert(true))
          dispatch(setType('warning'))
          dispatch(setMessage('Ð Ð½Ð°ÑÑÐ¾ÑÑÐµÐµ Ð²ÑÐµÐ¼Ñ ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð¿ÑÐ¾ÐµÐºÑÐ¾Ð², ÐºÐ¾ÑÐ¾ÑÑÐµ Ð²Ñ Ð¼Ð¾Ð¶ÐµÑÐµ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ Ð² ÑÐ¸ÑÑÐµÐ¼Ñ, Ð¾Ð³ÑÐ°Ð½Ð¸ÑÐµÐ½Ð¾ 1 ÑÑÑÐºÐ¾Ð¹'))

        }

  }

  function readIMG() {
    if (CASE_FILE && CASE_FILE[0]) {
      var reader = new FileReader()
  
      reader.onload = function(e) {
        e.target && setLocalImage(e.target.result)
      }
  
      reader.readAsDataURL(CASE_FILE[0])
    }
  }

  useEffect(() => {

    readIMG()

  }, [ CASE_FILE ])
  
  useEffect(() => {

    false && console.log(USER_ROLE)
    false && console.log(USER_ID)
    false && console.log(EXECUTOR)
    false && console.log(CUSTOMER)

  }, [ CUSTOMER, EXECUTOR, USER_ID, USER_ROLE ])

  useEffect(() => {

    if ( spec ) {

      SET_SPEC_REQUEST(true)
      setTimeout(() => { SET_SPEC_REQUEST(false) }, 1300)

    }

  }, [ spec ])

  useEffect(() => {

    EXECUTOR.length > 0 && EXECUTOR[0].aboutText && dispatch(setAboutText(EXECUTOR[0].aboutText))
    CUSTOMER.length > 0 && CUSTOMER[0].aboutText && dispatch(setAboutText(CUSTOMER[0].aboutText))

  }, [])

  useEffect(() => {

    let chapterData: any = []

    if ( taskList.filter(item => item.id === selectTask).length > 0 ) {

      chapterData = taskList.filter(item => item.id === selectTask)[0].chapters

    } 

    if ( ordersList.filter(item => item.id === selectTask).length > 0 ) {

      chapterData = ordersList.filter(item => item.id === selectTask)[0].chapters

    }
    
    chapterData && setChapters(chapterData)

  }, [])

  useEffect(() => { console.log(CONTRACT_FILE) }, [ CONTRACT_FILE ])

  useEffect(() => {

    ( async () => {

      const myHeaders = new Headers();
      myHeaders.append("Content-Type", "application/json");

      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const fileName: string = selectTask + '.contract.txt'
      const fileNameExecutor: string = selectTask + '.contract.txt'

      const raw = JSON.stringify({
        "fileName": fileNameExecutor
      });

      var requestOptions: any = {
        method: 'POST',
        headers: myHeaders,
        body: raw,
        redirect: 'follow'
      };

      const downloadFile = await fetch("http://85.193.88.125:3000/send-file-contract", requestOptions)
        .then(response => response.blob())

      const downloadFileText: string = await downloadFile.text()
      const downloadFileSize: number = await downloadFile.size

      setContractFileServer({
        name: fileNameExecutor,
        size: downloadFileSize,
        text: downloadFileText
      })

      console.log({
        name: fileNameExecutor,
        size: downloadFileSize,
        text: downloadFileText
      })

      // ----------------------------------------------------------------
      // ----------------------------------------------------------------

      const fileNameExecutorPDF: string = selectTask + '.contract.pdf'

      const rawPDF = JSON.stringify({
        "fileName": fileNameExecutorPDF
      });

      var requestOptionsPDF: any = {
        method: 'POST',
        headers: myHeaders,
        body: rawPDF,
        redirect: 'follow'
      };

      const downloadFilePDF = await fetch("http://85.193.88.125:3000/send-file-contract", requestOptionsPDF)
        .then(response => response.blob())

      const downloadFileTextPDF: string = await downloadFilePDF.text()
      const downloadFileSizePDF: number = await downloadFilePDF.size

      setContractFileServerPDF({
        name: fileNameExecutorPDF,
        size: downloadFileSizePDF,
        text: downloadFileTextPDF
      })

      console.log({
        name: fileNameExecutorPDF,
        size: downloadFileSizePDF,
        text: downloadFileTextPDF
      })

    })()

  }, [ selectTask ])

  useEffect(() => {

    ( async () => {

      const myHeaders = new Headers();
      myHeaders.append("Content-Type", "application/json");

      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const fileName: string = selectTask + '.complete.pdf'
      const fileNameExecutor: string = selectTask + '.complete.pdf'

      const raw = JSON.stringify({
        "fileName": fileNameExecutor
      });

      var requestOptions: any = {
        method: 'POST',
        headers: myHeaders,
        body: raw,
        redirect: 'follow'
      };

      const downloadFile = await fetch("http://85.193.88.125:3000/send-file-complete", requestOptions)
        .then(response => response.blob())

      const downloadFileText: string = await downloadFile.text()
      const downloadFileSize: number = await downloadFile.size

      console.log({
        name: fileNameExecutor,
        size: downloadFileSize,
        text: downloadFileText
      })

      setCompleteFileServer({
        name: fileNameExecutor,
        size: downloadFileSize,
        text: downloadFileText
      })

    })()

  }, [ selectTask ])

  useEffect(() => {

    return () => {

      false && dispatch(setCaseName(''))
      false && dispatch(setCaseSY(''))
      false && dispatch(setCaseSM(''))
      false && dispatch(setCaseFY(''))
      false && dispatch(setCaseFM(''))
      false && dispatch(setCasePay(''))
      false && dispatch(setCaseParams1(''))
      false && dispatch(setCaseParams2(''))
      false && dispatch(setCaseParams3(''))
      false && dispatch(setCaseParams4(''))
      false && dispatch(setCaseText(''))
      false && dispatch(setCaseTags(''))

      dispatch(resetCompleteFile(''))
      dispatch(resetContractFile(''))

    }

  }, [])

  return (
    <React.Fragment>

      { SPEC_REQUEST && <RequestActionsComponent

        callbackAction={() => {}}
        requestData={{
          type: 'POST',
          urlstring: '/change-user-spec',
          body: {
            clientId: USER_ID,
            spec: spec,
          }
        }}
      
      /> }

      { ( ABOUT_TEXT_REQUEST && ABOUT_TEXT !== '' ) && <RequestActionsComponent

        callbackAction={() => {}}
        requestData={{
          type: 'POST',
          urlstring: '/change-user-about',
          body: {
            clientId: USER_ID,
            text: ABOUT_TEXT,
          }
        }}
      
      /> }

      { SEND_CONTRACT_REQUEST && <RequestActionsComponent

        callbackAction={() => {}}
        requestData={{
          type: 'POSTFILE_CONTRACT',
          urlstring: '/add-file-contract',
          body: [ 
            selectTask, 
            CONTRACT_FILE ? CONTRACT_FILE[0] : [] ]
        }}
      
      /> }

      { SEND_COMPLETE_REQUEST && <RequestActionsComponent

        callbackAction={() => {}}
        requestData={{
          type: 'POSTFILE_COMPLETE',
          urlstring: '/add-file-complete',
          body: [ 
            selectTask,
            selectTask, 
            COMPLETE_FILE ? COMPLETE_FILE[0] : [] ]
        }}
      
      /> }

      { ADD_CASE_REQUEST && <RequestActionsComponent

        callbackAction={() => {}}
        requestData={{
          type: 'POST',
          urlstring: '/add-user-case',
          body: {
            clientId: USER_ID,
            CASE_NAME,
            CASE_SY,
            CASE_SM,
            CASE_FY,
            CASE_FM,
            CASE_PAY,
            CASE_P1,
            CASE_P2,
            CASE_P3,
            CASE_P4,
            CASE_TEXT,
            CASE_TAGS,
            CASE_FILE
          }
        }}
      
      /> }

      { ADD_EDUCATION_REQUEST && <RequestActionsComponent

        callbackAction={() => {}}
        requestData={{
          type: 'POST',
          urlstring: '/add-user-education',
          body: {
            clientId: USER_ID,
            addInEducation1Title: EDUCATION_BLOCK_1.title,
            addInEducation1Finish: EDUCATION_BLOCK_1.finish,
            addInEducation1Special: EDUCATION_BLOCK_1.special
          }
        }}
      
      /> }

      { ADD_JOB_REQUEST && <RequestActionsComponent

        callbackAction={() => {}}
        requestData={{
          type: 'POST',
          urlstring: '/add-user-skill',
          body: {
            clientId: USER_ID,
            addInSkills1Title: JOB_BLOCK_1.title,
            addInSkills1Site: JOB_BLOCK_1.site,
            addInSkills1Sm: JOB_BLOCK_1.sm,
            addInSkills1Sy: JOB_BLOCK_1.sy,
            addInSkills1Fm: JOB_BLOCK_1.fm,
            addInSkills1Fy: JOB_BLOCK_1.fy,
            addInSkills1NowTime: JOB_BLOCK_1.nowTime,
            addInSkills1Job: JOB_BLOCK_1.job,
            addInSkills1JobTasks: JOB_BLOCK_1.jobTasks 
          }
        }}
      
      /> }

      { SEND_CASE_REQUEST && <RequestActionsComponent

        callbackAction={() => {}}
        requestData={{
          type: 'POSTFILE_CASE',
          urlstring: '/add-file-case',
          body: [ 
            USER_ID,
            CASE_FILE ? CASE_FILE[0] : [] ]
        }}
      
      /> }

      <ShadowContainer style={{ zIndex: 105 }}marginTop={scroll}>
        <ShadowContainerInner>

          { contentType === 'ECC' 

          /* ---------------------------------------- */
          /* Ð±Ð°Ð·Ð¾Ð²Ð¾Ðµ Ð¾ÐºÐ½Ð¾ Ñ ÑÐ°ÑÐ¾Ð¼
          /* ---------------------------------------- */

            ? <ChatFork.ChatContainer style={{ paddingTop: '40px' }} backgroundColor={backgroundColor} id={userID}>
                <ChatFork.CloseIconContainer>
                  <ChatFork.CloseIcon onClick={showrightContent}>
                    <img
                      alt={""} 
                      src={closeIcon}  
                    />
                  </ChatFork.CloseIcon>
                </ChatFork.CloseIconContainer>
                <ChatFork.ChatHeader>
                  <div style={divCSS}>
                    <ChatFork.ChatHeaderAvatar>
                      <img
                        alt={""}
                        src={defaulrAvatar}
                        style={avatarCSS}
                      />
                    </ChatFork.ChatHeaderAvatar>
                    <ChatFork.ChatHeaderName>
                      <span style={nameSpanCSS}>{ userName }</span>
                      <span style={lastActiveSpanCSS}>{ userLastctive }</span>
                    </ChatFork.ChatHeaderName>
                  </div>
                  <div style={divCSS}>
                    <ChatFork.ChatHeaderEnableDocs>
                      <span style={{ ...lastActiveSpanCSS, fontSize: '15px' }}>ÐÐ¾ÐºÑÐ¼ÐµÐ½ÑÑ</span>
                      <Switch color={"primary"} defaultChecked />
                    </ChatFork.ChatHeaderEnableDocs>
                    <InputComponent
                      type={'TEXT_INPUT_OUTLINE_SEARCH'}
                      valueType='text'
                      required={false}
                      widthType={'px'}
                      widthValue={300}
                      heightValue={'56px'}
                      label={"ÐÐ¾Ð¸ÑÐº Ð¿Ð¾ ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸ÑÐ¼"}
                      isError={false}
                      isDisabled={false}
                      labelShrinkLeft={"0px"}
                      innerLabel={null}
                      css={{
                        fontSize: '12px',
                        position: 'relative',
                        boxSizing: 'border-box',
                        marginBottom: '8px',
                        backgroundColor: 'white'
                      }}
                    />
                  </div>
                </ChatFork.ChatHeader>
                <ChatFork.ChatBody
                  border={`1px solid ${chatBorderColor}`}
                  backgroundColor={chatBackground}
                >
                  <ChatFork.ChatBodyInner
                    border={`1px solid transparent`}
                    backgroundColor={chatBackground}
                  >
                    <ChatMessagesContainer
                      data={[
                        { 
                          date: '05.01.2022', 
                          messages: [
                            { 
                              type: 'me', 
                              content: [
                                { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', time: '20:05' },
                                { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', time: '20:05' }
                              ]
                            },
                            { 
                              type: 'you', 
                              content: [
                                { text: 'Ipsum nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et', time: '20:06' },
                              ]
                            },
                            { 
                              type: 'me', 
                              content: [
                                { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', time: '20:08' },
                              ]
                            },
                            { 
                              type: 'you', 
                              content: [
                                { text: 'Ipsum nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et', time: '20:10' },
                                { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', time: '20:10' },
                                { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', time: '20:10' },
                              ]
                            },
                            { 
                              type: 'me', 
                              content: [
                                { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', time: '20:08' },
                              ]
                            },
                            { 
                              type: 'you', 
                              content: [
                                { text: 'Ipsum nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et', time: '20:10' },
                                { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', time: '20:10' },
                                { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', time: '20:10' },
                              ]
                            }
                          ]
                        }
                      ]}
                    />
                  </ChatFork.ChatBodyInner>
                  <div style={bottomDivCSS}>
                    <div style={bottomDivInnerCSS}>
                      <div style={clipDivCSS}>
                        <img
                          alt={""}
                          src={clipIcon}
                        />
                      </div>
                      <InputComponent
                        type={'TEXT_INPUT_OUTLINE'}
                        valueType='text'
                        required={false}
                        widthType={'%'}
                        widthValue={100}
                        heightValue={'50px'}
                        label={"Lorem ipsum dolor sit amet consectetur adipisicing elit"}
                        isError={false}
                        isDisabled={true}
                        labelShrinkLeft={"0px"}
                        innerLabel={null}
                        css={{
                          fontSize: '12px',
                          position: 'relative',
                          boxSizing: 'border-box',
                          marginTop: '0px',
                          backgroundColor: inputBackground,
                          marginRight: '12px'
                        }}
                      />
                      <ButtonComponent
                        inner={""} 
                        type='ICON_BUTTON_CHAT_SUBMIT' 
                        action={() => console.log('this is button')}
                        actionData={null}
                        widthType={'px'}
                        widthValue={56}
                        children={""}
                        childrenCss={undefined}
                        iconSrc={null}
                        iconCss={undefined}
                        muiIconSize={30}
                        MuiIconChildren={ArrowUpwardIcon}
                        css={{
                          position: 'relative',
                          boxSizing: 'border-box',
                          padding: '4px',
                          backgroundColor: chatSubmitColor,
                          width: '56px',
                          height: '56px',
                        }}
                      />
                    </div>
                  </div>
                </ChatFork.ChatBody>
              </ChatFork.ChatContainer>
            : contentType === 'MDCC'

            /* ---------------------------------------- */
            /* Ð¾ÐºÐ½Ð¾ ÑÐ°Ð·Ð´ÐµÐ»Ð° Ð¼Ð°ÑÑÐµÑ Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÑ
            /* ---------------------------------------- */

            ? <React.Fragment>
                <MasterDocFork.ChatContainer style={{ paddingTop: '40px', height: 'auto', minHeight: '100vh' }} backgroundColor={backgroundColor}>
                  <MasterDocFork.CloseIconContainer>
                    <MasterDocFork.CloseIcon onClick={showrightContent}>
                      <img
                        alt={""} 
                        src={closeIcon}  
                      />
                    </MasterDocFork.CloseIcon>
                  </MasterDocFork.CloseIconContainer>
                  <MasterDocFork.ContentLine>
                    <h3 style={{ fontSize: '28px', margin: 0, marginBottom: '38px' }}>ÐÐ°ÑÑÐµÑ Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÑ</h3>
                  </MasterDocFork.ContentLine>
                  { contractFileServer.text && <MasterDocFork.ContentLine style={{ marginTop: '-6px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', fontSize: '15px' }}>ÐÑÐ½Ð¾Ð²Ð½ÑÐµ Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÑ Ð¿ÑÐ¾ÐµÐºÑÐ°</span>
                  </MasterDocFork.ContentLine> }
                  { contractFileServer.text && <ButtonComponent
                    inner={'ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ Ð´Ð¾Ð³Ð¾Ð²Ð¾Ñ'} 
                    type='UPLOAD' 
                    action={() => {}}
                    actionData={[ changeTechTaskFile ]}
                    widthType={'px'}
                    widthValue={200}
                    children={''}
                    childrenCss={undefined}
                    iconSrc={null}
                    iconCss={undefined}
                    muiIconSize={null}
                    MuiIconChildren={EmailIcon}
                    css={{
                      backgroundColor: 'rgb(22, 124, 191)',
                      fontSize: '12px',
                      height: '46px',
                      borderRadius: '6px',
                      position: 'relative',
                      boxSizing: 'border-box',
                      marginTop: '23px',
                    }}
                  /> }

                  { contractFileServer.text && <React.Fragment>
                    { ( CONTRACT_FILE && CONTRACT_FILE?.length > 0 ) && CONTRACT_FILE.filter(
                
                      fileData => (
                        fileData.name.indexOf('.txt') !== -1 ||
                        fileData.name.indexOf('.pdf') !== -1 )).map(fileData => {

                      return (
                        <div 
                          style={{ 
                            display: 'flex', 
                            flexDirection: 'row', 
                            alignItems: 'center', 
                            justifyContent: 'space-between',
                            marginTop: '17px',
                            marginBottom: '-2px'
                          }}
                        >
                          <span 
                            style={{ 
                              display: 'block', 
                              position: 'relative', 
                              lineHeight: '28px', 
                              fontWeight: 'bold',
                              color: 'rgb(81, 102, 116)',
                              cursor: 'pointer',
                              marginRight: '8px'
                            }}
                          >{`ÐÐ¾Ð±Ð°Ð²Ð»ÐµÐ½ Ð´Ð¾Ð³Ð¾Ð²Ð¾Ñ Ð´Ð»Ñ Ð·Ð°ÐºÐ°Ð·Ð°: ${fileData.name}`}</span>
                          <CloseIcon 
                            style={{ width: '16px', cursor: 'pointer' }}
                            onClick={() => dispatch(resetContractFile(''))}
                          />
                        </div>
                      )

                    })}
                    { ( CONTRACT_FILE && CONTRACT_FILE?.length > 0 ) && CONTRACT_FILE.filter(fileData => (

                      fileData.name.indexOf('.txt') !== -1 ||
                      fileData.name.indexOf('.pdf') !== -1 )).length === 0 && <div 
                        style={{ 
                          display: 'flex', 
                          flexDirection: 'row', 
                          alignItems: 'center', 
                          justifyContent: 'space-between',
                          marginTop: '14px'
                        }}
                      >
                        <span 
                          style={{ 
                            display: 'block', 
                            position: 'relative', 
                            lineHeight: '28px', 
                            fontWeight: 'bold',
                            color: 'rgb(81, 102, 116)',
                            cursor: 'pointer',
                            marginRight: '8px'
                          }}
                        >{`ÐÐµÐ²ÐµÑÐ½ÑÐ¹ ÑÐ¾ÑÐ¼Ð°Ñ ÑÐ°Ð¹Ð»Ð°`}</span>
                        <CloseIcon 
                          style={{ width: '16px', cursor: 'pointer' }}
                          onClick={() => dispatch(resetContractFile(''))}
                        />
                      </div> }
                  </React.Fragment> }
                  { contractFileServer.text && <span
                    onClick={() => setMasterDocsShadowContent(prev => !prev)}
                    style={{
                      display: 'block',
                      position: 'relative',
                      width: '600px',
                      lineHeight: '22px',
                      backgroundColor: 'rgb(253, 237, 237)',
                      padding: '14px',
                      paddingLeft: '20px',
                      borderRadius: '4px',
                      marginTop: '30px',
                      marginBottom: '2px',
                      cursor: 'pointer'
                    }}
                  >{"ÐÐ¾Ð¿ÑÑÑÐ¸Ð¼ÑÐµ ÑÐ¾ÑÐ¼Ð°ÑÑ ÑÐ°Ð¹Ð»Ð¾Ð² - ÑÐµÐºÑÑÐ¾Ð²ÑÐ¹ (txt) Ð¸Ð»Ð¸ pdf"}</span> }
                  { contractFileServer.text && <MasterDocFork.ContentLine style={{ marginTop: '22px' }}>
                    <span 
                      onClick={changeContract}
                      style={{ 
                        fontWeight: 'bold', 
                        display: 'block', 
                        fontSize: '15px',
                        cursor: 'pointer',
                        border: '1px dashed grey',
                        padding: '14px 18px 16px',
                        marginBottom: '24.4px',
                        borderRadius: '6px'
                      }}
                    >
                      ÐÐ°Ð³ÑÑÐ·Ð¸ÑÑ Ð´Ð¾Ð³Ð¾Ð²Ð¾Ñ [ Ð½Ð°Ð¶Ð¼Ð¸ÑÐµ, ÑÑÐ¾Ð±Ñ ÑÐ¾ÑÑÐ°Ð½Ð¸ÑÑ - Ð²ÑÐµÐ¼ÐµÐ½Ð½Ð°Ñ ÐºÐ½Ð¾Ð¿ÐºÐ° ]
                    </span>
                  </MasterDocFork.ContentLine> }
                  { ( contractFileServer.text.indexOf('no such file or directory') < 0 || contractFileServerPDF.text.indexOf('no such file or directory') < 0 ) && <MasterDocFork.ContentLine style={{ marginTop: '-6px' }}>
                    <img
                      alt={""}
                      src={correctIcon}
                      style={{ width: '24px', marginRight: '10px' }}
                    />
                    <span style={{ fontWeight: 'bold', display: 'block', fontSize: '15px' }}>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½ Ð² Ð¿ÑÐ¾ÐµÐºÑ</span>
                  </MasterDocFork.ContentLine> }
                  { contractFileServer.text.indexOf('no such file or directory') < 0 && <MasterDocFork.ContentLine style={{ marginTop: '24px', marginBottom: '20px' }}>
                    <div style={{ display: 'none', flexDirection: 'row' }}>
                      <div style={{ display: 'block', position: 'relative', width: '100px' }}>
                        <img
                          alt={""}
                          src={txt}
                          style={{ width: '90px', cursor: 'pointer' }}
                        />
                        { false && <img
                          alt={""}
                          src={semiMenu}
                          style={semiIconsCSS}
                        /> }
                      </div>
                      <div style={{ display: 'flex', flexDirection: 'column', position: 'relative', marginLeft: '16px' }}>
                        <span style={{ color: greyColor, marginBottom: '5px' }}>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð¾ÑÐ½Ð¾Ð²Ð½Ð¾Ð¹</span>
                        <span style={{ color: greyColor, marginBottom: '5px', fontSize: '12px' }}>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½</span>
                        <span style={{ color: greyColor, marginBottom: '15px', fontSize: '12px' }}>ÐÑÐµÐ¼Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ Ð½Ðµ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¾</span>
                        <div style={blankButtonCSS}>
                          <span>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð¿Ð¾Ð´Ð¿Ð¸ÑÐ°Ð½</span>
                          <img
                            alt={""}
                            src={docCorrect}
                            style={{ marginLeft: '6px', marginTop: '2px', width: '16px' }}
                          />
                        </div>
                      </div>
                    </div>
                    <div style={{ display: 'flex', flexDirection: 'row', marginLeft: false ? '80px' : '0px' }}>
                      <div style={{ display: 'block', position: 'relative', width: '100px' }}>
                        <img
                          alt={""}
                          src={txt}
                          style={{ width: '90px', filter: 'grayscale(80%)', cursor: 'pointer' }}
                          onClick={() => {
                            dispatch(setShowFOS(true))
                            dispatch(setShowTypeFOS('showFileContract'))
                            dispatch(setShow('undefined'))
                          }}
                        />
                        { false && <img
                          alt={""}
                          src={semiMenu}
                          style={semiIconsCSS}
                        /> }
                      </div>
                      <div style={{ display: 'flex', flexDirection: 'column', position: 'relative', marginLeft: '16px' }}>
                        <span style={{ color: greyColor, marginBottom: '5px' }}>{ contractFileServer.name }</span>
                        <span style={{ color: greyColor, marginBottom: '5px', fontSize: '12px' }}>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½</span>
                        <span style={{ color: greyColor, marginBottom: '15px', fontSize: '12px' }}>ÐÑÐµÐ¼Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ Ð½Ðµ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¾</span>
                        <div style={{ ...blankButtonCSS, backgroundColor: greyColor3 }}>
                          <span>ÐÐ´ÐµÑ Ð¿Ð¾Ð´Ð¿Ð¸ÑÐ°Ð½Ð¸Ñ</span>
                          <img
                            alt={""}
                            src={docWait}
                            style={{ marginLeft: '6px', marginTop: '2px', width: '16px' }}
                          />
                        </div>
                        <div 
                          style={{ 
                            ...blankButtonCSS, 
                            marginTop: '13px', 
                            paddingLeft: '0px',
                            width: '180px'
                          }}
                        >
                          <a 
                            href={`http://85.193.88.125:3000/techContracts/${contractFileServer.name}`}
                            target="_blank"
                            style={{ 
                              textAlign: 'center', 
                              width: '100%',
                              color: 'inherit',
                              textDecoration: 'none'
                            }} rel="noreferrer"
                          >
                            Ð¡Ð¾ÑÑÐ°Ð½Ð¸ÑÑ Ð´Ð¾Ð³Ð¾Ð²Ð¾Ñ
                          </a>
                        </div>
                      </div>
                    </div>
                  </MasterDocFork.ContentLine> }
                  { contractFileServerPDF.text.indexOf('no such file or directory') < 0 && <MasterDocFork.ContentLine style={{ marginTop: '24px', marginBottom: '20px' }}>
                    <div style={{ display: 'none', flexDirection: 'row' }}>
                      <div style={{ display: 'block', position: 'relative', width: '100px' }}>
                        <img
                          alt={""}
                          src={txt}
                          style={{ width: '90px', cursor: 'pointer' }}
                        />
                        { false && <img
                          alt={""}
                          src={semiMenu}
                          style={semiIconsCSS}
                        /> }
                      </div>
                      <div style={{ display: 'flex', flexDirection: 'column', position: 'relative', marginLeft: '16px' }}>
                        <span style={{ color: greyColor, marginBottom: '5px' }}>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð¾ÑÐ½Ð¾Ð²Ð½Ð¾Ð¹</span>
                        <span style={{ color: greyColor, marginBottom: '5px', fontSize: '12px' }}>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½</span>
                        <span style={{ color: greyColor, marginBottom: '15px', fontSize: '12px' }}>ÐÑÐµÐ¼Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ Ð½Ðµ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¾</span>
                        <div style={blankButtonCSS}>
                          <span>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð¿Ð¾Ð´Ð¿Ð¸ÑÐ°Ð½</span>
                          <img
                            alt={""}
                            src={docCorrect}
                            style={{ marginLeft: '6px', marginTop: '2px', width: '16px' }}
                          />
                        </div>
                      </div>
                    </div>
                    <div style={{ display: 'flex', flexDirection: 'row', marginLeft: false ? '80px' : '0px' }}>
                      <div style={{ display: 'block', position: 'relative', width: '100px' }}>
                        <img
                          alt={""}
                          src={pdf}
                          style={{ width: '90px', filter: 'grayscale(80%)', cursor: 'pointer' }}
                          onClick={() => {
                            dispatch(setShowFOS(true))
                            dispatch(setShowTypeFOS('showFileContract'))
                            dispatch(setShow('undefined'))
                          }}
                        />
                        { false && <img
                          alt={""}
                          src={semiMenu}
                          style={semiIconsCSS}
                        /> }
                      </div>
                      <div style={{ display: 'flex', flexDirection: 'column', position: 'relative', marginLeft: '16px' }}>
                        <span style={{ color: greyColor, marginBottom: '5px' }}>{ contractFileServerPDF.name }</span>
                        <span style={{ color: greyColor, marginBottom: '5px', fontSize: '12px' }}>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½</span>
                        <span style={{ color: greyColor, marginBottom: '15px', fontSize: '12px' }}>ÐÑÐµÐ¼Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ Ð½Ðµ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¾</span>
                        <div style={{ ...blankButtonCSS, backgroundColor: greyColor3 }}>
                          <span>ÐÐ´ÐµÑ Ð¿Ð¾Ð´Ð¿Ð¸ÑÐ°Ð½Ð¸Ñ</span>
                          <img
                            alt={""}
                            src={docWait}
                            style={{ marginLeft: '6px', marginTop: '2px', width: '16px' }}
                          />
                        </div>
                        <div 
                          style={{ 
                            ...blankButtonCSS, 
                            marginTop: '13px', 
                            paddingLeft: '0px',
                            width: '180px'
                          }}
                        >
                          <a 
                            href={`http://85.193.88.125:3000/techContracts/${contractFileServerPDF.name}`}
                            target="_blank"
                            style={{ 
                              textAlign: 'center', 
                              width: '100%',
                              color: 'inherit',
                              textDecoration: 'none'
                            }} rel="noreferrer"
                          >
                            Ð¡Ð¾ÑÑÐ°Ð½Ð¸ÑÑ Ð´Ð¾Ð³Ð¾Ð²Ð¾Ñ
                          </a>
                        </div>
                      </div>
                    </div>
                  </MasterDocFork.ContentLine> }
                  <span
                    onDoubleClick={() => setMasterDocsShadowContent(prev => !prev)}
                    style={{
                      display: 'block',
                      position: 'relative',
                      width: '600px',
                      lineHeight: '22px',
                      backgroundColor: 'rgb(253, 237, 237)',
                      padding: '14px',
                      paddingLeft: '20px',
                      borderRadius: '4px',
                      marginTop: '0px',
                      marginBottom: '29px',
                      cursor: 'pointer'
                    }}
                  >{"ÐÐ°Ð»ÑÐ½ÐµÐ¹ÑÐ¸Ð¹ ÐºÐ¾Ð½ÑÐµÐ½Ñ Ð² Ð½Ð°ÑÑÐ¾ÑÑÐµÐµ Ð²ÑÐµÐ¼Ñ ÑÐ²Ð»ÑÐµÑÑÑ ÑÑÐ°ÑÐ¸ÑÐ½ÑÐ¼. ÐÐ°Ð¶Ð¼Ð¸ÑÐµ Ð¾Ð´Ð¸Ð½ ÑÐ°Ð· Ð½Ð° Ð´Ð°Ð½Ð½Ð¾Ðµ ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸Ðµ, ÑÑÐ¾Ð±Ñ ÑÐºÑÑÑÑ Ð¸Ð»Ð¸ Ð¿Ð¾ÐºÐ°Ð·Ð°ÑÑ ÑÑÑ ÑÐ°ÑÑÑ ÐºÐ¾Ð½ÑÐµÐ½ÑÐ°"}</span>
                  { masterDocsShadowContent && <React.Fragment>
                    <MasterDocFork.Delimiter background={chatBorderColor} style={{ marginTop: '18px' }}/>
                    <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginTop: '27px', marginBottom: '30px' }}>
                      <span style={{ fontWeight: 'bold', display: 'block', fontSize: '15px' }}>ÐÐºÑÑ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð½ÑÑ ÑÐ°Ð±Ð¾Ñ</span>
                      <ButtonComponent
                        inner={"ÐÐ°Ð³ÑÑÐ·Ð¸ÑÑ Ð½Ð¾Ð²ÑÐ¹ Ð°ÐºÑ"} 
                        type='CONTAINED_DEFAULT' 
                        action={() => console.log('this is button')}
                        actionData={null}
                        widthType={'px'}
                        widthValue={200}
                        children={""}
                        childrenCss={undefined}
                        iconSrc={null}
                        iconCss={undefined}
                        muiIconSize={30}
                        MuiIconChildren={ArrowUpwardIcon}
                        css={{
                          position: 'relative',
                          boxSizing: 'border-box',
                          padding: '4px',
                          backgroundColor: chatSubmitColor,
                          width: '56px',
                          height: '43px',
                        }}
                      />
                    </MasterDocFork.ContentLine>
                    <span
                      style={{
                        display: 'block',
                        position: 'relative',
                        width: '600px',
                        lineHeight: '22px',
                        backgroundColor: 'rgb(253, 237, 237)',
                        padding: '14px',
                        paddingLeft: '20px',
                        borderRadius: '4px',
                        marginTop: '0px',
                        marginBottom: '16px'
                      }}
                    >{"Ð¡ÑÐ°ÑÐ¸ÑÐ½ÑÐµ ÑÐ»ÐµÐ¼ÐµÐ½ÑÑ Ð¾ÑÐ¾Ð±ÑÐ°Ð¶Ð°ÑÑÑÑ Ð¼Ð½Ðµ Ð´Ð»Ñ Ð½Ð°Ð¿Ð¾Ð¼Ð¸Ð½Ð°Ð½Ð¸Ñ, ÑÑÐ¾Ð± Ð½Ð¸ÑÐµÐ³Ð¾ Ð½Ðµ Ð·Ð°Ð±ÑÑÑ"}</span>

                    { Array(2)
                      .fill({ 
                        status: 'GREEN', 
                        data: { 
                          name: 'ÑÐ»ÐµÐ¼ÐµÐ½Ñ-Ð´Ð¾ÐºÑÐ¼ÐµÐ½Ñ-ÑÑÐ°ÑÐ¸ÑÐ½ÑÐ¹.pdf', 
                          date: '29.02.2023', 
                          statusName: 'ÐÐ¾Ð´Ð¿Ð¸ÑÐ°Ð½' 
                        }
                      }).map((item, index) => {

                      return (
                        <MasterDocFork.ContentLine key={index} style={{ opacity: 0.8 }}>
                          <DocumentLine
                            status={item.status}
                            data={item.data}
                          />
                        </MasterDocFork.ContentLine>
                      )

                    })}

                    <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginTop: '40px', marginBottom: '20px' }}>
                      <span style={{ fontWeight: 'bold', display: 'block', fontSize: '15px' }}>ÐÐ°ÑÑÐµÑ Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÑ</span>
                      <div>
                        <img
                          alt={""}
                          src={tillIcon}
                          style={{ 
                            width: '24px', 
                            marginRight: '16px', 
                            cursor: 'pointer',
                            opacity: docviewFormat === 'tiles' ? '1' : '0.5' 
                          }}
                          onClick={() => setDocviewFormat('tiles')}
                        />
                        <img
                          alt={""}
                          src={linesIcon}
                          style={{ 
                            width: '24px', 
                            cursor: 'pointer',
                            opacity: docviewFormat === 'lines' ? '1' : '0.5' 
                          }}
                          onClick={() => setDocviewFormat('lines')}
                        />
                      </div>
                    </MasterDocFork.ContentLine>
                    <MasterDocFork.Delimiter background={chatBorderColor} style={{ marginTop: '0px', marginBottom: '36px' }}/>
                    <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginBottom: '33px', alignItems: 'flex-end' }}>
                      <span style={{ fontWeight: '600', fontSize: '15px' }}>Ð¤Ð°Ð¹Ð»Ñ Ð² Ð·Ð°ÐºÐ°Ð·Ðµ</span>
                      <div style={fileSorterCSS}>
                        <SelectField 
                          placeholder={"Ð¡Ð¾ÑÑÐ¸ÑÐ¾Ð²Ð°ÑÑ Ð¿Ð¾ Ð´Ð°ÑÐµ"}
                          params={{ width: 280, mb: '0px', height: 50 }}
                          data={[
                            { value: '1', label: 'ÐÑÐµÑÐ°' },
                            { value: '2', label: 'ÐÐ¾Ð·Ð°Ð²ÑÐµÑÐ°' },
                            { value: '3', label: 'ÐÐ¾ÑÐ»ÐµÐ´Ð½Ð¸Ð¹ Ð¼ÐµÑÑÑ' },
                          ]}
                          multy={false}
                          action={() => {}}
                          actionType={""}
                          actionParams={[]}
                          showIcon={true}
                          icon={null}
                          iconStyles={{
                            marginTop: '-12px',
                            marginLeft: '6px',
                            width: '34px',
                          }}
                        />
                        <img
                          alt={""}
                          src={arraySortIcon}
                          style={{ marginLeft: '20px', marginRight: '16px' }}
                        />
                      </div>
                    </MasterDocFork.ContentLine>
                    { docviewFormat === 'lines' && <React.Fragment>
                      { Array(2)
                        .fill({ 
                          status: 'GREEN', 
                          data: { 
                            name: 'ÑÐ»ÐµÐ¼ÐµÐ½Ñ-Ð´Ð¾ÐºÑÐ¼ÐµÐ½Ñ-ÑÑÐ°ÑÐ¸ÑÐ½ÑÐ¹.pdf', 
                            date: '29.02.2023', 
                            statusName: 'ÐÐ¾Ð´Ð¿Ð¸ÑÐ°Ð½',
                            size: 220
                          }
                        }).map((item, index) => {

                        return (
                          <MasterDocFork.ContentLine key={index} style={{ opacity: 0.8 }}>
                            <DocumentLine
                              status={item.status}
                              data={item.data}
                            />
                          </MasterDocFork.ContentLine>
                        )

                      })}
                      { Array(1)
                        .fill({ 
                          status: 'WHITE', 
                          data: { 
                            name: 'ÑÐ»ÐµÐ¼ÐµÐ½Ñ-Ð´Ð¾ÐºÑÐ¼ÐµÐ½Ñ-ÑÑÐ°ÑÐ¸ÑÐ½ÑÐ¹.pdf', 
                            date: '29.02.2023', 
                            statusName: 'ÐÐ¶Ð¸Ð´Ð°ÐµÑ',
                            size: 220
                          }
                        }).map((item, index) => {

                        return (
                          <MasterDocFork.ContentLine key={index} style={{ opacity: 0.8 }}>
                            <DocumentLine
                              status={item.status}
                              data={item.data}
                            />
                          </MasterDocFork.ContentLine>
                        )

                      })}
                      <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginBottom: '33px', marginTop: '20px', alignItems: 'flex-end' }}>
                        <span style={{ fontWeight: 'bold', fontSize: '15px' }}>Ð Ð°Ð·Ð´ÐµÐ» ÐÐ¾Ð¶Ð°ÑÐ½Ð°Ñ Ð±ÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð¾ÑÑÑ</span>
                      </MasterDocFork.ContentLine>
                      { Array(2)
                        .fill({ 
                          status: 'GREEN', 
                          data: { 
                            name: 'ÑÐ»ÐµÐ¼ÐµÐ½Ñ-Ð´Ð¾ÐºÑÐ¼ÐµÐ½Ñ-ÑÑÐ°ÑÐ¸ÑÐ½ÑÐ¹.pdf', 
                            date: '29.02.2023', 
                            statusName: 'ÐÐ¾Ð´Ð¿Ð¸ÑÐ°Ð½',
                            size: 220
                          }
                        }).map((item, index) => {

                        return (
                          <MasterDocFork.ContentLine key={index} style={{ opacity: 0.8 }}>
                            <DocumentLine
                              status={item.status}
                              data={item.data}
                            />
                          </MasterDocFork.ContentLine>
                        )

                      })}
                      { Array(1)
                        .fill({ 
                          status: 'WHITE', 
                          data: { 
                            name: 'ÑÐ»ÐµÐ¼ÐµÐ½Ñ-Ð´Ð¾ÐºÑÐ¼ÐµÐ½Ñ-ÑÑÐ°ÑÐ¸ÑÐ½ÑÐ¹.pdf', 
                            date: '29.02.2023', 
                            statusName: 'ÐÐ¶Ð¸Ð´Ð°ÐµÑ',
                            size: 220
                          }
                        }).map((item, index) => {

                        return (
                          <MasterDocFork.ContentLine key={index} style={{ opacity: 0.8 }}>
                            <DocumentLine
                              status={item.status}
                              data={item.data}
                            />
                          </MasterDocFork.ContentLine>
                        )

                      })}
                    </React.Fragment> }
                    { docviewFormat === 'tiles' && <MasterDocFork.ContentLine style={{ flexWrap: 'wrap' }}>
                      { Array(2)
                        .fill({ 
                          status: 'GREEN', 
                          data: { 
                            name: 'ÑÐ»ÐµÐ¼ÐµÐ½Ñ-Ð´Ð¾ÐºÑÐ¼ÐµÐ½Ñ-ÑÑÐ°ÑÐ¸ÑÐ½ÑÐ¹.pdf', 
                            date: '29.02.2023', 
                            statusName: 'ÐÐ¾Ð´Ð¿Ð¸ÑÐ°Ð½',
                            size: 220
                          }
                        }).map((item, index) => {

                          return (
                            <div style={doctileCSS} key={index}>
                              <div style={{ position: 'relative' }}>
                                <img
                                  alt={""}
                                  src={doc}
                                />

                                { item.status === 'GREEN' && 
                                  <span 
                                    style={{ 
                                      width: '24px',  
                                      display: 'block', 
                                      position: 'absolute',
                                      borderRadius: '50%',
                                      overflow: 'hidden',
                                      top: '100%',
                                      left: '100%',
                                      marginTop: '-30px',
                                      marginLeft: '-28px' 
                                    }}
                                  >
                                    <img 
                                      alt={""} 
                                      src={correct}
                                      style={{
                                        backgroundColor: 'white',
                                        display: 'block',
                                        width: '24px',
                                      }} 
                                    /> 
                                  </span>
                                }
                                { item.status === 'WHITE' && 
                                  <span 
                                    style={{ 
                                      width: '24px',  
                                      display: 'block', 
                                      position: 'absolute',
                                      borderRadius: '50%',
                                      overflow: 'hidden',
                                      top: '100%',
                                      left: '100%',
                                      marginTop: '-30px',
                                      marginLeft: '-28px' 
                                    }}
                                  >
                                    <img 
                                      alt={""} 
                                      src={wait}
                                      style={{
                                        backgroundColor: 'white',
                                        display: 'block',
                                        width: '24px',
                                      }} 
                                    /> 
                                  </span>
                                }
                              
                              </div>
                              <div
                                style={{
                                  display: 'block',
                                  position: 'relative',
                                  width: '100%',
                                  height: '26px',
                                  overflow: 'hidden',
                                  marginTop: '-8px'
                                }}
                              >
                                <span style={{ color: greyColor, display: 'block', width: '100%', lineHeight: '26px', fontSize: '12px' }}>{ item.data.name }</span>
                              </div>
                              <span style={{ color: greyColor2, marginBottom: '4.4px', fontSize: '12px' }}>{ item.data.date }</span>
                              <span style={{ color: greyColor2, fontSize: '12px' }}>{ item.data.size } Mb</span>
                            </div>
                          )

                      })}
                      { Array(8)
                        .fill({ 
                          status: 'WHITE', 
                          data: { 
                            name: 'ÑÐ»ÐµÐ¼ÐµÐ½Ñ-Ð´Ð¾ÐºÑÐ¼ÐµÐ½Ñ-ÑÑÐ°ÑÐ¸ÑÐ½ÑÐ¹.pdf', 
                            date: '29.02.2023', 
                            statusName: 'ÐÐ¶Ð¸Ð´Ð°ÐµÑ',
                            size: 220
                          }
                        }).map((item, index) => {

                          return (
                            <div style={doctileCSS} key={index}>
                              <div style={{ position: 'relative' }}>
                                <img
                                  alt={""}
                                  src={doc}
                                />

                                { item.status === 'GREEN' && 
                                  <span 
                                    style={{ 
                                      width: '24px',  
                                      display: 'block', 
                                      position: 'absolute',
                                      borderRadius: '50%',
                                      overflow: 'hidden',
                                      top: '100%',
                                      left: '100%',
                                      marginTop: '-30px',
                                      marginLeft: '-28px' 
                                    }}
                                  >
                                    <img 
                                      alt={""} 
                                      src={correct}
                                      style={{
                                        backgroundColor: 'white',
                                        display: 'block',
                                        width: '24px',
                                      }} 
                                    /> 
                                  </span>
                                }
                                { item.status === 'WHITE' && 
                                  <span 
                                    style={{ 
                                      width: '24px',  
                                      display: 'block', 
                                      position: 'absolute',
                                      borderRadius: '50%',
                                      overflow: 'hidden',
                                      top: '100%',
                                      left: '100%',
                                      marginTop: '-30px',
                                      marginLeft: '-28px' 
                                    }}
                                  >
                                    <img 
                                      alt={""} 
                                      src={wait}
                                      style={{
                                        backgroundColor: 'white',
                                        display: 'block',
                                        width: '24px',
                                      }} 
                                    /> 
                                  </span>
                                }

                              </div>
                              <div
                                style={{
                                  display: 'block',
                                  position: 'relative',
                                  width: '100%',
                                  height: '26px',
                                  overflow: 'hidden',
                                  marginTop: '-8px'
                                }}
                              >
                                <span style={{ color: greyColor, display: 'block', width: '100%', lineHeight: '26px', fontSize: '12px' }}>{ item.data.name }</span>
                              </div>
                              <span style={{ color: greyColor2, marginBottom: '4.4px', fontSize: '12px' }}>{ item.data.date }</span>
                              <span style={{ color: greyColor2, fontSize: '12px' }}>{ item.data.size } Mb</span>
                            </div>
                          )

                      })}
                      <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginBottom: '33px', marginTop: '30px', alignItems: 'flex-end' }}>
                        <span style={{ fontWeight: 'bold', fontSize: '15px' }}>Ð Ð°Ð·Ð´ÐµÐ» ÐÐ¾Ð¶Ð°ÑÐ½Ð°Ñ Ð±ÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð¾ÑÑÑ</span>
                      </MasterDocFork.ContentLine>
                      { Array(2)
                        .fill({ 
                          status: 'GREEN', 
                          data: { 
                            name: 'ÑÐ»ÐµÐ¼ÐµÐ½Ñ-Ð´Ð¾ÐºÑÐ¼ÐµÐ½Ñ-ÑÑÐ°ÑÐ¸ÑÐ½ÑÐ¹.pdf', 
                            date: '29.02.2023', 
                            statusName: 'ÐÐ¾Ð´Ð¿Ð¸ÑÐ°Ð½',
                            size: 220
                          }
                        }).map((item, index) => {

                          return (
                            <div style={doctileCSS} key={index}>
                              <div style={{ position: 'relative' }}>
                                <img
                                  alt={""}
                                  src={doc}
                                />

                                { item.status === 'GREEN' && 
                                  <span 
                                    style={{ 
                                      width: '24px',  
                                      display: 'block', 
                                      position: 'absolute',
                                      borderRadius: '50%',
                                      overflow: 'hidden',
                                      top: '100%',
                                      left: '100%',
                                      marginTop: '-30px',
                                      marginLeft: '-28px' 
                                    }}
                                  >
                                    <img 
                                      alt={""} 
                                      src={correct}
                                      style={{
                                        backgroundColor: 'white',
                                        display: 'block',
                                        width: '24px',
                                      }} 
                                    /> 
                                  </span>
                                }
                                { item.status === 'WHITE' && 
                                  <span 
                                    style={{ 
                                      width: '24px',  
                                      display: 'block', 
                                      position: 'absolute',
                                      borderRadius: '50%',
                                      overflow: 'hidden',
                                      top: '100%',
                                      left: '100%',
                                      marginTop: '-30px',
                                      marginLeft: '-28px' 
                                    }}
                                  >
                                    <img 
                                      alt={""} 
                                      src={wait}
                                      style={{
                                        backgroundColor: 'white',
                                        display: 'block',
                                        width: '24px',
                                      }} 
                                    /> 
                                  </span>
                                }

                              </div>
                              <div
                                style={{
                                  display: 'block',
                                  position: 'relative',
                                  width: '100%',
                                  height: '26px',
                                  overflow: 'hidden',
                                  marginTop: '-8px'
                                }}
                              >
                                <span style={{ color: greyColor, display: 'block', width: '100%', lineHeight: '26px', fontSize: '12px' }}>{ item.data.name }</span>
                              </div>
                              <span style={{ color: greyColor2, marginBottom: '4.4px', fontSize: '12px' }}>{ item.data.date }</span>
                              <span style={{ color: greyColor2, fontSize: '12px' }}>{ item.data.size } Mb</span>
                            </div>
                          )

                      })}
                      { Array(1)
                        .fill({ 
                          status: 'WHITE', 
                          data: { 
                            name: 'ÑÐ»ÐµÐ¼ÐµÐ½Ñ-Ð´Ð¾ÐºÑÐ¼ÐµÐ½Ñ-ÑÑÐ°ÑÐ¸ÑÐ½ÑÐ¹.pdf', 
                            date: '29.02.2023', 
                            statusName: 'ÐÐ¶Ð¸Ð´Ð°ÐµÑ',
                            size: 220
                          }
                        }).map((item, index) => {

                          return (
                            <div style={doctileCSS} key={index}>
                              <div style={{ position: 'relative' }}>
                                <img
                                  alt={""}
                                  src={doc}
                                />

                                { item.status === 'GREEN' && 
                                  <span 
                                    style={{ 
                                      width: '24px',  
                                      display: 'block', 
                                      position: 'absolute',
                                      borderRadius: '50%',
                                      overflow: 'hidden',
                                      top: '100%',
                                      left: '100%',
                                      marginTop: '-30px',
                                      marginLeft: '-28px' 
                                    }}
                                  >
                                    <img 
                                      alt={""} 
                                      src={correct}
                                      style={{
                                        backgroundColor: 'white',
                                        display: 'block',
                                        width: '24px',
                                      }} 
                                    /> 
                                  </span>
                                }
                                { item.status === 'WHITE' && 
                                  <span 
                                    style={{ 
                                      width: '24px',  
                                      display: 'block', 
                                      position: 'absolute',
                                      borderRadius: '50%',
                                      overflow: 'hidden',
                                      top: '100%',
                                      left: '100%',
                                      marginTop: '-30px',
                                      marginLeft: '-28px' 
                                    }}
                                  >
                                    <img 
                                      alt={""} 
                                      src={wait}
                                      style={{
                                        backgroundColor: 'white',
                                        display: 'block',
                                        width: '24px',
                                      }} 
                                    /> 
                                  </span>
                                }

                              </div>
                              <div
                                style={{
                                  display: 'block',
                                  position: 'relative',
                                  width: '100%',
                                  height: '26px',
                                  overflow: 'hidden',
                                  marginTop: '-8px'
                                }}
                              >
                                <span style={{ color: greyColor, display: 'block', width: '100%', lineHeight: '26px', fontSize: '12px' }}>{ item.data.name }</span>
                              </div>
                              <span style={{ color: greyColor2, marginBottom: '4.4px', fontSize: '12px' }}>{ item.data.date }</span>
                              <span style={{ color: greyColor2, fontSize: '12px' }}>{ item.data.size } Mb</span>
                            </div>
                          )

                      })}
                    </MasterDocFork.ContentLine> }
                    <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginTop: '33px', marginBottom: '100px' }}>
                      
                      { docviewFormat === 'lines' && <div/> }
                      
                      <ButtonComponent
                        inner={"Ð¡ÐºÐ°ÑÐ°ÑÑ Ð°ÑÑÐ¸Ð²Ð¾Ð¼"} 
                        type='CONTAINED_DEFAULT' 
                        action={() => console.log('this is button')}
                        actionData={null}
                        widthType={'px'}
                        widthValue={160}
                        children={""}
                        childrenCss={undefined}
                        iconSrc={null}
                        iconCss={undefined}
                        muiIconSize={30}
                        MuiIconChildren={ArrowUpwardIcon}
                        css={{
                          position: 'relative',
                          boxSizing: 'border-box',
                          padding: '4px',
                          backgroundColor: chatBorderColor,
                          color: greyColor,
                          width: '56px',
                          height: '43px',
                        }}
                      />
                    </MasterDocFork.ContentLine>
                  </React.Fragment> }

                </MasterDocFork.ChatContainer>
            </React.Fragment>
            : contentType === 'ChapterCC'

            /* ---------------------------------------- */
            /* Ð±Ð°Ð·Ð¾Ð²Ð¾Ðµ Ð¾ÐºÐ½Ð¾ Ð´Ð»Ñ ÑÐ°Ð·Ð´ÐµÐ»Ð°
            /* ---------------------------------------- */

            ? <React.Fragment>
                <MasterDocFork.ChatContainer style={{ paddingTop: '40px', height: 'auto', minHeight: '100vh' }} backgroundColor={backgroundColor}>
                  <MasterDocFork.CloseIconContainer style={{ zIndex: '10' }}>
                    <MasterDocFork.CloseIcon 
                      style={{ zIndex: '10' }} 
                      onClick={showrightContent}
                    >
                      <img
                        alt={""} 
                        src={closeIcon}  
                      />
                    </MasterDocFork.CloseIcon>
                    <div 
                      style={{
                        display: 'flex',
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'flex-end',
                        position: 'absolute',
                        width: '100%',
                        boxSizing: 'border-box',
                      }}
                    >
                      <Fab 
                        onClick={() => {
                          chapterStep > 0 && setChapterStep(prev => prev - 1)
                        }}
                        aria-label="add"
                        style={{
                          display: 'block',
                          position: 'relative',
                          width: '50px',
                          height: '50px',
                          backgroundColor: 'rgb(217, 231, 240)',
                          marginRight: '20px'
                        }}
                      >
                        <ArrowBackIosNewIcon 
                          sx={{ 
                            marginBottom: '-7px', 
                            marginLeft: '-5px', 
                            fontSize: '28px', 
                            color: 'grey' 
                          }} 
                        />
                      </Fab>
                      <Fab 
                        onClick={() => {
                          chapterStep < chapters.length - 1 && setChapterStep(prev => prev + 1)
                        }}
                        aria-label="add"
                        style={{
                          display: 'block',
                          position: 'relative',
                          width: '50px',
                          height: '50px',
                          backgroundColor: 'rgb(217, 231, 240)',
                        }}
                      >
                        <ArrowBackIosNewIcon 
                          sx={{ 
                            marginBottom: '-7px', 
                            marginLeft: '5px', 
                            fontSize: '28px', 
                            color: 'grey',
                            transform: 'rotate(180deg)'
                          }} 
                        />
                      </Fab>
                    </div>
                  </MasterDocFork.CloseIconContainer>
                  <MasterDocFork.ContentLine>
                    <h3 style={{ fontSize: '28px', margin: 0, marginBottom: '22px' }}>
                      { chapters[chapterStep].title }
                    </h3>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine>
                    <span style={{ lineHeight: '24px' }}>{ chapters[chapterStep].description }</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginTop: '30px' }}>
                    <ButtonComponent
                      inner={"Ð¡Ð´Ð°ÑÑ ÑÐ°Ð·Ð´ÐµÐ» Ð½Ð° Ð¿ÑÐ¾Ð²ÐµÑÐºÑ"} 
                      type='CONTAINED_DISABLED' 
                      action={() => console.log('this is button')}
                      actionData={null}
                      widthType={'px'}
                      widthValue={238}
                      children={""}
                      childrenCss={undefined}
                      iconSrc={null}
                      iconCss={undefined}
                      muiIconSize={30}
                      MuiIconChildren={ArrowUpwardIcon}
                      css={{
                        position: 'relative',
                        boxSizing: 'border-box',
                        padding: '4px',
                        backgroundColor: 'rgb(217, 231, 240)',
                        width: '56px',
                        height: '43px',
                      }}
                    />
                  </MasterDocFork.ContentLine>
                  <span
                    style={{
                      display: 'block',
                      position: 'relative',
                      width: '600px',
                      lineHeight: '22px',
                      backgroundColor: 'rgb(253, 237, 237)',
                      padding: '14px',
                      paddingLeft: '20px',
                      borderRadius: '4px',
                      marginTop: '22px'
                    }}
                  >{"ÐÐ½Ð¸Ð¼Ð°Ð½Ð¸Ðµ! Ð¡Ð»ÐµÐ´ÑÑÑÐ¸Ðµ Ð¿ÑÐµÐ´ÑÑÐ°Ð²Ð»ÐµÐ½Ð¸Ñ Ð½Ð° Ð´Ð°Ð½Ð½Ð¾Ð¼ ÑÑÐ°Ð¿Ðµ ÑÐ²Ð»ÑÑÑÑÑ ÑÑÐ°ÑÐ¸ÑÐ½ÑÐ¼Ð¸, Ð½ÑÐ¶Ð½Ñ ÑÑÐ¾Ð±Ñ Ð½Ðµ Ð·Ð°Ð±ÑÑÑ Ð³Ð´Ðµ Ð»ÐµÐ¶Ð¸Ñ Ð²ÐµÑÑÑÐºÐ° ÑÑÐ¸Ñ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ¾Ð²"}</span>
                  <MasterDocFork.ContentLine style={{ marginTop: '33px', alignItems: 'center' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', marginRight: '80px', fontSize: '15px' }}>ÐÑÐ²ÐµÑÑÑÐ²ÐµÐ½Ð½ÑÐ¹</span>
                    <div
                      style={{
                        display: 'flex',
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'flex-start',
                        position: 'relative'
                      }}
                    >
                      <img
                        alt={""}
                        src={defaulrAvatar}
                        style={{
                          display: 'block',
                          position: 'relative',
                          width: '56px',
                          marginRight: '20px'
                        }}
                      />
                      <div 
                        style={{
                          display: 'flex',
                          flexDirection: 'column',
                          alignItems: 'flex-start',
                          justifyContent: 'flex-start',
                          position: 'relative',
                          marginTop: '-6px'
                        }}
                      >
                        <span style={{ fontSize: '13px', width: '230px', marginBottom: '3px', lineHeight: '22px', fontWeight: 'bold' }}>
                          { ordersList.filter(item => item.id === selectTask).length > 0 
                          
                            ? ordersList.filter(item => item.id === selectTask)[0].executor
                            : 'ÐÑÐ¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»Ñ Ð½Ðµ Ð²ÑÐ±ÑÐ°Ð½' }
                        </span>
                        <span style={{ fontSize: '14px' }}>{"ÐÐ¸Ð´ Ð·Ð°Ð½ÑÑÐ¾ÑÑÐ¸ Ð½Ðµ Ð¿Ð¾Ð»ÑÑÐµÐ½"}</span>
                      </div>
                    </div>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginTop: '44px', alignItems: 'center', justifyContent: 'space-between' }}>
                    <div 
                      style={{
                        display: 'flex',
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'flex-start'
                      }}
                    >
                      <span style={{ fontWeight: 'bold', display: 'block', marginRight: '15px', fontSize: '15px' }}>ÐÐ°ÑÑÐµÑ Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÑ</span>
                      <img
                        alt={""}
                        src={infoGrey}
                      />
                      <span style={{ fontWeight: 'bold', display: 'block', marginLeft: '30px', opacity: 0.5, fontSize: '15px' }}>ÐÐ¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½ÑÐµ Ð²Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ</span>
                    </div>
                    <ButtonComponent
                      inner={"Ð¡ÐºÐ°ÑÐ°ÑÑ Ð°ÑÑÐ¸Ð²Ð¾Ð¼"} 
                      type='CONTAINED_DEFAULT' 
                      action={() => console.log('this is button')}
                      actionData={null}
                      widthType={'px'}
                      widthValue={160}
                      children={""}
                      childrenCss={undefined}
                      iconSrc={null}
                      iconCss={undefined}
                      muiIconSize={30}
                      MuiIconChildren={ArrowUpwardIcon}
                      css={{
                        position: 'relative',
                        boxSizing: 'border-box',
                        padding: '4px',
                        backgroundColor: chatBorderColor,
                        color: greyColor,
                        width: '56px',
                        height: '43px',
                      }}
                    />
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine>
                    <div style={whiteContainerCSS}>
                    { contractFileServer.text.indexOf('no such file or directory') < 0 && <MasterDocFork.ContentLine style={{ marginTop: '10px' }}>
                        <div style={{ display: 'none', flexDirection: 'row' }}>
                          <div style={{ display: 'block', position: 'relative', width: '100px' }}>
                            <img
                              alt={""}
                              src={txt}
                              style={{ width: '90px', cursor: 'pointer' }}
                            />
                            { false && <img
                              alt={""}
                              src={semiMenu}
                              style={semiIconsCSS}
                            /> }
                          </div>
                          <div style={{ display: 'flex', flexDirection: 'column', position: 'relative', marginLeft: '16px' }}>
                            <span style={{ color: greyColor, marginBottom: '5px' }}>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð¾ÑÐ½Ð¾Ð²Ð½Ð¾Ð¹</span>
                            <span style={{ color: greyColor, marginBottom: '5px', fontSize: '12px' }}>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½</span>
                            <span style={{ color: greyColor, marginBottom: '15px', fontSize: '12px' }}>ÐÑÐµÐ¼Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ Ð½Ðµ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¾</span>
                            <div style={blankButtonCSS}>
                              <span>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð¿Ð¾Ð´Ð¿Ð¸ÑÐ°Ð½</span>
                              <img
                                alt={""}
                                src={docCorrect}
                                style={{ marginLeft: '6px', marginTop: '2px', width: '16px' }}
                              />
                            </div>
                          </div>
                        </div>
                        <div style={{ display: 'flex', flexDirection: 'row', marginLeft: false ? '80px' : '0px' }}>
                          <div style={{ display: 'block', position: 'relative', width: '100px' }}>
                            <img
                              alt={""}
                              src={txt}
                              style={{ width: '90px', filter: 'grayscale(80%)', cursor: 'pointer' }}
                              onClick={() => {
                                dispatch(setShowFOS(true))
                                dispatch(setShowTypeFOS('showFileContract'))
                                dispatch(setShow('undefined'))
                              }}
                            />
                            { false && <img
                              alt={""}
                              src={semiMenu}
                              style={semiIconsCSS}
                            /> }
                          </div>
                          <div style={{ display: 'flex', flexDirection: 'column', position: 'relative', marginLeft: '16px' }}>
                            <span style={{ color: greyColor, marginBottom: '5px' }}>{ contractFileServer.name }</span>
                            <span style={{ color: greyColor, marginBottom: '5px', fontSize: '12px' }}>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½</span>
                            <span style={{ color: greyColor, marginBottom: '15px', fontSize: '12px' }}>ÐÑÐµÐ¼Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ Ð½Ðµ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¾</span>
                            <div style={{ ...blankButtonCSS, backgroundColor: greyColor3 }}>
                              <span>ÐÐ´ÐµÑ Ð¿Ð¾Ð´Ð¿Ð¸ÑÐ°Ð½Ð¸Ñ</span>
                              <img
                                alt={""}
                                src={docWait}
                                style={{ marginLeft: '6px', marginTop: '2px', width: '16px' }}
                              />
                            </div>
                          </div>
                        </div>
                      </MasterDocFork.ContentLine> }
                      { contractFileServer.text.indexOf('no such file or directory') >= 0 
                      
                        && <span style={{ color: 'grey', fontSize: '14px', marginTop: '-3px' }}>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð½Ðµ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½ Ð² Ð¿ÑÐ¾ÐµÐºÑ</span> 
                      
                      }
                      { Array(4).fill(0).map((item, index) => {

                        return (
                          <div 
                            style={{
                              display: 'none',
                              flexDirection: 'column',
                              alignItems: 'flex-start',
                              justifyContent: 'flex-start',
                              position: 'relative',
                              marginRight: '16px',
                              cursor: 'pointer',
                            }}
                          >
                            <img
                              alt={""}
                              src={doc}
                            />
                            <span style={{ fontSize: '12px', color: greyColor, marginTop: '6px' }}>{"ÐÐ»Ð°Ð½_Ð¡ÐºÐ»Ð°Ð´Ð°"}</span>
                            <span style={{ fontSize: '12px', color: greyColor2, marginTop: '4px' }}>{"140 Kb"}</span>
                          </div>
                        )

                      })}
                    </div>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.Delimiter background={chatBorderColor} style={{ marginTop: '40px', marginBottom: '40px' }}/>
                  { Array(1).fill(0).map((item, index): ReactElement => {

                    return (
                      <MasterDocFork.ContentLine style={{ marginBottom: '8px' }}>
                        <CommunicationTable
                            status={"wait"}
                            oneButtonParams={{
                              isset: true,
                              color: 'white',
                              background: 'blue2',
                              inner: 'Ð Ð¼Ð°ÑÑÐµÑ-Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÑ',
                              width: 220,
                            }}
                            twoButtonParams={{
                              isset: true,
                              color: 'grey',
                              background: 'white',
                              inner: 'ÐÑÐºÐ°Ð·Ð°ÑÑ',
                              width: 120,
                            }}
                            image={"pdf"}
                            mb={"12px"}
                          />
                      </MasterDocFork.ContentLine>
                    )

                  })}
                  <MasterDocFork.ContentLine style={{ marginTop: '40px', marginBottom: '20px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', marginRight: '80px', fontSize: '15px' }}>ÐÐ±ÑÐµÐ½Ð¸Ðµ Ð¿Ð¾ ÑÐ°Ð·Ð´ÐµÐ»Ñ</span>
                  </MasterDocFork.ContentLine>
                  <ChatFork.ChatHeader>
                    <div style={divCSS}>
                      <ChatFork.ChatHeaderAvatar style={avatarContainerCSS}>
                        <img
                          alt={""}
                          src={defaulrAvatar}
                          style={avatarCSS}
                        />
                        <img
                          alt={""}
                          src={defaulrAvatar}
                          style={{ ...avatarCSS, marginLeft: '-14px' }}
                        />
                        <img
                          alt={""}
                          src={defaulrAvatar}
                          style={{ ...avatarCSS, marginLeft: '-14px' }}
                        />
                      </ChatFork.ChatHeaderAvatar>
                    </div>
                    <div style={divCSS}>
                      <ChatFork.ChatHeaderEnableDocs>
                        <span style={{ ...lastActiveSpanCSS, fontSize: '14px' }}>ÐÐ¾ÐºÑÐ¼ÐµÐ½ÑÑ ÑÐ°Ð·ÑÐµÑÐµÐ½Ñ</span>
                        <Switch color={"primary"} defaultChecked />
                      </ChatFork.ChatHeaderEnableDocs>
                      <InputComponent
                        type={'TEXT_INPUT_OUTLINE_SEARCH'}
                        valueType='text'
                        required={false}
                        widthType={'px'}
                        widthValue={300}
                        heightValue={'56px'}
                        label={"ÐÐ¾Ð¸ÑÐº Ð¿Ð¾ ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸ÑÐ¼"}
                        isError={false}
                        isDisabled={false}
                        labelShrinkLeft={"0px"}
                        innerLabel={null}
                        css={{
                          fontSize: '12px',
                          position: 'relative',
                          boxSizing: 'border-box',
                          marginBottom: '8px',
                          backgroundColor: 'white'
                        }}
                      />
                    </div>
                  </ChatFork.ChatHeader>
                  <ChatFork.ChatBody
                    border={`1px solid ${chatBorderColor}`}
                    backgroundColor={chatBackground}
                    style={{ marginTop: '12px', height: 'auto' }}
                  >
                    <ChatFork.ChatBodyInner
                      border={`1px solid transparent`}
                      backgroundColor={chatBackground}
                    >
                      <ChatMessagesContainer
                        data={[
                          { 
                            date: '05.01.2022', 
                            messages: [
                              { 
                                type: 'me', 
                                content: [
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:05',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:05',
                                    likes: 0  }
                                ]
                              },
                              { 
                                type: 'you', 
                                content: [
                                  { text: 'Ipsum nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et', 
                                    time: '20:06',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0,
                                    files: {
                                      id: 'undefined',
                                      ext: 'doc',
                                      name: 'ÐÐ»Ð°Ð½_Ð¡ÐºÐ»Ð°Ð´Ð°.doc'
                                    }},
                                ]
                              },
                              { 
                                type: 'me', 
                                content: [
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:08',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'you', 
                                content: [
                                  { text: 'Ipsum nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'me', 
                                content: [
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:08',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'you', 
                                content: [
                                  { text: 'Ipsum nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'action', 
                                content: [
                                  { text: 'Ipsum nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'me', 
                                content: [
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:08',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'me', 
                                content: [
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:08',
                                    likes: 0 },
                                ]
                              },
                            ]
                          }
                        ]}
                      />
                    </ChatFork.ChatBodyInner>
                    <div style={bottomDivCSS}>
                      <div style={bottomDivInnerCSS}>
                        <div style={clipDivCSS}>
                          <img
                            alt={""}
                            src={clipIcon}
                          />
                        </div>
                        <InputComponent
                          type={'TEXT_INPUT_OUTLINE'}
                          valueType='text'
                          required={false}
                          widthType={'%'}
                          widthValue={100}
                          heightValue={'50px'}
                          label={"Lorem ipsum dolor sit amet consectetur adipisicing elit"}
                          isError={false}
                          isDisabled={true}
                          labelShrinkLeft={"0px"}
                          innerLabel={null}
                          css={{
                            fontSize: '12px',
                            position: 'relative',
                            boxSizing: 'border-box',
                            marginTop: '0px',
                            backgroundColor: inputBackground,
                            marginRight: '12px'
                          }}
                        />
                        <ButtonComponent
                          inner={""} 
                          type='ICON_BUTTON_CHAT_SUBMIT' 
                          action={() => console.log('this is button')}
                          actionData={null}
                          widthType={'px'}
                          widthValue={56}
                          children={""}
                          childrenCss={undefined}
                          iconSrc={null}
                          iconCss={undefined}
                          muiIconSize={30}
                          MuiIconChildren={ArrowUpwardIcon}
                          css={{
                            position: 'relative',
                            boxSizing: 'border-box',
                            padding: '4px',
                            backgroundColor: chatSubmitColor,
                            width: '56px',
                            height: '56px',
                          }}
                        />
                      </div>
                    </div>
                  </ChatFork.ChatBody>
                </MasterDocFork.ChatContainer>
            </React.Fragment>
            : contentType === 'ExpertCC'

            /* ---------------------------------------- */
            /* Ð±Ð°Ð·Ð¾Ð²Ð¾Ðµ Ð¾ÐºÐ½Ð¾ Ð¿Ð¾Ð´ ÑÐ°Ð·Ð´ÐµÐ» ÑÐºÑÐ¿ÐµÑÑÐ¸Ð·Ñ
            /* ---------------------------------------- */

            ? <React.Fragment>
                <MasterDocFork.ChatContainer style={{ paddingTop: '40px', height: 'auto', minHeight: '100vh' }} backgroundColor={backgroundColor}>
                  <MasterDocFork.CloseIconContainer>
                    <MasterDocFork.CloseIcon onClick={showrightContent}>
                      <img
                        alt={""} 
                        src={closeIcon}  
                      />
                    </MasterDocFork.CloseIcon>
                  </MasterDocFork.CloseIconContainer>
                  <MasterDocFork.ContentLine>
                    <h3 style={{ fontSize: '28px', margin: 0, marginBottom: '28px' }}>Ð­ÐºÑÐ¿ÐµÑÑÐ¸Ð·Ð° - Ð·Ð°Ð²ÐµÑÑÐµÐ½Ð¸Ðµ Ð¿ÑÐ¾ÐµÐºÑÐ°</h3>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine>
                      <span 
                        style={{ 
                          color: 'gray',
                          lineHeight: '24px',
                          width: '77%',
                          marginBottom: '22px',
                          marginTop: '3px'
                        }}
                      >
                        Ð ÑÑÐ¾Ð¼ Ð¾ÐºÐ½Ðµ Ð²Ñ Ð¼Ð¾Ð¶ÐµÑÐµ Ð¾ÑÐ¿ÑÐ°Ð²Ð¸ÑÑ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð½ÑÐ¹ Ð¿ÑÐ¾ÐµÐºÑ Ð½Ð° Ð¿ÑÐ¾Ð²ÐµÑÐºÑ Ð·Ð°ÐºÐ°Ð·ÑÐ¸ÐºÑ. ÐÑÐ¾ÐµÐºÑÑ Ð¿ÑÐ¸Ð½Ð¸Ð¼Ð°ÑÑÑÑ Ð² ÑÐ¾ÑÐ¼Ð°ÑÐµ PDF, Ð¿Ð¾Ð·Ð¶Ðµ Ð±ÑÐ´ÐµÑ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð° Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ÑÑÑ Ð¿ÑÐ¸ÐºÐ»Ð°Ð´ÑÐ²Ð°ÑÑ ÑÐ¿ÐµÑÐ¸Ð°Ð»Ð¸Ð·Ð¾Ð²Ð°Ð½Ð½ÑÐµ Ð¿ÑÐ¾ÐµÐºÑÐ½ÑÐµ ÑÐ°Ð¹Ð»Ñ Ð¸ ÑÐ´
                      </span>
                    </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-between' }}>
                    <div 
                      style={{
                        display: 'flex',
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'flex-start',
                        fontSize: '15px'
                      }}
                    >
                      <span style={{ fontWeight: 'bold', display: 'block', marginRight: '80px' }}>ÐÐ¾ÑÑÐ´Ð°ÑÑÑÐ²ÐµÐ½Ð½Ð°Ñ</span>
                      <span style={{ fontWeight: 'bold', display: 'block', marginRight: '80px' }}>
                        ÐÐµÑÐ¸Ð¾Ð´ ÑÐ´Ð°ÑÐ¸ : { ordersList.filter(item => item.id === selectTask)[0].experDate }
                      </span>
                    </div>
                    { ( completeFileServer.text.indexOf('no such file or directory') >= 0 && USER_ROLE === 'EXECUTOR' ) && <ButtonComponent
                      inner={'ÐÐ°Ð²ÐµÑÑÐ¸ÑÑ Ð¿ÑÐ¾ÐµÐºÑ'} 
                      type='UPLOAD' 
                      action={() => {}}
                      actionData={[ changeCompleteFile ]}
                      widthType={'px'}
                      widthValue={200}
                      children={''}
                      childrenCss={undefined}
                      iconSrc={null}
                      iconCss={undefined}
                      muiIconSize={null}
                      MuiIconChildren={EmailIcon}
                      css={{
                        backgroundColor: 'rgb(22, 124, 191)',
                        fontSize: '12px',
                        height: '46px',
                        borderRadius: '6px',
                        position: 'relative',
                        boxSizing: 'border-box',
                      }}
                    /> }
                    { completeFileServer.text.indexOf('no such file or directory') < 0 && <ButtonComponent
                      inner={'ÐÑÐ¾ÐµÐºÑ Ð½Ð° Ð¿ÑÐ¾Ð²ÐµÑÐºÐµ'} 
                      type='CONTAINED_DISABLED' 
                      action={() => {}}
                      actionData={() => {}}
                      widthType={'px'}
                      widthValue={200}
                      children={''}
                      childrenCss={undefined}
                      iconSrc={null}
                      iconCss={undefined}
                      muiIconSize={null}
                      MuiIconChildren={EmailIcon}
                      css={{
                        backgroundColor: 'rgb(217, 231, 240)',
                        fontSize: '12px',
                        height: '46px',
                        borderRadius: '6px',
                        position: 'relative',
                        boxSizing: 'border-box',
                      }}
                    /> }
                  </MasterDocFork.ContentLine>
                  { ( COMPLETE_FILE && COMPLETE_FILE?.length > 0 && COMPLETE_FILE[0].type === 'application/pdf' ) && <React.Fragment>
                    <MasterDocFork.ContentLine style={{ justifyContent: 'space-around' }}>
                      <h3 style={{ marginTop: '46px', marginBottom: '33px' }}>ÐÑÐ¿ÑÐ°Ð²Ð¸ÑÑ ÑÐ°Ð±Ð¾ÑÑ Ð½Ð° Ð¿ÑÐ¾Ð²ÐµÑÐºÑ Ð·Ð°ÐºÐ°Ð·ÑÐ¸ÐºÑ?</h3>
                    </MasterDocFork.ContentLine>
                    <MasterDocFork.ContentLine style={{ justifyContent: 'space-around' }}>
                      <div style={{ display: 'flex', flexDirection: 'row' }}>
                        <ButtonComponent
                          inner={"ÐÐ¾Ð´ÑÐ²ÐµÑÐ´Ð¸ÑÑ"} 
                          type='CONTAINED_DEFAULT' 
                          action={changeComplete}
                          actionData={null}
                          widthType={'px'}
                          widthValue={160}
                          children={""}
                          childrenCss={undefined}
                          iconSrc={null}
                          iconCss={undefined}
                          muiIconSize={30}
                          MuiIconChildren={ArrowUpwardIcon}
                          css={{
                            position: 'relative',
                            boxSizing: 'border-box',
                            padding: '4px',
                            backgroundColor: '#4caf50',
                            color: 'white',
                            width: '56px',
                            height: '43px',
                          }}
                        />
                        <span style={{ width: '22px' }}/>
                        <ButtonComponent
                          inner={"ÐÑÐ¼ÐµÐ½Ð¸ÑÑ"} 
                          type='CONTAINED_DEFAULT' 
                          action={() => {
                            dispatch(resetCompleteFile(''))
                            dispatch(setShow(false))
                          }}
                          actionData={null}
                          widthType={'px'}
                          widthValue={160}
                          children={""}
                          childrenCss={undefined}
                          iconSrc={null}
                          iconCss={undefined}
                          muiIconSize={30}
                          MuiIconChildren={ArrowUpwardIcon}
                          css={{
                            position: 'relative',
                            boxSizing: 'border-box',
                            padding: '4px',
                            backgroundColor: chatBorderColor,
                            color: greyColor,
                            width: '56px',
                            height: '43px',
                          }}
                        />
                      </div>
                    </MasterDocFork.ContentLine>
                  </React.Fragment> }
                  { ( COMPLETE_FILE && COMPLETE_FILE?.length > 0 && COMPLETE_FILE[0].type !== 'application/pdf' ) && <React.Fragment>
                    <MasterDocFork.ContentLine style={{ justifyContent: 'space-around' }}>
                      <h3 style={{ marginTop: '46px', marginBottom: '33px' }}>ÐÑÐ¸Ð»Ð¾Ð¶ÐµÐ½ Ð½ÐµÐ²ÐµÑÐ½ÑÐ¹ ÑÐ¾ÑÐ¼Ð°Ñ Ð¿ÑÐ¾ÐµÐºÑÐ½Ð¾Ð³Ð¾ Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÐ°</h3>
                    </MasterDocFork.ContentLine>
                    <MasterDocFork.ContentLine style={{ justifyContent: 'space-around' }}>
                      <div style={{ display: 'flex', flexDirection: 'row' }}>
                        <ButtonComponent
                          inner={"ÐÐ¾Ð´ÑÐ²ÐµÑÐ´Ð¸ÑÑ"} 
                          type='CONTAINED_DISABLED' 
                          action={changeComplete}
                          actionData={null}
                          widthType={'px'}
                          widthValue={160}
                          children={""}
                          childrenCss={undefined}
                          iconSrc={null}
                          iconCss={undefined}
                          muiIconSize={30}
                          MuiIconChildren={ArrowUpwardIcon}
                          css={{
                            position: 'relative',
                            boxSizing: 'border-box',
                            padding: '4px',
                            backgroundColor: '#4caf50',
                            color: 'white',
                            width: '56px',
                            height: '43px',
                            boxShadow: '0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)'
                          }}
                        />
                        <span style={{ width: '22px' }}/>
                        <ButtonComponent
                          inner={"ÐÑÐ¼ÐµÐ½Ð¸ÑÑ"} 
                          type='CONTAINED_DEFAULT' 
                          action={() => {
                            dispatch(resetCompleteFile(''))
                            dispatch(setShow(false))
                          }}
                          actionData={null}
                          widthType={'px'}
                          widthValue={160}
                          children={""}
                          childrenCss={undefined}
                          iconSrc={null}
                          iconCss={undefined}
                          muiIconSize={30}
                          MuiIconChildren={ArrowUpwardIcon}
                          css={{
                            position: 'relative',
                            boxSizing: 'border-box',
                            padding: '4px',
                            backgroundColor: chatBorderColor,
                            color: greyColor,
                            width: '56px',
                            height: '43px',
                          }}
                        />
                      </div>
                    </MasterDocFork.ContentLine>
                  </React.Fragment> }
                  <MasterDocFork.Delimiter background={chatBorderColor} style={{ marginTop: '50px', marginBottom: '50px' }}/>
                  <MasterDocFork.ContentLine>
                    <InputComponent
                      type={'TEXT_INPUT_OUTLINE'}
                      valueType='text'
                      required={false}
                      widthType={'%'}
                      widthValue={100}
                      heightValue={'50px'}
                      label={"ÐÐ¾Ð¼Ð¼ÐµÐ½ÑÐ°ÑÐ¸Ð¹ Ð¿Ð¾ ÑÐºÑÐ¿ÐµÑÑÐ¸Ð·Ðµ"}
                      isError={false}
                      isDisabled={true}
                      labelShrinkLeft={"0px"}
                      innerLabel={null}
                      css={{
                        fontSize: '12px',
                        position: 'relative',
                        boxSizing: 'border-box',
                        marginTop: '0px',
                        backgroundColor: inputBackground,
                      }}
                    />
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginTop: '44px', alignItems: 'center', justifyContent: 'space-between' }}>
                    <div 
                      style={{
                        display: 'flex',
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'flex-start'
                      }}
                    >
                      <span style={{ fontWeight: 'bold', display: 'block', marginRight: '15px', fontSize: '15px' }}>ÐÐ°ÑÑÐµÑ Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÑ</span>
                      <img
                        alt={""}
                        src={infoGrey}
                      />
                      <span style={{ fontWeight: 'bold', display: 'block', marginLeft: '30px', opacity: 0.5 }}>ÐÐ»Ð¾Ð¶ÐµÐ½Ð¸Ñ</span>
                    </div>
                    <ButtonComponent
                      inner={"Ð¡ÐºÐ°ÑÐ°ÑÑ Ð°ÑÑÐ¸Ð²Ð¾Ð¼"} 
                      type='CONTAINED_DEFAULT' 
                      action={() => console.log('this is button')}
                      actionData={null}
                      widthType={'px'}
                      widthValue={160}
                      children={""}
                      childrenCss={undefined}
                      iconSrc={null}
                      iconCss={undefined}
                      muiIconSize={30}
                      MuiIconChildren={ArrowUpwardIcon}
                      css={{
                        position: 'relative',
                        boxSizing: 'border-box',
                        padding: '4px',
                        backgroundColor: chatBorderColor,
                        color: greyColor,
                        width: '56px',
                        height: '43px',
                      }}
                    />
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine>
                    <div style={whiteContainerCSS}>
                      { contractFileServer.text.indexOf('no such file or directory') < 0 && <MasterDocFork.ContentLine style={{ marginTop: '10px' }}>
                        <div style={{ display: 'none', flexDirection: 'row' }}>
                          <div style={{ display: 'block', position: 'relative', width: '100px' }}>
                            <img
                              alt={""}
                              src={txt}
                              style={{ width: '90px', cursor: 'pointer' }}
                            />
                            { false && <img
                              alt={""}
                              src={semiMenu}
                              style={semiIconsCSS}
                            /> }
                          </div>
                          <div style={{ display: 'flex', flexDirection: 'column', position: 'relative', marginLeft: '16px' }}>
                            <span style={{ color: greyColor, marginBottom: '5px' }}>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð¾ÑÐ½Ð¾Ð²Ð½Ð¾Ð¹</span>
                            <span style={{ color: greyColor, marginBottom: '5px', fontSize: '12px' }}>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½</span>
                            <span style={{ color: greyColor, marginBottom: '15px', fontSize: '12px' }}>ÐÑÐµÐ¼Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ Ð½Ðµ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¾</span>
                            <div style={blankButtonCSS}>
                              <span>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð¿Ð¾Ð´Ð¿Ð¸ÑÐ°Ð½</span>
                              <img
                                alt={""}
                                src={docCorrect}
                                style={{ marginLeft: '6px', marginTop: '2px', width: '16px' }}
                              />
                            </div>
                          </div>
                        </div>
                        <div style={{ display: 'flex', flexDirection: 'row', marginLeft: false ? '80px' : '0px' }}>
                          <div style={{ display: 'block', position: 'relative', width: '100px' }}>
                            <img
                              alt={""}
                              src={txt}
                              style={{ width: '90px', filter: 'grayscale(80%)', cursor: 'pointer' }}
                              onClick={() => {
                                dispatch(setShowFOS(true))
                                dispatch(setShowTypeFOS('showFileContract'))
                                dispatch(setShow('undefined'))
                              }}
                            />
                            { false && <img
                              alt={""}
                              src={semiMenu}
                              style={semiIconsCSS}
                            /> }
                          </div>
                          <div style={{ display: 'flex', flexDirection: 'column', position: 'relative', marginLeft: '16px' }}>
                            <span style={{ color: greyColor, marginBottom: '5px' }}>{ contractFileServer.name }</span>
                            <span style={{ color: greyColor, marginBottom: '5px', fontSize: '12px' }}>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½</span>
                            <span style={{ color: greyColor, marginBottom: '15px', fontSize: '12px' }}>ÐÑÐµÐ¼Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ Ð½Ðµ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¾</span>
                            <div style={{ ...blankButtonCSS, backgroundColor: greyColor3 }}>
                              <span>ÐÐ´ÐµÑ Ð¿Ð¾Ð´Ð¿Ð¸ÑÐ°Ð½Ð¸Ñ</span>
                              <img
                                alt={""}
                                src={docWait}
                                style={{ marginLeft: '6px', marginTop: '2px', width: '16px' }}
                              />
                            </div>
                          </div>
                        </div>
                      </MasterDocFork.ContentLine> }
                      { contractFileServer.text.indexOf('no such file or directory') >= 0 
                      
                        && <span style={{ color: 'grey', fontSize: '14px', marginTop: '-3px' }}>ÐÐ¾Ð³Ð¾Ð²Ð¾Ñ Ð½Ðµ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½ Ð² Ð¿ÑÐ¾ÐµÐºÑ</span> 
                      
                      }
                      { Array(4).fill(0).map((item, index) => {

                        return (
                          <div 
                            style={{
                              display: 'none',
                              flexDirection: 'column',
                              alignItems: 'flex-start',
                              justifyContent: 'flex-start',
                              position: 'relative',
                              marginRight: '16px',
                              cursor: 'pointer',
                            }}
                          >
                            <img
                              alt={""}
                              src={doc}
                            />
                            <span style={{ fontSize: '12px', color: greyColor, marginTop: '6px' }}>{"ÐÐ»Ð°Ð½_Ð¡ÐºÐ»Ð°Ð´Ð°"}</span>
                            <span style={{ fontSize: '12px', color: greyColor2, marginTop: '4px' }}>{"140 Kb"}</span>
                          </div>
                        )

                      })}
                    </div>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginTop: '43px', alignItems: 'center' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', marginRight: '80px', fontSize: '15px' }}>ÐÑÐ²ÐµÑÑÑÐ²ÐµÐ½Ð½ÑÐ¹</span>
                    <div
                      style={{
                        display: 'flex',
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'flex-start',
                        position: 'relative'
                      }}
                    >
                      <img
                        alt={""}
                        src={defaulrAvatar}
                        style={{
                          display: 'block',
                          position: 'relative',
                          width: '56px',
                          marginRight: '20px'
                        }}
                      />
                      <div 
                        style={{
                          display: 'flex',
                          flexDirection: 'column',
                          alignItems: 'flex-start',
                          justifyContent: 'flex-start',
                          position: 'relative',
                          marginTop: '-6px'
                        }}
                      >
                        <span style={{ fontSize: '13px', width: '140px', marginBottom: '6px', lineHeight: '22px', fontWeight: 'bold' }}>
                          { ordersList.filter(item => item.id === selectTask)[0].executor }  
                        </span>
                        <span style={{ fontSize: '14px' }}>{"ÐÐ¸Ð´ Ð·Ð°Ð½ÑÑÐ¾ÑÑÐ¸ Ð½Ðµ Ð¿Ð¾Ð»ÑÑÐµÐ½"}</span>
                      </div>
                    </div>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.Delimiter background={chatBorderColor} style={{ marginTop: '40px', marginBottom: '46px' }}/>
                  { Array(3).fill(0).map((item, index): ReactElement => {

                    return (
                      <MasterDocFork.ContentLine style={{ marginBottom: '8px' }}>
                        <CommunicationTable
                            status={"wait"}
                            oneButtonParams={{
                              isset: true,
                              color: 'white',
                              background: 'blue2',
                              inner: 'Ð Ð¼Ð°ÑÑÐµÑ-Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÑ',
                              width: 220,
                            }}
                            twoButtonParams={{
                              isset: true,
                              color: 'grey',
                              background: 'white',
                              inner: 'ÐÑÐºÐ°Ð·Ð°ÑÑ',
                              width: 120,
                            }}
                            image={"pdf"}
                            mb={"12px"}
                          />
                      </MasterDocFork.ContentLine>
                    )

                  })}
                  <MasterDocFork.ContentLine style={{ marginTop: '10px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', marginRight: '80px' }}>ÐÐ±ÑÐµÐ½Ð¸Ðµ</span>
                    <InputComponent
                      type={'TEXT_INPUT_OUTLINE_SEARCH'}
                      valueType='text'
                      required={false}
                      widthType={'px'}
                      widthValue={300}
                      heightValue={'56px'}
                      label={"ÐÐ¾Ð¸ÑÐº Ð¿Ð¾ ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸ÑÐ¼"}
                      isError={false}
                      isDisabled={false}
                      labelShrinkLeft={"0px"}
                      innerLabel={null}
                      css={{
                        fontSize: '12px',
                        position: 'relative',
                        boxSizing: 'border-box',
                        marginBottom: '8px',
                        backgroundColor: 'white'
                      }}
                    />
                  </MasterDocFork.ContentLine>
                  <ChatFork.ChatBody
                    border={`1px solid ${chatBorderColor}`}
                    backgroundColor={chatBackground}
                    style={{ marginTop: '18px', height: 'auto' }}
                  >
                    <ChatFork.ChatBodyInner
                      border={`1px solid transparent`}
                      backgroundColor={chatBackground}
                    >
                      <ChatMessagesContainer
                        data={[
                          { 
                            date: '05.01.2022', 
                            messages: [
                              { 
                                type: 'me', 
                                content: [
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:05',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:05',
                                    likes: 0  }
                                ]
                              },
                              { 
                                type: 'you', 
                                content: [
                                  { text: 'Ipsum nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et', 
                                    time: '20:06',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0,
                                    files: {
                                      id: 'undefined',
                                      ext: 'doc',
                                      name: 'ÐÐ»Ð°Ð½_Ð¡ÐºÐ»Ð°Ð´Ð°.doc'
                                    }},
                                ]
                              },
                              { 
                                type: 'me', 
                                content: [
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:08',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'you', 
                                content: [
                                  { text: 'Ipsum nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'me', 
                                content: [
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:08',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'you', 
                                content: [
                                  { text: 'Ipsum nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'action', 
                                content: [
                                  { text: 'Ipsum nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'me', 
                                content: [
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:08',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'me', 
                                content: [
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:08',
                                    likes: 0 },
                                ]
                              },
                            ]
                          }
                        ]}
                      />
                    </ChatFork.ChatBodyInner>
                    <div style={bottomDivCSS}>
                      <div style={bottomDivInnerCSS}>
                        <div style={clipDivCSS}>
                          <img
                            alt={""}
                            src={clipIcon}
                          />
                        </div>
                        <InputComponent
                          type={'TEXT_INPUT_OUTLINE'}
                          valueType='text'
                          required={false}
                          widthType={'%'}
                          widthValue={100}
                          heightValue={'50px'}
                          label={"Lorem ipsum dolor sit amet consectetur adipisicing elit"}
                          isError={false}
                          isDisabled={true}
                          labelShrinkLeft={"0px"}
                          innerLabel={null}
                          css={{
                            fontSize: '12px',
                            position: 'relative',
                            boxSizing: 'border-box',
                            marginTop: '0px',
                            backgroundColor: inputBackground,
                            marginRight: '12px'
                          }}
                        />
                        <ButtonComponent
                          inner={""} 
                          type='ICON_BUTTON_CHAT_SUBMIT' 
                          action={() => console.log('this is button')}
                          actionData={null}
                          widthType={'px'}
                          widthValue={56}
                          children={""}
                          childrenCss={undefined}
                          iconSrc={null}
                          iconCss={undefined}
                          muiIconSize={30}
                          MuiIconChildren={ArrowUpwardIcon}
                          css={{
                            position: 'relative',
                            boxSizing: 'border-box',
                            padding: '4px',
                            backgroundColor: chatSubmitColor,
                            width: '56px',
                            height: '56px',
                          }}
                        />
                      </div>
                    </div>
                  </ChatFork.ChatBody>
                </MasterDocFork.ChatContainer>
            </React.Fragment> 
            : contentType === 'AgreementCC'

            /* ---------------------------------------- */
            /* Ð±Ð°Ð·Ð¾Ð²Ð¾Ðµ Ð¾ÐºÐ½Ð¾ Ð´Ð»Ñ Ð´Ð¾Ð¿ ÑÐ¾Ð³Ð»Ð°ÑÐµÐ½Ð¸Ñ
            /* ---------------------------------------- */

            ? <React.Fragment>
                <MasterDocFork.ChatContainer style={{ paddingTop: '40px', height: 'auto', minHeight: '100vh' }} backgroundColor={backgroundColor}>
                  <MasterDocFork.CloseIconContainer>
                    <MasterDocFork.CloseIcon onClick={showrightContent}>
                      <img
                        alt={""} 
                        src={closeIcon}  
                      />
                    </MasterDocFork.CloseIcon>
                  </MasterDocFork.CloseIconContainer>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-between' }}>
                    <h3 style={{ fontSize: '28px', margin: 0, marginBottom: 0 }}>ÐÐ¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½Ð¾Ðµ ÑÐ¾Ð³Ð»Ð°ÑÐµÐ½Ð¸Ðµ</h3>
                    <ButtonComponent
                      inner={"Ð ÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°ÑÑ"} 
                      type='CONTAINED_DEFAULT' 
                      action={() => console.log('this is button')}
                      actionData={null}
                      widthType={'px'}
                      widthValue={160}
                      children={""}
                      childrenCss={undefined}
                      iconSrc={null}
                      iconCss={undefined}
                      muiIconSize={30}
                      MuiIconChildren={ArrowUpwardIcon}
                      css={{
                        position: 'absolute',
                        boxSizing: 'border-box',
                        padding: '4px',
                        backgroundColor: chatBorderColor,
                        color: greyColor,
                        width: '56px',
                        height: '43px',
                      }}
                    />
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginTop: '44px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', fontSize: '18px' }}>ÐÐ·Ð¼ÐµÐ½Ð¸ÑÑ ÑÑÐ¾Ð¸Ð¼Ð¾ÑÑÑ Ð¸ ÑÑÐ¾ÐºÐ¸</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginTop: '34px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', width: '200px', lineHeight: '22px' }}>Ð¢ÐµÐºÑÑÐ°Ñ ÑÑÐ¾Ð¸Ð¼Ð¾ÑÑÑ Ð·Ð°ÐºÐ°Ð·Ð°</span>
                    <span style={{ fontWeight: '700', display: 'block', fontSize: '18px' }}>
                      { ordersList.length > 0 ? ordersList.filter(item => item.id === selectTask)[0].coast.value : 'ÐÐµÑ Ð´Ð°Ð½Ð½ÑÑ' }  
                    </span>
                    <div 
                      style={{
                        display: 'flex',
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'flex-start',
                        position: 'relative',
                        width: '55%'
                      }}
                    >
                      <InputComponent
                        type={'TEXT_INPUT_OUTLINE_CHANGE_AGREE'}
                        valueType='text'
                        required={false}
                        widthType={'%'}
                        widthValue={50}
                        heightValue={'56px'}
                        label={"ÐÐ·Ð¼ÐµÐ½Ð¸ÑÑ Ð½Ð°"}
                        isError={false}
                        isDisabled={false}
                        labelShrinkLeft={"0px"}
                        innerLabel={null}
                        store={[ "NEW_COAST", () => null ]}
                        css={{
                          fontSize: '12px',
                          position: 'relative',
                          boxSizing: 'border-box',
                          backgroundColor: 'white',
                          marginLeft: '20px'
                        }}
                      />
                      <InputComponent
                        type={'TEXT_INPUT_OUTLINE_DATE'}
                        valueType='text'
                        required={false}
                        widthType={'%'}
                        widthValue={50}
                        heightValue={'56px'}
                        label={"ÐÐ°ÑÐ° Ð¾ÐºÐ¾Ð½ÑÐ°Ð½Ð¸Ñ"}
                        isError={false}
                        isDisabled={true}
                        labelShrinkLeft={"0px"}
                        innerLabel={null}
                        css={{
                          fontSize: '12px',
                          position: 'relative',
                          boxSizing: 'border-box',
                          backgroundColor: inputBackground,
                          marginLeft: '20px'
                        }}
                      />
                    </div>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginTop: '34px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', width: '200px', lineHeight: '22px' }}>Ð¢ÐµÐºÑÑÐ°Ñ ÑÑÐ¾Ð¸Ð¼Ð¾ÑÑÑ Ð°Ð²Ð°Ð½ÑÐ°</span>
                    <span style={{ fontWeight: '700', display: 'block', fontSize: '18px' }}>
                      { ordersList.length > 0 ? ordersList.filter(item => item.id === selectTask)[0].coast.prepay : 'ÐÐµÑ Ð´Ð°Ð½Ð½ÑÑ' } 
                    </span>
                    <div 
                      style={{
                        display: 'flex',
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'flex-start',
                        position: 'relative',
                        width: '55%'
                      }}
                    >
                      <InputComponent
                        type={'TEXT_INPUT_OUTLINE_CHANGE_AGREE'}
                        valueType='text'
                        required={false}
                        widthType={'%'}
                        widthValue={50}
                        heightValue={'56px'}
                        label={"ÐÐ·Ð¼ÐµÐ½Ð¸ÑÑ Ð½Ð°"}
                        isError={false}
                        isDisabled={false}
                        labelShrinkLeft={"0px"}
                        innerLabel={null}
                        store={[ "NEW_PREPAY", () => null ]}
                        css={{
                          fontSize: '12px',
                          position: 'relative',
                          boxSizing: 'border-box',
                          backgroundColor: 'white',
                          marginLeft: '20px'
                        }}
                      />
                      <InputComponent
                        type={'TEXT_INPUT_OUTLINE'}
                        valueType='text'
                        required={false}
                        widthType={'%'}
                        widthValue={50}
                        heightValue={'56px'}
                        label={"Ð¡ÑÐ¾Ðº Ð¿ÑÐ¸Ð½ÑÑÐ¸Ñ ÑÐµÑÐµÐ½Ð¸Ñ"}
                        isError={false}
                        isDisabled={true}
                        labelShrinkLeft={"0px"}
                        innerLabel={null}
                        css={{
                          fontSize: '12px',
                          position: 'relative',
                          boxSizing: 'border-box',
                          backgroundColor: inputBackground,
                          marginLeft: '20px'
                        }}
                      />
                    </div>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginTop: '34px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', width: '200px', lineHeight: '22px' }}>Ð¢ÐµÐºÑÑÐ°Ñ ÑÑÐ¾Ð¸Ð¼Ð¾ÑÑÑ ÑÐºÑÐ¿ÐµÑÑÐ¸Ð·Ñ</span>
                    <span style={{ fontWeight: '700', display: 'block', fontSize: '18px' }}>
                      { ordersList.length > 0 ? ordersList.filter(item => item.id === selectTask)[0].coast.exper : 'ÐÐµÑ Ð´Ð°Ð½Ð½ÑÑ' } 
                    </span>
                    <div 
                      style={{
                        display: 'flex',
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'flex-start',
                        position: 'relative',
                        width: '55%'
                      }}
                    >
                      <InputComponent
                        type={'TEXT_INPUT_OUTLINE_CHANGE_AGREE'}
                        valueType='text'
                        required={false}
                        widthType={'%'}
                        widthValue={50}
                        heightValue={'56px'}
                        label={"ÐÐ·Ð¼ÐµÐ½Ð¸ÑÑ Ð½Ð°"}
                        isError={false}
                        isDisabled={false}
                        labelShrinkLeft={"0px"}
                        innerLabel={null}
                        store={[ "NEW_EXPERT", () => null ]}
                        css={{
                          fontSize: '12px',
                          position: 'relative',
                          boxSizing: 'border-box',
                          backgroundColor: 'white',
                          marginLeft: '20px'
                        }}
                      />
                      <InputComponent
                        type={'TEXT_INPUT_OUTLINE_DATE'}
                        valueType='text'
                        required={false}
                        widthType={'%'}
                        widthValue={50}
                        heightValue={'56px'}
                        label={"ÐÐ°ÑÐ° ÑÐºÑÐ¿ÐµÑÑÐ¸Ð·Ñ"}
                        isError={false}
                        isDisabled={true}
                        labelShrinkLeft={"0px"}
                        innerLabel={null}
                        css={{
                          fontSize: '12px',
                          position: 'relative',
                          boxSizing: 'border-box',
                          backgroundColor: inputBackground,
                          marginLeft: '20px'
                        }}
                      />
                    </div>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.Delimiter background={chatBorderColor} style={{ marginTop: '40px', marginBottom: '0px' }}/>
                  <MasterDocFork.ContentLine style={{ marginTop: '43px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', fontSize: '18px' }}>ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ Ð¸Ð»Ð¸ ÑÐ´Ð°Ð»Ð¸ÑÑ ÑÐ°Ð·Ð´ÐµÐ»</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginTop: '110px' }}>
                    <ChapterController 
                      isBottomButton={false}
                      marginBott={"0px"}
                    />
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginTop: '90px', marginBottom: '11px' }}>
                    <span
                      style={{
                        display: 'flex',
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'space-around',
                        position: 'relative',
                        width: '20px',
                        height: '20px',
                        borderRadius: '50%',
                        padding: '3px',
                        backgroundColor: chatBorderColor,
                        cursor: 'pointer',
                        marginRight: '10px',
                      }}
                    >
                      <img
                        alt={""}
                        src={plus}
                      />
                    </span>
                    <span style={{ display: 'block', marginRight: '80px' }}>ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ ÑÐ°Ð·Ð´ÐµÐ»</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.Delimiter background={chatBorderColor} style={{ marginTop: '40px', marginBottom: '0px' }}/>
                  <MasterDocFork.ContentLine style={{ marginTop: '44px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', fontSize: '18px' }}>ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ Ð·Ð°Ð´Ð°ÑÐ¸</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginTop: '20px' }}>
                    <InputComponent
                      type={'TEXT_INPUT_OUTLINE_CHANGE_AGREE'}
                      valueType='text'
                      required={false}
                      widthType={'%'}
                      widthValue={100}
                      heightValue={'50px'}
                      label={"ÐÑ Ð¼Ð¾Ð¶ÐµÑÐµ Ð¸Ð·Ð¼ÐµÐ½Ð¸ÑÑ Ð¾Ð¿Ð¸ÑÐ°Ð½Ð¸Ðµ Ð·Ð°Ð´Ð°ÑÐ¸"}
                      isError={false}
                      isDisabled={false}
                      labelShrinkLeft={"0px"}
                      innerLabel={null}
                      store={[ "NEW_TEXT", () => null ]}
                      css={{
                        fontSize: '12px',
                        position: 'relative',
                        boxSizing: 'border-box',
                        marginTop: '0px',
                        backgroundColor: inputBackground,
                      }}
                    />
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-around', marginTop: '60px', marginBottom: '60px' }}>
                    <ButtonComponent
                      inner={"ÐÑÐµÐ´Ð»Ð¾Ð¶Ð¸ÑÑ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸Ñ"} 
                      type='CONTAINED_DEFAULT' 
                      action={showNewAgreement}
                      actionData={null}
                      widthType={'px'}
                      widthValue={228}
                      children={""}
                      childrenCss={undefined}
                      iconSrc={null}
                      iconCss={undefined}
                      muiIconSize={30}
                      MuiIconChildren={ArrowUpwardIcon}
                      css={{
                        position: 'relative',
                        boxSizing: 'border-box',
                        padding: '4px',
                        backgroundColor: chatSubmitColor,
                        width: '56px',
                        height: '43px',
                      }}
                    />
                  </MasterDocFork.ContentLine>
                </MasterDocFork.ChatContainer>
            </React.Fragment>
            : contentType === 'AgreementNewCC'

            /* ---------------------------------------- */
            /* Ð±Ð°Ð·Ð¾Ð²Ð¾Ðµ Ð¾ÐºÐ½Ð¾ Ð´Ð»Ñ Ð´Ð¾Ð¿ ÑÐ¾Ð³Ð»Ð°ÑÐµÐ½Ð¸Ñ - new
            /* ---------------------------------------- */

            ? <React.Fragment>
                <MasterDocFork.ChatContainer style={{ paddingTop: '40px', height: 'auto', minHeight: '100vh' }} backgroundColor={backgroundColor}>
                  <MasterDocFork.CloseIconContainer>
                    <MasterDocFork.CloseIcon onClick={showrightContent}>
                      <img
                        alt={""} 
                        src={closeIcon}  
                      />
                    </MasterDocFork.CloseIcon>
                  </MasterDocFork.CloseIconContainer>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-between' }}>
                    <h3 style={{ fontSize: '28px', margin: 0, marginBottom: 0 }}>ÐÐ¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½Ð¾Ðµ ÑÐ¾Ð³Ð»Ð°ÑÐµÐ½Ð¸Ðµ</h3>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginTop: '30px' }}>
                    <span style={{ display: 'block', marginRight: '80px', fontSize: '15px' }}>ÐÑÐµÐ´Ð»Ð°Ð³Ð°ÐµÑÑÑ Ð²Ð½ÐµÑÑÐ¸ ÑÐ»ÐµÐ´ÑÑÑÐ¸Ðµ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸Ñ</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginTop: '44px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', fontSize: '18px' }}>ÐÐ·Ð¼ÐµÐ½Ð¸ÑÑ ÑÑÐ¾Ð¸Ð¼Ð¾ÑÑÑ Ð¸ ÑÑÐ¾ÐºÐ¸</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginTop: '34px', boxSizing: 'border-box', paddingRight: '40px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', width: '30%', lineHeight: '22px' }}>Ð¢ÐµÐºÑÑÐ°Ñ ÑÑÐ¾Ð¸Ð¼Ð¾ÑÑÑ Ð·Ð°ÐºÐ°Ð·Ð°</span>
                    <div style={{ width: '15%' }}>
                      <span style={{ fontWeight: '700', display: 'block', fontSize: '18px', textAlign: 'left' }}>
                        { ordersList.length > 0 ? ordersList.filter(item => item.id === selectTask)[0].coast.value : 'ÐÐµÑ Ð´Ð°Ð½Ð½ÑÑ' } 
                      </span>
                      <span style={{ fontSize: '12px', marginTop: '5px', display: 'block' }}>{"Ð´Ð¾ 10.03.2023"}</span>
                    </div>
                    <span style={{ fontWeight: 'bold', display: 'block', width: '35%', lineHeight: '22px' }}>ÐÐ¾Ð²Ð°Ñ ÑÑÐ¾Ð¸Ð¼Ð¾ÑÑÑ Ð·Ð°ÐºÐ°Ð·Ð°</span>
                    <div style={{ width: '10%' }}>
                      <span style={{ fontWeight: '700', display: 'block', fontSize: '18px', color: chatSubmitColor }}>
                        { NEW_AGREE_COAST ? NEW_AGREE_COAST : 0 }
                      </span>
                      <span style={{ fontSize: '12px', marginTop: '5px', display: 'block' }}>{"Ð´Ð¾ 10.03.2023"}</span>
                    </div>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginTop: '34px', boxSizing: 'border-box', paddingRight: '40px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', width: '30%', lineHeight: '22px' }}>Ð¢ÐµÐºÑÑÐ°Ñ ÑÑÐ¾Ð¸Ð¼Ð¾ÑÑÑ Ð°Ð²Ð°Ð½ÑÐ°</span>
                    <div style={{ width: '15%' }}>
                      <span style={{ fontWeight: '700', display: 'block', fontSize: '18px', textAlign: 'left' }}>
                        { ordersList.length > 0 ? ordersList.filter(item => item.id === selectTask)[0].coast.prepay : 'ÐÐµÑ Ð´Ð°Ð½Ð½ÑÑ' }
                      </span>
                      <span style={{ fontSize: '12px', marginTop: '5px', display: 'block' }}>{"Ð´Ð¾ 10.03.2023"}</span>
                    </div>
                    <span style={{ fontWeight: 'bold', display: 'block', width: '35%', lineHeight: '22px' }}>ÐÐ¾Ð²Ð°Ñ ÑÑÐ¾Ð¸Ð¼Ð¾ÑÑÑ Ð°Ð²Ð°Ð½ÑÐ°</span>
                    <div style={{ width: '10%' }}>
                      <span style={{ fontWeight: '700', display: 'block', fontSize: '18px', color: chatSubmitColor }}>
                        { NEW_AGREE_PREPAY ? NEW_AGREE_PREPAY : 0 }
                      </span>
                      <span style={{ fontSize: '12px', marginTop: '5px', display: 'block' }}>{"Ð´Ð¾ 10.03.2023"}</span>
                    </div>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginTop: '34px', boxSizing: 'border-box', paddingRight: '40px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', width: '30%', lineHeight: '22px' }}>Ð¢ÐµÐºÑÑÐ°Ñ ÑÑÐ¾Ð¸Ð¼Ð¾ÑÑÑ ÑÐºÑÐ¿ÐµÑÑÐ¸Ð·Ñ</span>
                    <div style={{ width: '15%' }}>
                      <span style={{ fontWeight: '700', display: 'block', fontSize: '18px', textAlign: 'left' }}>
                        { ordersList.length > 0 ? ordersList.filter(item => item.id === selectTask)[0].coast.exper : 'ÐÐµÑ Ð´Ð°Ð½Ð½ÑÑ' }
                      </span>
                      <span style={{ fontSize: '12px', marginTop: '5px', display: 'block' }}>{"Ð´Ð¾ 10.03.2023"}</span>
                    </div>
                    <span style={{ fontWeight: 'bold', display: 'block', width: '35%', lineHeight: '22px' }}>ÐÐ¾Ð²Ð°Ñ ÑÑÐ¾Ð¸Ð¼Ð¾ÑÑÑ ÑÐºÑÐ¿ÐµÑÑÐ¸Ð·Ñ</span>
                    <div style={{ width: '10%' }}>
                      <span style={{ fontWeight: '700', display: 'block', fontSize: '18px', color: chatSubmitColor }}>
                        { NEW_AGREE_EXPERT ? NEW_AGREE_EXPERT : 0 }
                      </span>
                      <span style={{ fontSize: '12px', marginTop: '5px', display: 'block' }}>{"Ð´Ð¾ 10.03.2023"}</span>
                    </div>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.Delimiter background={chatBorderColor} style={{ marginTop: '40px', marginBottom: '0px' }}/>
                  { false && <React.Fragment>
                    <MasterDocFork.ContentLine style={{ marginTop: '44px' }}>
                      <span style={{ fontWeight: 'bold', display: 'block', fontSize: '18px' }}>ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ Ð¸Ð»Ð¸ ÑÐ´Ð°Ð»Ð¸ÑÑ ÑÐ°Ð·Ð´ÐµÐ»</span>
                    </MasterDocFork.ContentLine>
                    <MasterDocFork.ContentLine style={{ marginTop: '30px' }}>
                      <span style={{ display: 'block', marginRight: '80px' }}>{"Ð Ð°Ð·Ð´ÐµÐ» ÑÐ´Ð°Ð»ÐµÐ½"}</span>
                    </MasterDocFork.ContentLine>
                    <MasterDocFork.ContentLine style={{ marginTop: '10px' }}>
                      <span style={{ display: 'block', marginRight: '80px', fontWeight: 'bold', color: chatSubmitColor }}>{"ÐÐ¾Ð¶Ð°ÑÐ½Ð°Ñ Ð±ÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð¾ÑÑÑ"}</span>
                    </MasterDocFork.ContentLine>
                    <MasterDocFork.ContentLine style={{ marginTop: '104px' }}>
                      <ChapterController 
                        isBottomButton={false}
                        marginBott={"0px"}
                      />
                    </MasterDocFork.ContentLine>
                    <MasterDocFork.ContentLine style={{ marginTop: '110px' }}>
                      <span style={{ display: 'block', marginRight: '80px' }}>{"Ð Ð°Ð·Ð´ÐµÐ» Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½"}</span>
                    </MasterDocFork.ContentLine>
                    <MasterDocFork.ContentLine style={{ marginTop: '10px' }}>
                      <span style={{ display: 'block', marginRight: '80px', fontWeight: 'bold', color: chatSubmitColor }}>{"ÐÐµÐ½ÑÐ¸Ð»ÑÑÐ¸Ñ"}</span>
                    </MasterDocFork.ContentLine>
                    <MasterDocFork.ContentLine style={{ marginTop: '104px' }}>
                      <ChapterController 
                        isBottomButton={false}
                        marginBott={"0px"}
                      />
                    </MasterDocFork.ContentLine>
                    <MasterDocFork.ContentLine style={{ marginTop: '100px' }}>
                      <span style={{ fontWeight: 'bold', display: 'block', fontSize: '18px' }}>ÐÐ°Ð·Ð²Ð°Ð½Ð¸Ðµ Ð½Ð¾Ð²Ð¾Ð³Ð¾ ÑÐ°Ð·Ð´ÐµÐ»Ð°</span>
                    </MasterDocFork.ContentLine>
                    <MasterDocFork.ContentLine style={{ marginTop: '20px' }}>
                      <span style={{ lineHeight: '22px' }}>{ localText }</span>
                    </MasterDocFork.ContentLine>
                    <MasterDocFork.ContentLine style={{ marginTop: '30px', marginBottom: '24px' }}>
                      <span style={{ fontWeight: 'bold', display: 'block' }}>ÐÐ»Ð¾Ð¶ÐµÐ½Ð¸Ñ</span>
                    </MasterDocFork.ContentLine>
                    { Array(2)
                      .fill({ 
                        status: 'WHITE', 
                        data: { 
                          name: 'ÐÐºÑ_Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð½ÑÑ ÑÐ°Ð±Ð¾Ñ.pdf', 
                          date: '29.02.2023', 
                          statusName: 'ÐÑÐµÐ´Ð»Ð¾Ð¶ÐµÐ½' 
                        }
                      }).map((item, index) => {

                      return (
                        <MasterDocFork.ContentLine key={index}>
                          <DocumentLine
                            status={item.status}
                            data={item.data}
                          />
                        </MasterDocFork.ContentLine>
                      )

                    })}
                    <MasterDocFork.Delimiter background={chatBorderColor} style={{ marginTop: '34px', marginBottom: '35px' }}/>
                  </React.Fragment> }
                  <MasterDocFork.ContentLine style={{ marginTop: !false && '42px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', fontSize: '18px' }}>ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ Ð·Ð°Ð´Ð°ÑÐ¸</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginTop: '30px', marginBottom: '14px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block' }}>ÐÑÐµÐ¶Ð½ÐµÐµ Ð¾Ð¿Ð¸ÑÐ°Ð½Ð¸Ðµ</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine>
                    <span style={{ lineHeight: '24px' }}>
                      { ordersList.length > 0 ? ordersList.filter(item => item.id === selectTask)[0].description : '' }
                    </span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginTop: '30px', marginBottom: '14px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block' }}>ÐÑÐµÐ´Ð»Ð°Ð³Ð°ÐµÐ¼Ð¾Ðµ Ð¾Ð¿Ð¸ÑÐ°Ð½Ð¸Ðµ</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine>
                    <span style={{ lineHeight: '24px', color: chatSubmitColor }}>
                      { NEW_AGREE_TEXT ? NEW_AGREE_TEXT : 'ÐÐ¾Ð²Ð¾Ð³Ð¾ Ð¾Ð¿Ð¸ÑÐ°Ð½Ð¸Ñ Ð½Ðµ Ð¿ÑÐµÐ´Ð»Ð°Ð³Ð°ÐµÑÑÑ' }
                    </span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-around', marginTop: '60px', marginBottom: '60px' }}>
                    <ButtonComponent
                      inner={"ÐÑÐ¸Ð½ÑÑÑ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸Ñ"} 
                      type='CONTAINED_DEFAULT' 
                      action={() => console.log('this is button')}
                      actionData={null}
                      widthType={'px'}
                      widthValue={228}
                      children={""}
                      childrenCss={undefined}
                      iconSrc={null}
                      iconCss={undefined}
                      muiIconSize={30}
                      MuiIconChildren={ArrowUpwardIcon}
                      css={{
                        position: 'relative',
                        boxSizing: 'border-box',
                        padding: '4px',
                        backgroundColor: chatSubmitColor,
                        width: '56px',
                        height: '43px',
                      }}
                    />
                  </MasterDocFork.ContentLine>
                </MasterDocFork.ChatContainer>
            </React.Fragment>
            : contentType === 'LawyerCC' 
            
            /* ---------------------------------------- */
            /* Ð±Ð°Ð·Ð¾Ð²Ð¾Ðµ Ð¾ÐºÐ½Ð¾ Ð´Ð»Ñ Ð¿Ð¾Ð¼Ð¾ÑÐ¸ ÑÑÐ¸ÑÑÐ°
            /* ---------------------------------------- */

            ? <React.Fragment>
                <MasterDocFork.ChatContainer style={{ paddingTop: '40px', height: 'auto', minHeight: '100vh' }} backgroundColor={backgroundColor}>
                  <MasterDocFork.CloseIconContainer>
                    <MasterDocFork.CloseIcon onClick={showrightContent}>
                      <img
                        alt={""} 
                        src={closeIcon}  
                      />
                    </MasterDocFork.CloseIcon>
                  </MasterDocFork.CloseIconContainer>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginBottom: '22px' }}>
                    <h3 style={{ fontSize: '28px', margin: 0, marginBottom: 0 }}>ÐÐ¾Ð½ÑÑÐ»ÑÑÐ°ÑÐ¸Ñ ÑÑÐ¸ÑÑÐ°</h3>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginBottom: '32px' }}>
                    <span style={{ lineHeight: '24px' }}>{"Ð§ÑÐ¾Ð±Ñ Ð¾ÑÐºÑÑÑÑ ÑÐ¿Ð¾Ñ Ð¸Ð»Ð¸ Ð¿Ð¾Ð»ÑÑÐ¸ÑÑ ÐºÐ¾Ð½ÑÑÐ»ÑÑÐ°ÑÐ¸Ñ ÑÑÐ¸ÑÑÐ°, Ð·Ð°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÐ¾ÑÐ¼Ñ Ð½Ð¸Ð¶Ðµ"}</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine>
                    <SelectField 
                      placeholder={"ÐÐ¾Ð»ÑÑÐ¸ÑÑ ÐºÐ¾Ð½ÑÑÐ»ÑÑÐ°ÑÐ¸Ñ"}
                      params={{ width: 420, mb: '0px', height: 50 }}
                      data={[
                        { value: '1', label: 'ÐÐ¾Ð»ÑÑÐ¸ÑÑ ÐºÐ¾Ð½ÑÑÐ»ÑÑÐ°ÑÐ¸Ñ' },
                        { value: '2', label: 'ÐÑÐºÑÑÑÑ ÑÐ¿Ð¾Ñ' },
                      ]}
                      multy={false}
                      action={() => {}}
                      actionType={""}
                      actionParams={[]}
                      showIcon={true}
                      icon={null}
                      iconStyles={{
                        marginTop: '-12px',
                        marginLeft: '6px',
                        width: '34px',
                      }}
                    />
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginTop: '20px' }}>
                    <InputComponent
                      type={'TEXT_INPUT_OUTLINE'}
                      valueType='text'
                      required={false}
                      widthType={'%'}
                      widthValue={100}
                      heightValue={'50px'}
                      label={"ÐÐ¿Ð¸ÑÐ¸ÑÐµ, Ð¿Ð¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð²Ð°ÑÑ Ð¿ÑÐ¾Ð±Ð»ÐµÐ¼Ñ Ð¸Ð»Ð¸ ÑÐ¿Ð¾ÑÐ½ÑÐ¹ Ð²Ð¾Ð¿ÑÐ¾Ñ Ð¿Ð¾ Ð¿ÑÐ¾ÐµÐºÑÑ"}
                      isError={false}
                      isDisabled={true}
                      labelShrinkLeft={"0px"}
                      innerLabel={null}
                      css={{
                        fontSize: '12px',
                        position: 'relative',
                        boxSizing: 'border-box',
                        marginTop: '0px',
                        backgroundColor: inputBackground,
                      }}
                    />
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-around', marginTop: '50px', marginBottom: '60px' }}>
                    <ButtonComponent
                      inner={"ÐÑÐ¿ÑÐ°Ð²Ð¸ÑÑ Ð´Ð°Ð½Ð½ÑÐµ"} 
                      type='CONTAINED_DEFAULT' 
                      action={showNewAgreement}
                      actionData={null}
                      widthType={'px'}
                      widthValue={228}
                      children={""}
                      childrenCss={undefined}
                      iconSrc={null}
                      iconCss={undefined}
                      muiIconSize={30}
                      MuiIconChildren={ArrowUpwardIcon}
                      css={{
                        position: 'relative',
                        boxSizing: 'border-box',
                        padding: '4px',
                        backgroundColor: chatSubmitColor,
                        width: '56px',
                        height: '43px',
                      }}
                    />
                  </MasterDocFork.ContentLine>
                </MasterDocFork.ChatContainer>
            </React.Fragment>
            : contentType === 'ArguementCC'

            /* ---------------------------------------- */
            /* Ð±Ð°Ð·Ð¾Ð²Ð¾Ðµ Ð¾ÐºÐ½Ð¾ Ð´Ð»Ñ Ð¾ÑÐºÑÑÑÐ¾Ð³Ð¾ ÑÐ¿Ð¾ÑÐ°
            /* ---------------------------------------- */

            ? <React.Fragment>
                <MasterDocFork.ChatContainer style={{ paddingTop: '40px', height: 'auto', minHeight: '100vh' }} backgroundColor={backgroundColor}>
                  <MasterDocFork.CloseIconContainer>
                    <MasterDocFork.CloseIcon onClick={showrightContent}>
                      <img
                        alt={""} 
                        src={closeIcon}  
                      />
                    </MasterDocFork.CloseIcon>
                  </MasterDocFork.CloseIconContainer>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginBottom: '0px' }}>
                    <h3 style={{ fontSize: '28px', margin: 0, marginBottom: 0 }}>ÐÐ°ÑÑÐ¾ÑÐºÐ° ÑÐ¿Ð¾ÑÐ°</h3>
                    <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'flex-start' }}>
                      <span style={{ fontWeight: 'bold', display: 'block', marginRight: '30px' }}>ÐÑÐ²ÐµÑÑÑÐ²ÐµÐ½Ð½ÑÐ¹ ÑÑÐ¸ÑÑ</span>
                      <div
                        style={{
                          display: 'flex',
                          flexDirection: 'row',
                          alignItems: 'center',
                          justifyContent: 'flex-start',
                          position: 'relative'
                        }}
                      >
                        <img
                          alt={""}
                          src={defaulrAvatar}
                          style={{
                            display: 'block',
                            position: 'relative',
                            width: '56px',
                            marginRight: '20px'
                          }}
                        />
                        <div 
                          style={{
                            display: 'flex',
                            flexDirection: 'column',
                            alignItems: 'flex-start',
                            justifyContent: 'flex-start',
                            position: 'relative',
                            marginTop: '0px'
                          }}
                        >
                          <span style={{ fontSize: '15px', width: '240px', marginBottom: '0px', lineHeight: '22px', fontWeight: '500' }}>Ð®ÑÐ¸Ð´Ð¸ÑÐµÑÐºÐ°Ñ Ð¿Ð¾Ð´Ð´ÐµÑÐ¶ÐºÐ°</span>
                        </div>
                      </div>
                    </div>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginTop: '12px', marginBottom: '24px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', fontSize: '18px' }}>Ð¡Ð¾Ð´ÐµÑÐ¶Ð°Ð½Ð¸Ðµ Ð¿ÑÐµÑÐµÐ½Ð·Ð¸Ð¸</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginBottom: '0px' }}>
                    <span style={{ lineHeight: '24px' }}>{ localText }</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginTop: '40px', marginBottom: '0px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', width: '50%' }}>ÐÐ±ÑÐ°Ñ ÑÑÐ¼Ð¼Ð° Ð·Ð°ÐºÐ°Ð·Ð°</span>
                    <span style={{ fontWeight: 'bold', display: 'block', width: '50%', marginLeft: '20px' }}>ÐÐ°Ð¼Ð¾ÑÐ¾Ð¶ÐµÐ½Ð¾</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ justifyContent: 'space-between', marginTop: '10px', marginBottom: '40px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', width: '50%', fontSize: '20px' }}>{"200 000"}â½</span>
                    <span style={{ fontWeight: 'bold', display: 'block', width: '50%', fontSize: '20px', marginLeft: '20px' }}>{"30 000"}â½</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine>
                    <MasterDocFork.WhiteContainer width={"50%"}>
                      <span style={{ fontWeight: 'bold', display: 'block', marginBottom: '20px' }}>ÐÑÑÐµÑ</span>
                      <div
                        style={{
                          display: 'flex',
                          flexDirection: 'row',
                          alignItems: 'center',
                          justifyContent: 'flex-start',
                          position: 'relative'
                        }}
                      >
                        <img
                          alt={""}
                          src={defaulrAvatar}
                          style={{
                            display: 'block',
                            position: 'relative',
                            width: '56px',
                            marginRight: '20px'
                          }}
                        />
                        <div 
                          style={{
                            display: 'flex',
                            flexDirection: 'column',
                            alignItems: 'flex-start',
                            justifyContent: 'flex-start',
                            position: 'relative',
                            marginTop: '-6px'
                          }}
                        >
                          <span style={{ fontSize: '16px', width: '200px', marginBottom: '6px', lineHeight: '22px', fontWeight: '500' }}>ÐÐµÑÑÐ¾Ð² ÐÐ²Ð°Ð½ ÐÐ»Ð°Ð´Ð¸Ð¼Ð¸ÑÐ¾Ð²Ð¸Ñ</span>
                          <span style={{ fontSize: '14px', color: greyColor2 }}>ÐÐÐ Ð¢ÐµÑÐ½Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¡Ð¸ÑÑÐµÐ¼Ñ</span>
                        </div>
                      </div>
                    </MasterDocFork.WhiteContainer>
                    <span style={{ width: '20px' }}/>
                    <MasterDocFork.WhiteContainer width={"50%"}>
                      <span style={{ fontWeight: 'bold', display: 'block', marginBottom: '20px' }}>ÐÑÐ²ÐµÑÑÐ¸Ðº</span>
                      <div
                        style={{
                          display: 'flex',
                          flexDirection: 'row',
                          alignItems: 'center',
                          justifyContent: 'flex-start',
                          position: 'relative'
                        }}
                      >
                        <img
                          alt={""}
                          src={defaulrAvatar}
                          style={{
                            display: 'block',
                            position: 'relative',
                            width: '56px',
                            marginRight: '20px'
                          }}
                        />
                        <div 
                          style={{
                            display: 'flex',
                            flexDirection: 'column',
                            alignItems: 'flex-start',
                            justifyContent: 'flex-start',
                            position: 'relative',
                            marginTop: '-6px'
                          }}
                        >
                          <span style={{ fontSize: '16px', width: '200px', marginBottom: '6px', lineHeight: '22px', fontWeight: '500' }}>ÐÐ°ÑÐ°ÑÐ¾Ð²Ð° ÐÐ¸Ð¾Ð»ÐµÑÑÐ° ÐÐ»Ð°Ð´Ð¸Ð¼Ð¸ÑÐ¾Ð²Ð½Ð°</span>
                          <span style={{ fontSize: '14px', color: greyColor2 }}>Ð¡Ð°Ð¼Ð¾Ð·Ð°Ð½ÑÑÑÐ¹</span>
                        </div>
                      </div>
                    </MasterDocFork.WhiteContainer>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.Delimiter background={chatBorderColor} style={{ marginTop: '60px', marginBottom: '0px' }}/>
                  <MasterDocFork.ContentLine style={{ marginTop: '46px', marginBottom: '24px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', fontSize: '18px' }}>Ð ÐµÑÐµÐ½Ð¸Ðµ ÑÑÐ¸ÑÑÐ°</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine>
                    <MasterDocFork.WhiteContainer width={"50%"} style={{ height: '150px' }}>
                      <span style={{ fontWeight: 'bold', display: 'block', marginBottom: '20px' }}>Ð ÐµÑÐµÐ½Ð¸Ðµ Ð² Ð¿Ð¾Ð»ÑÐ·Ñ</span>
                      <div
                        style={{
                          display: 'flex',
                          flexDirection: 'row',
                          alignItems: 'center',
                          justifyContent: 'flex-start',
                          position: 'relative'
                        }}
                      >
                        <img
                          alt={""}
                          src={defaulrAvatar}
                          style={{
                            display: 'block',
                            position: 'relative',
                            width: '56px',
                            marginRight: '20px'
                          }}
                        />
                        <div 
                          style={{
                            display: 'flex',
                            flexDirection: 'column',
                            alignItems: 'flex-start',
                            justifyContent: 'flex-start',
                            position: 'relative',
                            marginTop: '-6px'
                          }}
                        >
                          <span style={{ fontSize: '16px', width: '200px', marginBottom: '6px', lineHeight: '22px', fontWeight: '500' }}>ÐÐµÑÑÐ¾Ð² ÐÐ²Ð°Ð½ ÐÐ»Ð°Ð´Ð¸Ð¼Ð¸ÑÐ¾Ð²Ð¸Ñ</span>
                          <span style={{ fontSize: '14px', color: greyColor2 }}>ÐÐÐ Ð¢ÐµÑÐ½Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¡Ð¸ÑÑÐµÐ¼Ñ</span>
                        </div>
                      </div>
                    </MasterDocFork.WhiteContainer>
                    <span style={{ width: '20px' }}/>
                    <MasterDocFork.WhiteContainer width={"50%"} style={{ height: '150px' }}>
                      <span style={{ fontWeight: 'bold', display: 'block', marginBottom: '20px' }}>Ð Ð°ÑÐ¿ÑÐµÐ´ÐµÐ»ÐµÐ½Ð¸Ðµ ÑÑÐµÐ´ÑÑÐ²</span>
                      <div
                        style={{
                          display: 'flex',
                          flexDirection: 'row',
                          alignItems: 'center',
                          justifyContent: 'flex-start',
                          position: 'relative',
                          width: '100%'
                        }}
                      >
                        <span style={{ fontWeight: 'bold', display: 'block', width: '50%', fontSize: '20px' }}>{"200 000"}â½</span>
                        <span style={{ fontWeight: 'bold', display: 'block', width: '50%', fontSize: '20px' }}>{"50 000"}â½</span>
                      </div>
                      <div
                        style={{
                          display: 'flex',
                          flexDirection: 'row',
                          alignItems: 'center',
                          justifyContent: 'flex-start',
                          position: 'relative',
                          width: '100%',
                          marginTop: '5px'
                        }}
                      >
                        <span style={{ display: 'block', width: '50%' }}>ÐÐ°ÑÐ²Ð¸ÑÐµÐ»Ñ</span>
                        <span style={{ display: 'block', width: '50%' }}>ÐÑÐ²ÐµÑÑÐ¸Ðº</span>
                      </div>
                    </MasterDocFork.WhiteContainer>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginTop: '30px', marginBottom: '16px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', width: '50%', fontSize: '15px' }}>ÐÐ¾Ð¼Ð¼ÐµÐ½ÑÐ°ÑÐ¸Ð¹ ÑÑÐ¸ÑÑÐ°</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginBottom: '30px' }}>
                    <span style={{ lineHeight: '24px' }}>{ localText }</span>
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.ContentLine style={{ marginBottom: '48px' }}>
                    <ButtonComponent
                      inner={"ÐÑÐ¸Ð½Ð¸Ð¼Ð°Ñ ÑÐµÑÐµÐ½Ð¸Ðµ"} 
                      type='CONTAINED_DEFAULT' 
                      action={() => {}}
                      actionData={null}
                      widthType={'px'}
                      widthValue={200}
                      children={""}
                      childrenCss={undefined}
                      iconSrc={null}
                      iconCss={undefined}
                      muiIconSize={30}
                      MuiIconChildren={ArrowUpwardIcon}
                      css={{
                        position: 'relative',
                        boxSizing: 'border-box',
                        padding: '4px',
                        backgroundColor: chatSubmitColor,
                        width: '56px',
                        height: '43px',
                      }}
                    />
                    <ButtonComponent
                      inner={"ÐÑÐ¿Ð¾ÑÐ¸ÑÑ ÑÐµÑÐµÐ½Ð¸Ðµ"} 
                      type='CONTAINED_DEFAULT' 
                      action={() => {}}
                      actionData={null}
                      widthType={'px'}
                      widthValue={220}
                      children={""}
                      childrenCss={undefined}
                      iconSrc={null}
                      iconCss={undefined}
                      muiIconSize={30}
                      MuiIconChildren={ArrowUpwardIcon}
                      css={{
                        position: 'relative',
                        boxSizing: 'border-box',
                        padding: '4px',
                        backgroundColor: inputBackground,
                        color: greyColor,
                        width: '56px',
                        height: '43px',
                        marginLeft: '20px'
                      }}
                    />
                  </MasterDocFork.ContentLine>
                  <MasterDocFork.Delimiter background={chatBorderColor} style={{ marginTop: '0px', marginBottom: '10px' }}/>
                  <MasterDocFork.ContentLine style={{ marginTop: '12px', marginBottom: '20px' }}>
                    <span style={{ fontWeight: 'bold', display: 'block', marginRight: '80px', fontSize: '15px' }}>ÐÐ±ÑÐµÐ½Ð¸Ðµ Ð¿Ð¾ ÐºÐ°ÑÑÐ¾ÑÐºÐµ ÑÐ¿Ð¾ÑÐ°</span>
                  </MasterDocFork.ContentLine>
                  <ChatFork.ChatHeader>
                    <div style={divCSS}>
                      <ChatFork.ChatHeaderAvatar style={avatarContainerCSS}>
                        <img
                          alt={""}
                          src={defaulrAvatar}
                          style={avatarCSS}
                        />
                        <img
                          alt={""}
                          src={defaulrAvatar}
                          style={{ ...avatarCSS, marginLeft: '-14px' }}
                        />
                        <img
                          alt={""}
                          src={defaulrAvatar}
                          style={{ ...avatarCSS, marginLeft: '-14px' }}
                        />
                      </ChatFork.ChatHeaderAvatar>
                    </div>
                    <div style={divCSS}>
                      <ChatFork.ChatHeaderEnableDocs>
                        <span style={{ ...lastActiveSpanCSS, fontSize: '15px' }}>ÐÐ¾ÐºÑÐ¼ÐµÐ½ÑÑ</span>
                        <Switch color={"primary"} defaultChecked />
                      </ChatFork.ChatHeaderEnableDocs>
                      <InputComponent
                        type={'TEXT_INPUT_OUTLINE_SEARCH'}
                        valueType='text'
                        required={false}
                        widthType={'px'}
                        widthValue={300}
                        heightValue={'56px'}
                        label={"ÐÐ¾Ð¸ÑÐº Ð¿Ð¾ ÑÐ¾Ð¾Ð±ÑÐµÐ½Ð¸ÑÐ¼"}
                        isError={false}
                        isDisabled={false}
                        labelShrinkLeft={"0px"}
                        innerLabel={null}
                        css={{
                          fontSize: '12px',
                          position: 'relative',
                          boxSizing: 'border-box',
                          marginBottom: '8px',
                          backgroundColor: 'white'
                        }}
                      />
                    </div>
                  </ChatFork.ChatHeader>
                  <ChatFork.ChatBody
                    border={`1px solid ${chatBorderColor}`}
                    backgroundColor={chatBackground}
                    style={{ marginTop: '12px', height: 'auto' }}
                  >
                    <ChatFork.ChatBodyInner
                      border={`1px solid transparent`}
                      backgroundColor={chatBackground}
                    >
                      <ChatMessagesContainer
                        data={[
                          { 
                            date: '05.01.2022', 
                            messages: [
                              { 
                                type: 'me', 
                                content: [
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:05',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:05',
                                    likes: 0  }
                                ]
                              },
                              { 
                                type: 'you', 
                                content: [
                                  { text: 'Ipsum nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et', 
                                    time: '20:06',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0,
                                    files: {
                                      id: 'undefined',
                                      ext: 'doc',
                                      name: 'ÐÐ»Ð°Ð½_Ð¡ÐºÐ»Ð°Ð´Ð°.doc'
                                    }},
                                ]
                              },
                              { 
                                type: 'me', 
                                content: [
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:08',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'you', 
                                content: [
                                  { text: 'Ipsum nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'me', 
                                content: [
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:08',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'you', 
                                content: [
                                  { text: 'Ipsum nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'action', 
                                content: [
                                  { text: 'Ipsum nunc amet sit faucibus sed. Pellentesque aliquam fermentum eleifend tellus gravida ultricies vitae senectus et', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:10',
                                    name: 'ÐÐ¸Ð¾Ð»ÐµÑÑÐ°',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'me', 
                                content: [
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:08',
                                    likes: 0 },
                                ]
                              },
                              { 
                                type: 'me', 
                                content: [
                                  { text: 'Lorem ipsum dolor sit amet consectetur adipisicing elit', 
                                    time: '20:08',
                                    likes: 0 },
                                ]
                              },
                            ]
                          }
                        ]}
                      />
                    </ChatFork.ChatBodyInner>
                    <div style={bottomDivCSS}>
                      <div style={bottomDivInnerCSS}>
                        <div style={clipDivCSS}>
                          <img
                            alt={""}
                            src={clipIcon}
                          />
                        </div>
                        <InputComponent
                          type={'TEXT_INPUT_OUTLINE'}
                          valueType='text'
                          required={false}
                          widthType={'%'}
                          widthValue={100}
                          heightValue={'50px'}
                          label={"Lorem ipsum dolor sit amet consectetur adipisicing elit"}
                          isError={false}
                          isDisabled={true}
                          labelShrinkLeft={"0px"}
                          innerLabel={null}
                          css={{
                            fontSize: '12px',
                            position: 'relative',
                            boxSizing: 'border-box',
                            marginTop: '0px',
                            backgroundColor: inputBackground,
                            marginRight: '12px'
                          }}
                        />
                        <ButtonComponent
                          inner={""} 
                          type='ICON_BUTTON_CHAT_SUBMIT' 
                          action={() => console.log('this is button')}
                          actionData={null}
                          widthType={'px'}
                          widthValue={56}
                          children={""}
                          childrenCss={undefined}
                          iconSrc={null}
                          iconCss={undefined}
                          muiIconSize={30}
                          MuiIconChildren={ArrowUpwardIcon}
                          css={{
                            position: 'relative',
                            boxSizing: 'border-box',
                            padding: '4px',
                            backgroundColor: chatSubmitColor,
                            width: '56px',
                            height: '56px',
                          }}
                        />
                      </div>
                    </div>
                  </ChatFork.ChatBody>
                </MasterDocFork.ChatContainer>
            </React.Fragment> 
            : contentType === 'EditProfileCC'

            /* ---------------------------------------- */
            /* Ð±Ð°Ð·Ð¾Ð²Ð¾Ðµ Ð¾ÐºÐ½Ð¾ Ð´Ð»Ñ ÑÐµÐ´Ð°ÐºÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ Ð¿ÑÐ¾ÑÐ¸Ð»Ñ
            /* ---------------------------------------- */

            ? <React.Fragment>
                <EditProfileFork.Container backgroundColor={backgroundColor} style={{ paddingBottom: '28px' }}>
                  <EditProfileFork.CloseIconContainer>
                    <EditProfileFork.CloseIcon onClick={showrightContent}>
                      <img
                        alt={""} 
                        src={closeIcon}  
                      />
                    </EditProfileFork.CloseIcon>
                  </EditProfileFork.CloseIconContainer>
                  <EditProfileFork.ContentLine>
                    <div
                      style={{
                        display: 'flex', 
                        flexDirection: 'column', 
                        alignItems: 'center', 
                        marginRight: '44px',
                        justifyContent: 'space-around',
                        width: '150px', 
                        height: '150px',
                        backgroundColor: 'rgb(217, 231, 240)',
                        borderRadius: '50%',
                        overflow: 'hidden',
                        cursor: 'pointer',
                      }}
                    > 
                      { avatarFile === 404 && <React.Fragment>
                        { USER_ROLE === 'EXECUTOR' &&
                          <img
                            alt={""}
                            src={
                              EXECUTOR[0].avatar === '1' ? bearAvatar :
                              EXECUTOR[0].avatar === '2' ? enotAvatar :
                              EXECUTOR[0].avatar === '3' ? foxAvatar :
                              EXECUTOR[0].avatar === '4' ? groupAvatar :
                              EXECUTOR[0].avatar === '5' ? manAvatar :
                              EXECUTOR[0].avatar === '6' ? womanAvatar : bearAvatar
                            }
                            style={
                              EXECUTOR[0].avatar === '1' ? { width: '100px', marginTop: '14px' } :
                              EXECUTOR[0].avatar === '2' ? { width: '100px', marginTop: '8px'  } :
                              EXECUTOR[0].avatar === '3' ? { width: '90px', marginTop: '10px' } :
                              EXECUTOR[0].avatar === '4' ? { width: '140px', marginTop: '44px' } :
                              EXECUTOR[0].avatar === '5' ? { width: '100px', marginTop: '40px' } :
                              EXECUTOR[0].avatar === '6' ? { width: '100px', marginTop: '40px'  } : 
                              { width: '100px', marginTop: '6px' }
                            }
                            onClick={changeAvatar}
                          /> 
                        }
                        { USER_ROLE === 'CUSTOMER' &&
                          <img
                            alt={""}
                            src={
                              CUSTOMER[0].avatar === '1' ? bearAvatar :
                              CUSTOMER[0].avatar === '2' ? enotAvatar :
                              CUSTOMER[0].avatar === '3' ? foxAvatar :
                              CUSTOMER[0].avatar === '4' ? groupAvatar :
                              CUSTOMER[0].avatar === '5' ? manAvatar :
                              CUSTOMER[0].avatar === '6' ? womanAvatar : bearAvatar
                            }
                            style={
                              CUSTOMER[0].avatar === '1' ? { width: '100px', marginTop: '14px' } :
                              CUSTOMER[0].avatar === '2' ? { width: '100px', marginTop: '8px'  } :
                              CUSTOMER[0].avatar === '3' ? { width: '90px', marginTop: '10px' } :
                              CUSTOMER[0].avatar === '4' ? { width: '140px', marginTop: '44px' } :
                              CUSTOMER[0].avatar === '5' ? { width: '100px', marginTop: '40px' } :
                              CUSTOMER[0].avatar === '6' ? { width: '100px', marginTop: '40px'  } : 
                              { width: '100px', marginTop: '6px' }
                            }
                            onClick={changeAvatar}
                          /> 
                        }
                      </React.Fragment> }
                      { avatarFile === 200 && <img
                      
                        alt={""}
                        src={`http://85.193.88.125:3000/techDocs/${USER_ID}.avatar.jpg`}
                        style={{ height: '100%' }}
                        onClick={changeAvatar}
                        
                      /> }
                    </div>
                    <span 
                      style={{
                        display: 'block',
                        position: 'absolute', 
                        color: chatSubmitColor, 
                        marginLeft: '48px',
                        marginTop: '190px',
                        cursor: 'pointer', 
                      }}
                      onClick={changeAvatar}
                    >Ð¡Ð¼ÐµÐ½Ð¸ÑÑ</span>
                    <div>
                      <EditProfileFork.ContentLine>
                        <span style={{ fontWeight: 'bold', marginLeft: '20px', letterSpacing: '3px' }}>
                          { EXECUTOR.length > 0  ?
                            EXECUTOR[0].faceType : 
                            CUSTOMER.length > 0  ?
                            CUSTOMER[0].faceType : '' }
                        </span>
                      </EditProfileFork.ContentLine>
                      <EditProfileFork.ContentLine style={{ marginTop: '20px' }}>

                        { EXECUTOR.length > 0 && 
                        ( EXECUTOR[0].faceType === 'SELF_FACE' || EXECUTOR[0].faceType === 'PHIS_FACE' ) && 

                          <React.Fragment>
                            <InputComponent
                              type={'TEXT_INPUT_OUTLINE'}
                              valueType='text'
                              required={false}
                              widthType={'%'}
                              widthValue={33}
                              heightValue={'50px'}
                              label={"Ð¤Ð°Ð¼Ð¸Ð»Ð¸Ñ"}
                              isError={false}
                              isDisabled={false}
                              labelShrinkLeft={"0px"}
                              innerLabel={null}
                              store={[ 
                                EXECUTOR.length > 0     ?
                                EXECUTOR[0].bio.surname : 
                                CUSTOMER.length > 0     ?
                                CUSTOMER[0].bio.surname : '', () => null ]}
                              css={{
                                fontSize: '12px',
                                position: 'relative',
                                boxSizing: 'border-box',
                                marginBottom: '0px',
                                marginTop: '0px',
                                backgroundColor: 'white',
                                marginRight: '20px'
                              }}
                            />
                            <InputComponent
                              type={'TEXT_INPUT_OUTLINE'}
                              valueType='text'
                              required={false}
                              widthType={'%'}
                              widthValue={33}
                              heightValue={'50px'}
                              label={"ÐÐ¼Ñ"}
                              isError={false}
                              isDisabled={false}
                              labelShrinkLeft={"0px"}
                              innerLabel={null}
                              store={[ 
                                EXECUTOR.length > 0     ?
                                EXECUTOR[0].bio.name : 
                                CUSTOMER.length > 0     ?
                                CUSTOMER[0].bio.name : '', () => null ]}
                              css={{
                                fontSize: '12px',
                                position: 'relative',
                                boxSizing: 'border-box',
                                marginBottom: '0px',
                                marginTop: '0px',
                                backgroundColor: 'white',
                                marginRight: '20px'
                              }}
                            />
                            <InputComponent
                              type={'TEXT_INPUT_OUTLINE'}
                              valueType='text'
                              required={false}
                              widthType={'%'}
                              widthValue={33}
                              heightValue={'50px'}
                              label={"ÐÑÑÐµÑÑÐ²Ð¾"}
                              isError={false}
                              isDisabled={false}
                              labelShrinkLeft={"0px"}
                              innerLabel={null}
                              store={[ 
                                EXECUTOR.length > 0     ?
                                EXECUTOR[0].bio.secondName : '', () => null ]}
                              css={{
                                fontSize: '12px',
                                position: 'relative',
                                boxSizing: 'border-box',
                                marginBottom: '0px',
                                marginTop: '0px',
                                backgroundColor: 'white'
                              }}
                            />
                          </React.Fragment> }
                        { EXECUTOR.length > 0 && 
                        ( EXECUTOR[0].faceType !== 'SELF_FACE' && EXECUTOR[0].faceType !== 'PHIS_FACE' ) && 

                          <React.Fragment>
                            <InputComponent
                              type={'TEXT_INPUT_OUTLINE'}
                              valueType='text'
                              required={false}
                              widthType={'px'}
                              widthValue={550}
                              heightValue={'50px'}
                              label={"ÐÐ°Ð·Ð²Ð°Ð½Ð¸Ðµ Ð¾ÑÐ³Ð°Ð½Ð¸Ð·Ð°ÑÐ¸Ð¸ Ð¸Ð»Ð¸ ÐÐ"}
                              isError={false}
                              isDisabled={false}
                              labelShrinkLeft={"0px"}
                              innerLabel={null}
                              store={[ 
                                EXECUTOR.length > 0     ?
                                EXECUTOR[0].bio.name : 
                                CUSTOMER.length > 0     ?
                                CUSTOMER[0].bio.name : '', () => null ]}
                              css={{
                                fontSize: '12px',
                                position: 'relative',
                                boxSizing: 'border-box',
                                marginBottom: '0px',
                                marginTop: '0px',
                                backgroundColor: 'white',
                                marginRight: '20px'
                              }}
                            />
                          </React.Fragment> }

                        { CUSTOMER.length > 0 && 
                        ( CUSTOMER[0].faceType === 'SELF_FACE' || CUSTOMER[0].faceType === 'PHIS_FACE' ) && 

                          <React.Fragment>
                            <InputComponent
                              type={'TEXT_INPUT_OUTLINE'}
                              valueType='text'
                              required={false}
                              widthType={'%'}
                              widthValue={33}
                              heightValue={'50px'}
                              label={"Ð¤Ð°Ð¼Ð¸Ð»Ð¸Ñ"}
                              isError={false}
                              isDisabled={false}
                              labelShrinkLeft={"0px"}
                              innerLabel={null}
                              store={[ 
                                EXECUTOR.length > 0     ?
                                EXECUTOR[0].bio.surname : 
                                CUSTOMER.length > 0     ?
                                CUSTOMER[0].bio.surname : '', () => null ]}
                              css={{
                                fontSize: '12px',
                                position: 'relative',
                                boxSizing: 'border-box',
                                marginBottom: '0px',
                                marginTop: '0px',
                                backgroundColor: 'white',
                                marginRight: '20px'
                              }}
                            />
                            <InputComponent
                              type={'TEXT_INPUT_OUTLINE'}
                              valueType='text'
                              required={false}
                              widthType={'%'}
                              widthValue={33}
                              heightValue={'50px'}
                              label={"ÐÐ¼Ñ"}
                              isError={false}
                              isDisabled={false}
                              labelShrinkLeft={"0px"}
                              innerLabel={null}
                              store={[ 
                                EXECUTOR.length > 0     ?
                                EXECUTOR[0].bio.name : 
                                CUSTOMER.length > 0     ?
                                CUSTOMER[0].bio.name : '', () => null ]}
                              css={{
                                fontSize: '12px',
                                position: 'relative',
                                boxSizing: 'border-box',
                                marginBottom: '0px',
                                marginTop: '0px',
                                backgroundColor: 'white',
                                marginRight: '20px'
                              }}
                            />
                            <InputComponent
                              type={'TEXT_INPUT_OUTLINE'}
                              valueType='text'
                              required={false}
                              widthType={'%'}
                              widthValue={33}
                              heightValue={'50px'}
                              label={"ÐÑÑÐµÑÑÐ²Ð¾"}
                              isError={false}
                              isDisabled={false}
                              labelShrinkLeft={"0px"}
                              innerLabel={null}
                              store={[ 
                                EXECUTOR.length > 0     ?
                                EXECUTOR[0].bio.secondName : '', () => null ]}
                              css={{
                                fontSize: '12px',
                                position: 'relative',
                                boxSizing: 'border-box',
                                marginBottom: '0px',
                                marginTop: '0px',
                                backgroundColor: 'white'
                              }}
                            />
                          </React.Fragment> }
                        { CUSTOMER.length > 0 && 
                        ( CUSTOMER[0].faceType !== 'SELF_FACE' && CUSTOMER[0].faceType !== 'PHIS_FACE' ) && 

                          <React.Fragment>
                            <InputComponent
                              type={'TEXT_INPUT_OUTLINE'}
                              valueType='text'
                              required={false}
                              widthType={'px'}
                              widthValue={550}
                              heightValue={'50px'}
                              label={"ÐÐ°Ð·Ð²Ð°Ð½Ð¸Ðµ Ð¾ÑÐ³Ð°Ð½Ð¸Ð·Ð°ÑÐ¸Ð¸ Ð¸Ð»Ð¸ ÐÐ"}
                              isError={false}
                              isDisabled={false}
                              labelShrinkLeft={"0px"}
                              innerLabel={null}
                              store={[ 
                                EXECUTOR.length > 0     ?
                                EXECUTOR[0].bio.name : 
                                CUSTOMER.length > 0     ?
                                CUSTOMER[0].bio.name : '', () => null ]}
                              css={{
                                fontSize: '12px',
                                position: 'relative',
                                boxSizing: 'border-box',
                                marginBottom: '0px',
                                marginTop: '0px',
                                backgroundColor: 'white',
                                marginRight: '20px'
                              }}
                            />
                          </React.Fragment> }
                      </EditProfileFork.ContentLine>
                      <span
                        style={{
                          display: 'block',
                          position: 'relative',
                          width: '600px',
                          lineHeight: '22px',
                          backgroundColor: 'rgb(253, 237, 237)',
                          padding: '14px',
                          paddingLeft: '20px',
                          borderRadius: '4px',
                          marginTop: '16px'
                        }}
                      >{"ÐÐ½Ð¸Ð¼Ð°Ð½Ð¸Ðµ! ÐÐµÐºÐ¾ÑÐ¾ÑÑÐµ ÑÑÐ½ÐºÑÐ¸Ð¸, ÑÐ°ÐºÐ¸Ðµ, ÐºÐ°Ðº Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸Ðµ Ð¤ÐÐ, Ð½Ð°Ð²ÑÐºÐ° Ð¸Ð»Ð¸ ÐºÐ²Ð°Ð»Ð¸ÑÐ¸ÐºÐ°ÑÐ¸Ð¸, Ð²ÑÐ·ÑÐ²Ð°ÑÑ Ð¾ÑÐ¸Ð±ÐºÐ¸ Ð² Ð´Ð°Ð»ÑÐ½ÐµÐ¹ÑÐµÐ¼ Ð¾ÑÐ¾Ð±ÑÐ°Ð¶ÐµÐ½Ð¸Ð¸ Ð´Ð°Ð½Ð½ÑÑ. ÐÐ°Ð½Ð½ÑÐµ ÑÑÐºÐ½ÑÐ¸Ð¸ ÑÐºÑÑÑÑ Ð´Ð¾ Ð¼Ð¾Ð¼ÐµÐ½ÑÐ°, ÐºÐ¾Ð³Ð´Ð° Ð±ÑÐ´ÑÑ ÑÐµÑÐµÐ½Ñ ÐºÑÐ¸ÑÐ¸ÑÐµÑÐºÐ¸Ðµ Ð²Ð¾Ð¿ÑÐ¾ÑÑ"}</span>
                    </div>
                  </EditProfileFork.ContentLine>
                  <EditProfileFork.Delimiter style={{ marginTop: '50px', marginBottom: '44px' }} />
                  <EditProfileFork.ContentLine>
                    <span style={{ fontWeight: 'bold', marginLeft: '0px' }}>Ð¡Ð¿ÐµÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ</span>
                  </EditProfileFork.ContentLine>
                  <EditProfileFork.ContentLine style={{ marginTop: '16px' }}>
                    <SelectField 
                      placeholder={"ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð½Ð¾Ð²ÑÑ ÑÐ¿ÐµÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ [ Ð²ÑÐµÐ¼ÐµÐ½Ð½Ð¾ Ð¾Ð´Ð½Ð° ]"}
                      params={{ width: 1400, mb: '0px', height: 50 }}
                      data={[
                        { value: 'ÐÐ½Ð¶ÐµÐ½ÐµÑÐ½Ð¾-Ð³ÐµÐ¾Ð´ÐµÐ·Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ', label: 'ÐÐµÐ¾Ð´ÐµÐ·Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ' },
                        { value: 'ÐÐ½Ð¶ÐµÐ½ÐµÑÐ½Ð¾-Ð³ÐµÐ¾Ð»Ð¾Ð³Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ', label: 'ÐÐµÐ¾Ð»Ð¾Ð³Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ' },
                        { value: 'ÐÐ½Ð¶ÐµÐ½ÐµÑÐ½Ð¾-Ð³Ð¸Ð´ÑÐ¾Ð¼ÐµÑÐµÐ¾ÑÐ¾Ð»Ð¾Ð³Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ', label: 'ÐÐ¸Ð´ÑÐ¾Ð¼ÐµÑÐµÐ¾ÑÐ¾Ð»Ð¾Ð³Ð¸Ñ' },
                        { value: 'ÐÐ½Ð¶ÐµÐ½ÐµÑÐ½Ð¾-ÑÐºÐ¾Ð»Ð¾Ð³Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ', label: 'Ð­ÐºÐ¾Ð»Ð¾Ð³Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ' },
                        { value: 'ÐÑÑÐ¾ÑÐ¸ÐºÐ¾-ÐºÑÐ»ÑÑÑÑÐ½ÑÐµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ', label: 'ÐÑÑÐ¾ÑÐ¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ' },
                        { value: 'ÐÐ±ÑÐ»ÐµÐ´Ð¾Ð²Ð°Ð½Ð¸Ðµ ÑÑÑÐ¾Ð¸ÑÐµÐ»ÑÐ½ÑÑ ÐºÐ¾Ð½ÑÑÑÑÐºÑÐ¸Ð¹', label: 'ÐÐ±ÑÐ»ÐµÐ´Ð¾Ð²Ð°Ð½Ð¸Ðµ ÐºÐ¾Ð½ÑÑÑÑÐºÑÐ¸Ð¹' },
                        { value: 'ÐÐµÐ½ÐµÑÐ°Ð»ÑÐ½ÑÐ¹ Ð¿Ð»Ð°Ð½', label: 'ÐÐµÐ½ÐµÑÐ°Ð»ÑÐ½ÑÐ¹ Ð¿Ð»Ð°Ð½' },
                        { value: 'ÐÐ²ÑÐ¾Ð¼Ð¾Ð±Ð¸Ð»ÑÐ½ÑÐµ Ð´Ð¾ÑÐ¾Ð³Ð¸', label: 'ÐÐ²ÑÐ¾Ð¼Ð¾Ð±Ð¸Ð»ÑÐ½ÑÐµ Ð´Ð¾ÑÐ¾Ð³Ð¸' },
                        { value: 'ÐÑÑÐ¸ÑÐµÐºÑÑÑÐ½ÑÐµ ÑÐµÑÐµÐ½Ð¸Ñ', label: 'ÐÑÑÐ¸ÑÐµÐºÑÑÑÐ½ÑÐµ ÑÐµÑÐµÐ½Ð¸Ñ' },
                        { value: 'ÐÐ¾Ð½ÑÑÑÑÐºÑÐ¸Ð¸ Ð¶ÐµÐ»ÐµÐ·Ð¾Ð±ÐµÑÐ¾Ð½Ð½ÑÐµ', label: 'ÐÐ¾Ð½ÑÑÑÑÐºÑÐ¸Ð¸ Ð¶ÐµÐ»ÐµÐ·Ð¾Ð±ÐµÑÐ¾Ð½Ð½ÑÐµ' },
                        { value: 'ÐÐ¾Ð½ÑÑÑÑÐºÑÐ¸Ð¸ Ð¼ÐµÑÐ°Ð»Ð»Ð¸ÑÐµÑÐºÐ¸Ðµ', label: 'ÐÐ¾Ð½ÑÑÑÑÐºÑÐ¸Ð¸ Ð¼ÐµÑÐ°Ð»Ð»Ð¸ÑÐµÑÐºÐ¸Ðµ' },
                        { value: 'ÐÐ¸Ð´ÑÐ¾ÑÐµÑÐ½Ð¸ÑÐµÑÐºÐ¸Ðµ ÑÐµÑÐµÐ½Ð¸Ñ ', label: 'ÐÐ¸Ð´ÑÐ¾ÑÐµÑÐ½Ð¸ÑÐµÑÐºÐ¸Ðµ ÑÐµÑÐµÐ½Ð¸Ñ' },
                        { value: 'Ð­Ð»ÐµÐºÑÑÐ¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ', label: 'Ð­Ð»ÐµÐºÑÑÐ¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ' },
                        { value: 'Ð­Ð»ÐµÐºÑÑÐ¸ÑÐµÑÐºÐ¾Ðµ Ð¾ÑÐ²ÐµÑÐµÐ½Ð¸Ðµ', label: 'Ð­Ð»ÐµÐºÑÑÐ¸ÑÐµÑÐºÐ¾Ðµ Ð¾ÑÐ²ÐµÑÐµÐ½Ð¸Ðµ' },
                        { value: 'Ð¡Ð¸Ð»Ð¾Ð²Ð¾Ðµ ÑÐ»ÐµÐºÑÑÐ¾Ð¾Ð±Ð¾ÑÑÐ´Ð¾Ð²Ð°Ð½Ð¸Ðµ', label: 'Ð¡Ð¸Ð»Ð¾Ð²Ð¾Ðµ ÑÐ»ÐµÐºÑÑÐ¾Ð¾Ð±Ð¾ÑÑÐ´Ð¾Ð²Ð°Ð½Ð¸Ðµ' },
                        { value: 'ÐÐ¾Ð´Ð¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ Ð¸ ÐºÐ°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ', label: 'ÐÐ¾Ð´Ð¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ Ð¸ ÐºÐ°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ' },
                        { value: 'ÐÑÐ¾Ð¿Ð»ÐµÐ½Ð¸Ðµ, Ð²ÐµÐ½ÑÐ¸Ð»ÑÑÐ¸Ñ, ÐºÐ¾Ð½Ð´Ð¸ÑÐ¸Ð¾Ð½Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ', label: 'ÐÑÐ¾Ð¿Ð»ÐµÐ½Ð¸Ðµ Ð¸ Ð²ÐµÐ½ÑÐ¸Ð»ÑÑÐ¸Ñ' },
                        { value: 'ÐÐ¾Ð·Ð´ÑÑÐ¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ', label: 'ÐÐ¾Ð·Ð´ÑÑÐ¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ' },
                        { value: 'Ð¥Ð¾Ð»Ð¾Ð´Ð¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ', label: 'Ð¥Ð¾Ð»Ð¾Ð´Ð¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ' },
                        { value: 'Ð¢ÐµÐ¿Ð»Ð¾Ð¼ÐµÑÐ°Ð½Ð¸ÑÐµÑÐºÐ¸Ðµ ÑÐµÑÐµÐ½Ð¸Ñ', label: 'Ð¢ÐµÐ¿Ð»Ð¾Ð¼ÐµÑÐ°Ð½Ð¸ÑÐµÑÐºÐ¸Ðµ ÑÐµÑÐµÐ½Ð¸Ñ' },
                        { value: 'Ð¡ÐµÑÐ¸ ÑÐ²ÑÐ·Ð¸', label: 'Ð¡ÐµÑÐ¸ ÑÐ²ÑÐ·Ð¸' },
                        { value: 'ÐÐ¾Ð¶Ð°ÑÐ½Ð°Ñ Ð±ÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð¾ÑÑÑ', label: 'ÐÐ¾Ð¶Ð°ÑÐ½Ð°Ñ Ð±ÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð¾ÑÑÑ' },
                        { value: 'ÐÐ°Ð·Ð¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ', label: 'ÐÐ°Ð·Ð¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ' },
                        { value: 'Ð¢ÐµÑÐ½Ð¾Ð»Ð¾Ð³Ð¸Ñ Ð¿ÑÐ¾Ð¸Ð·Ð²Ð¾Ð´ÑÑÐ²Ð°', label: 'Ð¢ÐµÑÐ½Ð¾Ð»Ð¾Ð³Ð¸Ñ Ð¿ÑÐ¾Ð¸Ð·Ð²Ð¾Ð´ÑÑÐ²Ð°' },
                        { value: 'ÐÐ²ÑÐ¾Ð¼Ð°ÑÐ¸Ð·Ð°ÑÐ¸Ñ', label: 'ÐÐ²ÑÐ¾Ð¼Ð°ÑÐ¸Ð·Ð°ÑÐ¸Ñ' },
                        { value: 'ÐÑÐ¾ÐµÐºÑ Ð¾ÑÐ³Ð°Ð½Ð¸Ð·Ð°ÑÐ¸Ð¸ ÑÑÑÐ¾Ð¸ÑÐµÐ»ÑÑÑÐ²Ð° / ÑÐ½Ð¾ÑÑ / Ð´ÐµÐ¼Ð¾Ð½ÑÐ°Ð¶Ñ', label: 'ÐÑÐ¾ÐµÐºÑ ÑÑÑÐ¾Ð¸ÑÐµÐ»ÑÑÑÐ²Ð° Ð¸ ÑÐ½Ð¾ÑÐ°' },
                        { value: 'ÐÑÑÐ°Ð½Ð° Ð¾ÐºÑÑÐ¶Ð°ÑÑÐµÐ¹ ÑÑÐµÐ´Ñ', label: 'ÐÑÑÐ°Ð½Ð° Ð¾ÐºÑÑÐ¶Ð°ÑÑÐµÐ¹ ÑÑÐµÐ´Ñ' },
                        { value: 'ÐÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð°Ñ ÑÐºÑÐ¿Ð»ÑÐ°ÑÐ°ÑÐ¸Ñ Ð¾Ð±ÑÐµÐºÑÐ°', label: 'ÐÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð°Ñ ÑÐºÑÐ¿Ð»ÑÐ°ÑÐ°ÑÐ¸Ñ Ð¾Ð±ÑÐµÐºÑÐ°' },
                        { value: 'Ð­Ð½ÐµÑÐ³ÐµÑÐ¸ÑÐµÑÐºÐ°Ñ ÑÑÑÐµÐºÑÐ¸Ð²Ð½Ð¾ÑÑÑ', label: 'Ð­Ð½ÐµÑÐ³ÐµÑÐ¸ÑÐµÑÐºÐ°Ñ ÑÑÑÐµÐºÑÐ¸Ð²Ð½Ð¾ÑÑÑ' },
                        { value: 'ÐÐ±ÐµÑÐ¿ÐµÑÐµÐ½Ð¸Ðµ Ð´Ð¾ÑÑÑÐ¿Ð° Ð¸Ð½Ð²Ð°Ð»Ð¸Ð´Ð¾Ð²', label: 'ÐÐ±ÐµÑÐ¿ÐµÑÐµÐ½Ð¸Ðµ Ð´Ð¾ÑÑÑÐ¿Ð° Ð¸Ð½Ð²Ð°Ð»Ð¸Ð´Ð¾Ð²' },
                        { value: 'ÐÐµÑÐ¾Ð¿ÑÐ¸ÑÑÐ¸Ñ Ð¿Ð¾ Ð³ÑÐ°Ð¶Ð´Ð°Ð½ÑÐºÐ¾Ð¹ Ð¾Ð±Ð¾ÑÐ¾Ð½Ðµ Ð¸ Ð¿ÑÐµÐ´ÑÐ¿ÑÐµÐ¶Ð´ÐµÐ½Ð¸Ñ ÑÑÐµÐ·Ð²ÑÑÐ°Ð¹Ð½ÑÑ ÑÐ¸ÑÑÐ°ÑÐ¸Ð¹', label: 'ÐÑÐ°Ð¶Ð´Ð°Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð¾ÑÐ¾Ð½Ð°' },
                        { value: 'Ð¡Ð¼ÐµÑÐ½Ð°Ñ Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÐ°ÑÐ¸Ñ', label: 'Ð¡Ð¼ÐµÑÐ½Ð°Ñ Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÐ°ÑÐ¸Ñ' },
                        { value: 'ÐÐ½Ð°Ñ Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÐ°ÑÐ¸Ñ', label: 'ÐÐ½Ð°Ñ Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÐ°ÑÐ¸Ñ' }
                      ]}
                      multy={false}
                      action={setSpec}
                      actionType={"AUTH_SPEC_TYPE"}
                      actionParams={[]}
                      showIcon={true}
                      icon={null}
                      iconStyles={{
                        marginTop: '-12px',
                        marginLeft: '6px',
                        width: '34px',
                      }}
                    />
                  </EditProfileFork.ContentLine>
                  <EditProfileFork.ContentLine style={{ marginTop: '30px' }}>
                    <span style={{ fontWeight: 'bold', marginLeft: '0px' }}>ÐÐ¾Ð¸ Ð½Ð°Ð²ÑÐºÐ¸</span>
                  </EditProfileFork.ContentLine>
                  <EditProfileFork.ContentLine style={{ marginTop: '16px' }}>
                    <RadioGroup
                      row
                      aria-labelledby="demo-row-radio-buttons-group-label"
                      name="row-radio-buttons-group"
                    >
                      <FormControlLabel value="female" control={<Radio disabled />} label="2D" />
                      <FormControlLabel value="male" control={<Radio disabled />} label="3D" />
                      <FormControlLabel value="other" control={<Radio checked disabled />} label="BIM" />
                    </RadioGroup>
                  </EditProfileFork.ContentLine>
                  <EditProfileFork.ContentLine style={{ marginTop: '16px' }}>
                    <span style={{ fontWeight: 'bold', marginLeft: '0px' }}>ÐÐ½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ñ Ð¾ ÑÐµÐ±Ðµ</span>
                  </EditProfileFork.ContentLine>
                  <EditProfileFork.ContentLine style={{ marginTop: '16px' }}>
                    <InputComponent
                      type={'TEXT_INPUT_OUTLINE_ABOUT_TEXT'}
                      valueType='text'
                      required={false}
                      widthType={'%'}
                      widthValue={100}
                      heightValue={'50px'}
                      label={"ÐÐ²ÐµÐ´Ð¸ÑÐµ Ð¾Ð¿Ð¸ÑÐ°Ð½Ð¸Ðµ"}
                      isError={false}
                      isDisabled={false}
                      labelShrinkLeft={"0px"}
                      innerLabel={null}
                      store={[ "ABOUT_TEXT", () => null ]}
                      css={{
                        fontSize: '12px',
                        position: 'relative',
                        boxSizing: 'border-box',
                        marginBottom: '0px',
                        marginTop: '0px',
                        backgroundColor: 'white'
                      }}
                    />
                  </EditProfileFork.ContentLine>
                  <EditProfileFork.ContentLine style={{ marginTop: '23px' }}>
                    <ButtonComponent
                      inner={"ÐÐ±Ð½Ð¾Ð²Ð¸ÑÑ Ð¸Ð½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ñ"} 
                      type='CONTAINED_DEFAULT' 
                      action={changeAboutText}
                      actionData={null}
                      widthType={'px'}
                      widthValue={270}
                      children={""}
                      childrenCss={undefined}
                      iconSrc={null}
                      iconCss={undefined}
                      muiIconSize={30}
                      MuiIconChildren={ArrowUpwardIcon}
                      css={{
                        position: 'relative',
                        boxSizing: 'border-box',
                        padding: '4px',
                        backgroundColor: 'rgb(217, 231, 240)',
                        color: 'black',
                        width: '56px',
                        height: '43px',
                      }}
                    />
                  </EditProfileFork.ContentLine>
                  <EditProfileFork.Delimiter style={{ marginTop: '50px', marginBottom: '42px' }} />
                  <EditProfileFork.ContentLine style={{ marginTop: '0px' }}>
                    <span style={{ fontWeight: 'bold', marginLeft: '0px' }}>ÐÑÐ¾Ð¹ÑÐ¸ Ð¿ÑÐ¾Ð²ÐµÑÐºÑ ÐºÐ²Ð°Ð»Ð¸ÑÐ¸ÐºÐ°ÑÐ¸Ð¸</span>
                  </EditProfileFork.ContentLine>
                  <EditProfileFork.ContentLine style={{ marginTop: '16px', marginBottom: '11px' }}>
                    <SelectField 
                      placeholder={"ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð¸Ð· ÑÐ¿Ð¸ÑÐºÐ°"}
                      params={{ width: 420, mb: '0px', height: 50 }}
                      data={[
                        { value: '1', label: 'ÐÐ°Ð³ÑÑÐ·ÐºÐ° ÑÐ¿Ð¸ÑÐºÐ° ÐºÐ²Ð°Ð»Ð¸ÑÐ¸ÐºÐ°ÑÐ¸Ð¹...' },
                      ]}
                      multy={true}
                      action={() => {}}
                      actionType={""}
                      actionParams={[]}
                      showIcon={true}
                      icon={null}
                      isDisabled
                      iconStyles={{
                        marginTop: '-12px',
                        marginLeft: '6px',
                        width: '34px',
                      }}
                    />
                  </EditProfileFork.ContentLine>
                  { Array(0)
                    .fill({ 
                      status: 'WHITE', 
                      data: { 
                        name: 'ÐÑÐ¸Ð±ÐºÐ° ÑÐµÑÐ²ÐµÑÐ° - ÑÐ¿Ð¸ÑÐ¾Ðº Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÐ¾Ð² Ð¿ÑÑÑ..', 
                        date: 'ÐÑÐµÐ¼Ñ Ð·Ð°Ð³ÑÑÐ·ÐºÐ¸ Ð½Ðµ Ð¿Ð¾Ð»ÑÑÐµÐ½Ð¾', 
                        statusName: 'ÐÐ¶Ð¸Ð´Ð°Ð½Ð¸Ðµ' 
                      }
                    }).map((item, index) => {

                    return (
                      <MasterDocFork.ContentLine key={index}>
                        <DocumentLine
                          status={item.status}
                          data={item.data}
                        />
                      </MasterDocFork.ContentLine>
                    )

                  })}
                </EditProfileFork.Container>
            </React.Fragment> 
            : contentType === 'EditProjectsCC'
            
            /* ---------------------------------------- */
            /* Ð±Ð°Ð·Ð¾Ð²Ð¾Ðµ Ð¾ÐºÐ½Ð¾ Ð´Ð»Ñ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ Ð¿Ð¾ÑÑÑÐ¾Ð»Ð¸Ð¾
            /* ---------------------------------------- */

            ? <React.Fragment>
                <EditProjectsEducationFork.Container style={{ paddingTop: '40px', height: 'auto', minHeight: '100vh' }} backgroundColor={backgroundColor}>
                  <EditProjectsEducationFork.CloseIconContainer>
                    <EditProjectsEducationFork.CloseIcon onClick={showrightContent}>
                      <img
                        alt={""} 
                        src={closeIcon}  
                      />
                    </EditProjectsEducationFork.CloseIcon>
                  </EditProjectsEducationFork.CloseIconContainer>
                  <EditProjectsEducationFork.ContentLine style={{ justifyContent: 'space-between', marginBottom: '0px' }}>
                    <h3 style={{ fontSize: '25px', margin: 0, marginBottom: 0 }}>ÐÐ¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½Ð½Ð¾Ð³Ð¾ Ð¿ÑÐ¾ÐµÐºÑÐ°</h3>
                  </EditProjectsEducationFork.ContentLine>
                  <EditProjectsEducationFork.ContentLine style={{ marginTop: '22px' }}>
                    <InputComponent
                      type={'TEXT_INPUT_OUTLINE_NEW_CASE'}
                      valueType='text'
                      required={false}
                      widthType={'%'}
                      widthValue={100}
                      heightValue={'50px'}
                      label={"ÐÐ²ÐµÐ´Ð¸ÑÐµ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ðµ Ð¿ÑÐ¾ÐµÐºÑÐ°"}
                      isError={false}
                      isDisabled={false}
                      labelShrinkLeft={"0px"}
                      innerLabel={null}
                      store={[ "CASE_NAME", () => null ]}
                      css={{
                        fontSize: '12px',
                        position: 'relative',
                        boxSizing: 'border-box',
                        marginBottom: '0px',
                        marginTop: '0px',
                        backgroundColor: 'white'
                      }}
                    />
                  </EditProjectsEducationFork.ContentLine>
                  <EditProjectsEducationFork.ContentLine style={{ marginTop: '20px' }}>
                    <div style={{ display: 'block', width: '27%' }}>
                      <span style={{ color: 'rgb(81, 102, 116)' }}>ÐÐ°ÑÐ°Ð»Ð¾ Ð¿ÑÐ¾ÐµÐºÑÐ°</span>
                    </div>
                    <div style={{ display: 'block', width: '23%' }} />
                    <span style={{ display: 'block', width: '16px' }}/>
                    <div style={{ display: 'block', width: '27%' }}>
                      <span style={{ color: 'rgb(81, 102, 116)' }}>ÐÐºÐ¾Ð½ÑÐ°Ð½Ð¸Ðµ Ð¿ÑÐ¾ÐµÐºÑÐ°</span>
                    </div>
                    <div style={{ display: 'block', width: '23%' }} />
                  </EditProjectsEducationFork.ContentLine>
                  <EditProjectsEducationFork.ContentLine style={{ marginTop: '16px' }}>
                    <div style={{ display: 'block', width: '27%', paddingRight: '16px' }}>
                      <SelectFieldPercent 
                        placeholder={"ÐÐ°ÑÐ°Ð»Ð¾ Ð¿ÑÐ¾ÐµÐºÑÐ°"}
                        params={{ width: 100, mb: '0px', height: 50 }}
                        data={[
                          { value: '1', label: 'ÐÐµÑÑÑ - Ð¯Ð½Ð²Ð°ÑÑ' },
                        ]}
                        multy={false}
                        action={changeSM}
                        actionType={"NEW_CASE"}
                        actionParams={[]}
                        showIcon={true}
                        icon={null}
                        iconStyles={{
                          marginTop: '-12px',
                          marginLeft: '6px',
                          width: '34px',
                        }}
                      />
                    </div>
                    <div style={{ display: 'block', width: '23%' }}>
                      <InputComponent
                        type={'TEXT_INPUT_OUTLINE_NEW_CASE'}
                        valueType='text'
                        required={false}
                        widthType={'%'}
                        widthValue={100}
                        heightValue={'50px'}
                        label={"ÐÐ²ÐµÐ´Ð¸ÑÐµ Ð³Ð¾Ð´"}
                        isError={false}
                        isDisabled={false}
                        labelShrinkLeft={"0px"}
                        innerLabel={null}
                        store={[ "CASE_SY", () => null ]}
                        css={{
                          fontSize: '12px',
                          position: 'relative',
                          boxSizing: 'border-box',
                          marginBottom: '0px',
                          marginTop: '0px',
                          backgroundColor: 'white'
                        }}
                      />
                    </div>
                    <span style={{ display: 'block', width: '16px' }}/>
                    <div style={{ display: 'block', width: '27%', paddingRight: '16px' }}>
                      <SelectFieldPercent 
                        placeholder={"ÐÐºÐ¾Ð½ÑÐ°Ð½Ð¸Ðµ Ð¿ÑÐ¾ÐµÐºÑÐ°"}
                        params={{ width: 100, mb: '0px', height: 50 }}
                        data={[
                          { value: '1', label: 'ÐÐµÑÑÑ - Ð¯Ð½Ð²Ð°ÑÑ' },
                        ]}
                        multy={false}
                        action={changeFM}
                        actionType={"NEW_CASE"}
                        actionParams={[]}
                        showIcon={true}
                        icon={null}
                        iconStyles={{
                          marginTop: '-12px',
                          marginLeft: '6px',
                          width: '34px',
                        }}
                      />
                    </div>
                    <div style={{ display: 'block', width: '23%' }}>
                      <InputComponent
                        type={'TEXT_INPUT_OUTLINE_NEW_CASE'}
                        valueType='text'
                        required={false}
                        widthType={'%'}
                        widthValue={100}
                        heightValue={'50px'}
                        label={"ÐÐ²ÐµÐ´Ð¸ÑÐµ Ð³Ð¾Ð´"}
                        isError={false}
                        isDisabled={false}
                        labelShrinkLeft={"0px"}
                        innerLabel={null}
                        store={[ "CASE_FY", () => null ]}
                        css={{
                          fontSize: '12px',
                          position: 'relative',
                          boxSizing: 'border-box',
                          marginBottom: '0px',
                          marginTop: '0px',
                          backgroundColor: 'white'
                        }}
                      />
                    </div>
                  </EditProjectsEducationFork.ContentLine>
                  { Array(actsCounter).fill(null).map((item, index) => <EditProjectsEducationFork.ContentLine style={{ marginTop: '30px' }}>
                    <InputComponent
                      type={'TEXT_INPUT_OUTLINE_NEW_CASE'}
                      valueType='text'
                      required={false}
                      widthType={'%'}
                      widthValue={50}
                      heightValue={'50px'}
                      label={"Ð¡ÑÐ¼Ð¼Ð° Ð¾Ð¿Ð»Ð°ÑÑ Ð¿Ð¾ Ð°ÐºÑÑ"}
                      isError={false}
                      isDisabled={false}
                      labelShrinkLeft={"0px"}
                      innerLabel={null}
                      store={[ "CASE_PAY", () => null ]}
                      css={{
                        fontSize: '12px',
                        position: 'relative',
                        boxSizing: 'border-box',
                        marginBottom: '0px',
                        marginTop: '0px',
                        backgroundColor: 'white'
                      }}
                    />
                    <span style={{ display: 'block', width: '16px' }}/>
                    <div style={{ display: 'block', width: '50%' }}/>
                    { index === actsCounter - 1 && actsCounter > 1 && <span
                      onClick={() => setActsCounter(prev => prev - 1)}
                      style={{
                        display: 'flex',
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'space-around',
                        position: 'absolute',
                        left: '50%',
                        marginLeft: '8px',
                        width: '24px',
                        height: '24px',
                        borderRadius: '50%',
                        backgroundColor: 'rgb(217, 231, 240)',
                        marginRight: '10px',
                        cursor: 'pointer'
                      }}
                    >
                      <img
                        alt={""}
                        src={plus}
                        style={{ display: 'block', width: '14px', transform: 'rotate(45deg)' }}
                      />
                    </span> }
                  </EditProjectsEducationFork.ContentLine> )}
                  <EditProjectsEducationFork.ContentLine>
                    <div 
                      onClick={() => setActsCounter(prev => prev < 3 ? prev + 1 : prev)}
                      style={{ 
                        display: 'flex', 
                        flexDirection: 'row', 
                        alignItems: 'center', 
                        marginTop: '20px',
                        marginBottom: '20px', 
                        cursor: 'pointer'
                      }}
                    >
                      <span
                        style={{
                          display: 'flex',
                          flexDirection: 'row',
                          alignItems: 'center',
                          justifyContent: 'space-around',
                          position: 'relative',
                          width: '24px',
                          height: '24px',
                          borderRadius: '50%',
                          backgroundColor: 'rgb(217, 231, 240)',
                          marginRight: '10px',
                          cursor: 'pointer',
                          filter: actsCounter < 3 ? 'grayscale(0)' : 'grayscale(1)'
                        }}
                      >
                        <img
                          alt={""}
                          src={plus}
                          style={{ display: 'block', width: '14px' }}
                        />
                      </span>
                      <span>ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ ÐµÑÐµ Ð¾Ð´Ð¸Ð½ Ð°ÐºÑ</span>
                    </div>
                  </EditProjectsEducationFork.ContentLine>
                  <span
                    style={{
                      display: 'block',
                      position: 'relative',
                      width: '600px',
                      lineHeight: '22px',
                      backgroundColor: 'rgb(253, 237, 237)',
                      padding: '14px',
                      paddingLeft: '20px',
                      borderRadius: '4px',
                      marginTop: '3px',
                      marginBottom: '29px'
                    }}
                  >{"ÐÐ½Ð¸Ð¼Ð°Ð½Ð¸Ðµ! ÐÐµÐ¹ÑÑÐ²ÑÐµÑ Ð²ÑÐµÐ¼ÐµÐ½Ð½Ð¾Ðµ Ð¾Ð³ÑÐ°Ð½Ð¸ÑÐµÐ½Ð¸Ðµ Ð½Ð° Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ ÑÐ°Ð¹Ð»Ð¾Ð² - Ð¼Ð¾Ð¶Ð½Ð¾ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑ Ð½Ðµ Ð±Ð¾Ð»ÐµÐµ 1 Ð¾Ð´Ð½Ð¾Ð³Ð¾ ÑÐ°Ð¹Ð»Ð°, ÑÐµÐºÐ¾Ð¼ÐµÐ½Ð´ÑÐµÐ¼ÑÐµ ÑÐ¾ÑÐ¼Ð°ÑÑ txt Ð¸ jpg"}</span>
                  <EditProjectsEducationFork.ContentLine style={{ marginBottom: '8px' }}>
                    <span style={{ color: '#516674' }}>
                      <i style={{ fontWeight: 'bold', fontStyle: 'normal' }}>ÐÐ»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ðº Ð¿ÑÐ¾ÐµÐºÑÑ</i> ( Ð½ÐµÐ¾Ð±ÑÐ·Ð°ÑÐµÐ»ÑÐ½Ð¾ )
                    </span>
                  </EditProjectsEducationFork.ContentLine>
                  <EditProjectsEducationFork.ContentLine>
                    <span style={{ color: '#516674', lineHeight: '22px' }}>
                      ÐÐ¾Ð±Ð°Ð²ÑÑÐµ ÑÐ°Ð¹Ð»Ñ Ð¿Ð¾ Ð¿ÑÐ¾ÐµÐºÑÑ Ð² ÑÐ¾ÑÐ¼Ð°ÑÐµ .pdf Ð¸Ð»Ð¸ .jpg<br/>
                      ÐÐ°ÐºÑÐ¸Ð¼Ð°Ð»ÑÐ½Ð¾ 3 ÑÐ°Ð¹Ð»Ð°, Ð´Ð¾ 100 ÐÐ±<br/>
                      ÐÑÐµÐ²ÑÑ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑÑ Ð¸Ð· Ð¿ÐµÑÐ²Ð¾Ð³Ð¾ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½Ð½Ð¾Ð³Ð¾ ÑÐ°Ð¹Ð»Ð°
                    </span>
                  </EditProjectsEducationFork.ContentLine>
                  <EditProjectsEducationFork.ContentLine style={{ marginTop: '20px' }}>
                    <ButtonComponent
                      inner={'ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ Ð²Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ'} 
                      type='UPLOAD' 
                      action={() => {}}
                      actionData={[ newCaseFile ]}
                      widthType={'px'}
                      widthValue={280}
                      children={''}
                      childrenCss={undefined}
                      iconSrc={null}
                      iconCss={undefined}
                      muiIconSize={null}
                      MuiIconChildren={EmailIcon}
                      css={{
                        backgroundColor: 'rgb(217, 231, 240)',
                        color: 'rgb(81, 102, 116)',
                        fontSize: '12px',
                        height: '46px',
                        borderRadius: '6px',
                        position: 'relative',
                        boxSizing: 'border-box',
                      }}
                    />
                  </EditProjectsEducationFork.ContentLine>
                  { localImage && <img
                    alt={""}
                    src={localImage}
                    style={{
                      display: 'block',
                      position: 'relative',
                      width: '50%',
                      marginTop: '29px',
                      borderRadius: '6px',
                      boxShadow: '0px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)'
                    }}
                  /> }
                  <EditProjectsEducationFork.ContentLine style={{ marginTop: '30px', marginBottom: '8px' }}>
                    <span 
                      style={{ color: '#516674' }}>
                        <i style={{ fontWeight: 'bold', fontStyle: 'normal' }}>ÐÐ»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð¸ Ð¿ÑÐµÐ²ÑÑ</i> ( Ð½ÐµÐ¾Ð±ÑÐ·Ð°ÑÐµÐ»ÑÐ½Ð¾ )
                      </span>
                  </EditProjectsEducationFork.ContentLine>
                  <EditProjectsEducationFork.ContentLine>
                    <span style={{ color: '#516674', lineHeight: '22px' }}>
                      ÐÐ¾Ð±Ð°Ð²ÑÑÐµ ÑÐ°Ð¹Ð»Ñ Ð¿Ð¾ Ð¿ÑÐ¾ÐµÐºÑÑ Ð² ÑÐ¾ÑÐ¼Ð°ÑÐµ .pdf Ð¸Ð»Ð¸ .jpg<br/>
                      ÐÐ°ÐºÑÐ¸Ð¼Ð°Ð»ÑÐ½Ð¾ 3 ÑÐ°Ð¹Ð»Ð°, Ð´Ð¾ 100 ÐÐ±<br/>
                      ÐÑÐµÐ²ÑÑ Ð´Ð¾Ð±Ð°Ð²Ð¸ÑÑÑ Ð¸Ð· Ð¿ÐµÑÐ²Ð¾Ð³Ð¾ Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½Ð½Ð¾Ð³Ð¾ ÑÐ°Ð¹Ð»Ð°
                    </span>
                  </EditProjectsEducationFork.ContentLine>
                  <EditProjectsEducationFork.ContentLine style={{ marginTop: '20px' }}>
                    <ButtonComponent
                      inner={"ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ ÑÐ°Ð¹Ð»Ñ"} 
                      type='CONTAINED_DISABLED' 
                      action={changeAboutText}
                      actionData={null}
                      widthType={'px'}
                      widthValue={280}
                      children={""}
                      childrenCss={undefined}
                      iconSrc={null}
                      iconCss={undefined}
                      muiIconSize={30}
                      MuiIconChildren={ArrowUpwardIcon}
                      css={{
                        position: 'relative',
                        boxSizing: 'border-box',
                        padding: '4px',
                        backgroundColor: 'rgb(217, 231, 240)',
                        color: 'black',
                        width: '56px',
                        height: '46px',
                      }}
                    />
                  </EditProjectsEducationFork.ContentLine>
                  <EditProjectsEducationFork.ContentLine style={{ marginTop: '28px' }}>
                    <span style={{ fontWeight: 'bold' }}>ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ Ð¿Ð°ÑÐ°Ð¼ÐµÑÑÑ Ð¾Ð±ÑÐµÐºÑÐ°</span>
                  </EditProjectsEducationFork.ContentLine>
                  <EditProjectsEducationFork.ContentLine style={{ marginTop: '18px' }}>
                    <InputComponent
                      type={'TEXT_INPUT_OUTLINE_NEW_CASE'}
                      valueType='text'
                      required={false}
                      widthType={'%'}
                      widthValue={50}
                      heightValue={'50px'}
                      label={"ÐÐ»Ð¾ÑÐ°Ð´Ñ, ÐºÐ².Ð¼."}
                      isError={false}
                      isDisabled={false}
                      labelShrinkLeft={"0px"}
                      innerLabel={null}
                      store={[ "CASE_P1", () => null ]}
                      css={{
                        fontSize: '12px',
                        position: 'relative',
                        boxSizing: 'border-box',
                        marginBottom: '0px',
                        marginTop: '0px',
                        backgroundColor: 'white'
                      }}
                    />
                    <span style={{ display: 'block', width: '16px' }}/>
                    <InputComponent
                      type={'TEXT_INPUT_OUTLINE_NEW_CASE'}
                      valueType='text'
                      required={false}
                      widthType={'%'}
                      widthValue={50}
                      heightValue={'50px'}
                      label={"ÐÑÑÐ¾ÑÐ° Ð¾Ð±ÑÐµÐºÑÐ°, Ð¼."}
                      isError={false}
                      isDisabled={false}
                      labelShrinkLeft={"0px"}
                      innerLabel={null}
                      store={[ "CASE_P2", () => null ]}
                      css={{
                        fontSize: '12px',
                        position: 'relative',
                        boxSizing: 'border-box',
                        marginBottom: '0px',
                        marginTop: '0px',
                        backgroundColor: 'white'
                      }}
                    />
                  </EditProjectsEducationFork.ContentLine>
                  <EditProjectsEducationFork.ContentLine style={{ marginTop: '16px' }}>
                    <InputComponent
                      type={'TEXT_INPUT_OUTLINE_NEW_CASE'}
                      valueType='text'
                      required={false}
                      widthType={'%'}
                      widthValue={50}
                      heightValue={'50px'}
                      label={"ÐÐ»Ð¾ÑÐ°Ð´Ñ, ÐºÐ².Ð¼."}
                      isError={false}
                      isDisabled={false}
                      labelShrinkLeft={"0px"}
                      innerLabel={null}
                      store={[ "CASE_P3", () => null ]}
                      css={{
                        fontSize: '12px',
                        position: 'relative',
                        boxSizing: 'border-box',
                        marginBottom: '0px',
                        marginTop: '0px',
                        backgroundColor: 'white'
                      }}
                    />
                    <span style={{ display: 'block', width: '16px' }}/>
                    <SelectFieldPercent 
                      placeholder={"Ð ÐµÐ³Ð¸Ð¾Ð½ Ð¿ÑÐ¾ÐµÐºÑÐ°"}
                      params={{ width: 50, mb: '0px', height: 50 }}
                      data={[
                        { value: '1', label: 'ÐÑÐ±Ð¾Ð¹ Ð¿ÑÐ¾Ð¸Ð·Ð²Ð¾Ð»ÑÐ½ÑÐ¹ Ð³Ð¾ÑÐ¾Ð´' },
                      ]}
                      multy={false}
                      action={changeCaseRegion}
                      actionType={"NEW_CASE"}
                      actionParams={[]}
                      showIcon={true}
                      icon={null}
                      iconStyles={{
                        marginTop: '-12px',
                        marginLeft: '6px',
                        width: '34px',
                      }}
                    />
                  </EditProjectsEducationFork.ContentLine>
                  <EditProjectsEducationFork.ContentLine style={{ marginTop: '26px' }}>
                    <span style={{ fontWeight: 'bold' }}>ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ Ð¾Ð¿Ð¸ÑÐ°Ð½Ð¸Ðµ Ð¾Ð±ÑÐµÐºÑÐ°</span>
                  </EditProjectsEducationFork.ContentLine>
                  <EditProjectsEducationFork.ContentLine style={{ marginTop: '18px' }}>
                    <InputComponent
                      type={'TEXT_INPUT_OUTLINE_NEW_CASE'}
                      valueType='text'
                      required={false}
                      widthType={'%'}
                      widthValue={100}
                      heightValue={'50px'}
                      label={"ÐÐ¾Ð´ÑÐ¾Ð±Ð½Ð¾ Ð¾Ð¿Ð¸ÑÐ¸ÑÐµ Ð²Ð°ÑÐ¸ Ð·Ð°Ð´Ð°ÑÐ¸ Ð¸ Ð¾Ð±ÑÐ·Ð°Ð½Ð½Ð¾ÑÑÐ¸ Ð½Ð° Ð¿ÑÐ¾ÐµÐºÑÐµ"}
                      isError={false}
                      isDisabled={false}
                      labelShrinkLeft={"0px"}
                      innerLabel={null}
                      store={[ "CASE_TEXT", () => null ]}
                      css={{
                        fontSize: '12px',
                        position: 'relative',
                        boxSizing: 'border-box',
                        marginBottom: '0px',
                        marginTop: '0px',
                        backgroundColor: 'white'
                      }}
                    />
                  </EditProjectsEducationFork.ContentLine>
                  <EditProjectsEducationFork.ContentLine style={{ marginTop: '16px' }}>
                    <SelectFieldPercent 
                      placeholder={"Ð¡Ð¿ÐµÑÐ¸Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ð¸ Ð²Ð°ÑÐµÐ³Ð¾ Ð¿ÑÐ¾ÐµÐºÑÐ°"}
                      params={{ width: 100, mb: '0px', height: 50 }}
                      data={[
                        { value: 'ÐÐ½Ð¶ÐµÐ½ÐµÑÐ½Ð¾-Ð³ÐµÐ¾Ð´ÐµÐ·Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ', label: 'ÐÐµÐ¾Ð´ÐµÐ·Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ' },
                        { value: 'ÐÐ½Ð¶ÐµÐ½ÐµÑÐ½Ð¾-Ð³ÐµÐ¾Ð»Ð¾Ð³Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ', label: 'ÐÐµÐ¾Ð»Ð¾Ð³Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ' },
                        { value: 'ÐÐ½Ð¶ÐµÐ½ÐµÑÐ½Ð¾-Ð³Ð¸Ð´ÑÐ¾Ð¼ÐµÑÐµÐ¾ÑÐ¾Ð»Ð¾Ð³Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ', label: 'ÐÐ¸Ð´ÑÐ¾Ð¼ÐµÑÐµÐ¾ÑÐ¾Ð»Ð¾Ð³Ð¸Ñ' },
                        { value: 'ÐÐ½Ð¶ÐµÐ½ÐµÑÐ½Ð¾-ÑÐºÐ¾Ð»Ð¾Ð³Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ', label: 'Ð­ÐºÐ¾Ð»Ð¾Ð³Ð¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ' },
                        { value: 'ÐÑÑÐ¾ÑÐ¸ÐºÐ¾-ÐºÑÐ»ÑÑÑÑÐ½ÑÐµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ', label: 'ÐÑÑÐ¾ÑÐ¸ÑÐµÑÐºÐ¸Ðµ Ð¸Ð·ÑÑÐºÐ°Ð½Ð¸Ñ' },
                        { value: 'ÐÐ±ÑÐ»ÐµÐ´Ð¾Ð²Ð°Ð½Ð¸Ðµ ÑÑÑÐ¾Ð¸ÑÐµÐ»ÑÐ½ÑÑ ÐºÐ¾Ð½ÑÑÑÑÐºÑÐ¸Ð¹', label: 'ÐÐ±ÑÐ»ÐµÐ´Ð¾Ð²Ð°Ð½Ð¸Ðµ ÐºÐ¾Ð½ÑÑÑÑÐºÑÐ¸Ð¹' },
                        { value: 'ÐÐµÐ½ÐµÑÐ°Ð»ÑÐ½ÑÐ¹ Ð¿Ð»Ð°Ð½', label: 'ÐÐµÐ½ÐµÑÐ°Ð»ÑÐ½ÑÐ¹ Ð¿Ð»Ð°Ð½' },
                        { value: 'ÐÐ²ÑÐ¾Ð¼Ð¾Ð±Ð¸Ð»ÑÐ½ÑÐµ Ð´Ð¾ÑÐ¾Ð³Ð¸', label: 'ÐÐ²ÑÐ¾Ð¼Ð¾Ð±Ð¸Ð»ÑÐ½ÑÐµ Ð´Ð¾ÑÐ¾Ð³Ð¸' },
                        { value: 'ÐÑÑÐ¸ÑÐµÐºÑÑÑÐ½ÑÐµ ÑÐµÑÐµÐ½Ð¸Ñ', label: 'ÐÑÑÐ¸ÑÐµÐºÑÑÑÐ½ÑÐµ ÑÐµÑÐµÐ½Ð¸Ñ' },
                        { value: 'ÐÐ¾Ð½ÑÑÑÑÐºÑÐ¸Ð¸ Ð¶ÐµÐ»ÐµÐ·Ð¾Ð±ÐµÑÐ¾Ð½Ð½ÑÐµ', label: 'ÐÐ¾Ð½ÑÑÑÑÐºÑÐ¸Ð¸ Ð¶ÐµÐ»ÐµÐ·Ð¾Ð±ÐµÑÐ¾Ð½Ð½ÑÐµ' },
                        { value: 'ÐÐ¾Ð½ÑÑÑÑÐºÑÐ¸Ð¸ Ð¼ÐµÑÐ°Ð»Ð»Ð¸ÑÐµÑÐºÐ¸Ðµ', label: 'ÐÐ¾Ð½ÑÑÑÑÐºÑÐ¸Ð¸ Ð¼ÐµÑÐ°Ð»Ð»Ð¸ÑÐµÑÐºÐ¸Ðµ' },
                        { value: 'ÐÐ¸Ð´ÑÐ¾ÑÐµÑÐ½Ð¸ÑÐµÑÐºÐ¸Ðµ ÑÐµÑÐµÐ½Ð¸Ñ ', label: 'ÐÐ¸Ð´ÑÐ¾ÑÐµÑÐ½Ð¸ÑÐµÑÐºÐ¸Ðµ ÑÐµÑÐµÐ½Ð¸Ñ' },
                        { value: 'Ð­Ð»ÐµÐºÑÑÐ¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ', label: 'Ð­Ð»ÐµÐºÑÑÐ¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ' },
                        { value: 'Ð­Ð»ÐµÐºÑÑÐ¸ÑÐµÑÐºÐ¾Ðµ Ð¾ÑÐ²ÐµÑÐµÐ½Ð¸Ðµ', label: 'Ð­Ð»ÐµÐºÑÑÐ¸ÑÐµÑÐºÐ¾Ðµ Ð¾ÑÐ²ÐµÑÐµÐ½Ð¸Ðµ' },
                        { value: 'Ð¡Ð¸Ð»Ð¾Ð²Ð¾Ðµ ÑÐ»ÐµÐºÑÑÐ¾Ð¾Ð±Ð¾ÑÑÐ´Ð¾Ð²Ð°Ð½Ð¸Ðµ', label: 'Ð¡Ð¸Ð»Ð¾Ð²Ð¾Ðµ ÑÐ»ÐµÐºÑÑÐ¾Ð¾Ð±Ð¾ÑÑÐ´Ð¾Ð²Ð°Ð½Ð¸Ðµ' },
                        { value: 'ÐÐ¾Ð´Ð¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ Ð¸ ÐºÐ°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ', label: 'ÐÐ¾Ð´Ð¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ Ð¸ ÐºÐ°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ' },
                        { value: 'ÐÑÐ¾Ð¿Ð»ÐµÐ½Ð¸Ðµ, Ð²ÐµÐ½ÑÐ¸Ð»ÑÑÐ¸Ñ, ÐºÐ¾Ð½Ð´Ð¸ÑÐ¸Ð¾Ð½Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ', label: 'ÐÑÐ¾Ð¿Ð»ÐµÐ½Ð¸Ðµ Ð¸ Ð²ÐµÐ½ÑÐ¸Ð»ÑÑÐ¸Ñ' },
                        { value: 'ÐÐ¾Ð·Ð´ÑÑÐ¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ', label: 'ÐÐ¾Ð·Ð´ÑÑÐ¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ' },
                        { value: 'Ð¥Ð¾Ð»Ð¾Ð´Ð¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ', label: 'Ð¥Ð¾Ð»Ð¾Ð´Ð¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ' },
                        { value: 'Ð¢ÐµÐ¿Ð»Ð¾Ð¼ÐµÑÐ°Ð½Ð¸ÑÐµÑÐºÐ¸Ðµ ÑÐµÑÐµÐ½Ð¸Ñ', label: 'Ð¢ÐµÐ¿Ð»Ð¾Ð¼ÐµÑÐ°Ð½Ð¸ÑÐµÑÐºÐ¸Ðµ ÑÐµÑÐµÐ½Ð¸Ñ' },
                        { value: 'Ð¡ÐµÑÐ¸ ÑÐ²ÑÐ·Ð¸', label: 'Ð¡ÐµÑÐ¸ ÑÐ²ÑÐ·Ð¸' },
                        { value: 'ÐÐ¾Ð¶Ð°ÑÐ½Ð°Ñ Ð±ÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð¾ÑÑÑ', label: 'ÐÐ¾Ð¶Ð°ÑÐ½Ð°Ñ Ð±ÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð¾ÑÑÑ' },
                        { value: 'ÐÐ°Ð·Ð¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ', label: 'ÐÐ°Ð·Ð¾ÑÐ½Ð°Ð±Ð¶ÐµÐ½Ð¸Ðµ' },
                        { value: 'Ð¢ÐµÑÐ½Ð¾Ð»Ð¾Ð³Ð¸Ñ Ð¿ÑÐ¾Ð¸Ð·Ð²Ð¾Ð´ÑÑÐ²Ð°', label: 'Ð¢ÐµÑÐ½Ð¾Ð»Ð¾Ð³Ð¸Ñ Ð¿ÑÐ¾Ð¸Ð·Ð²Ð¾Ð´ÑÑÐ²Ð°' },
                        { value: 'ÐÐ²ÑÐ¾Ð¼Ð°ÑÐ¸Ð·Ð°ÑÐ¸Ñ', label: 'ÐÐ²ÑÐ¾Ð¼Ð°ÑÐ¸Ð·Ð°ÑÐ¸Ñ' },
                        { value: 'ÐÑÐ¾ÐµÐºÑ Ð¾ÑÐ³Ð°Ð½Ð¸Ð·Ð°ÑÐ¸Ð¸ ÑÑÑÐ¾Ð¸ÑÐµÐ»ÑÑÑÐ²Ð° / ÑÐ½Ð¾ÑÑ / Ð´ÐµÐ¼Ð¾Ð½ÑÐ°Ð¶Ñ', label: 'ÐÑÐ¾ÐµÐºÑ ÑÑÑÐ¾Ð¸ÑÐµÐ»ÑÑÑÐ²Ð° Ð¸ ÑÐ½Ð¾ÑÐ°' },
                        { value: 'ÐÑÑÐ°Ð½Ð° Ð¾ÐºÑÑÐ¶Ð°ÑÑÐµÐ¹ ÑÑÐµÐ´Ñ', label: 'ÐÑÑÐ°Ð½Ð° Ð¾ÐºÑÑÐ¶Ð°ÑÑÐµÐ¹ ÑÑÐµÐ´Ñ' },
                        { value: 'ÐÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð°Ñ ÑÐºÑÐ¿Ð»ÑÐ°ÑÐ°ÑÐ¸Ñ Ð¾Ð±ÑÐµÐºÑÐ°', label: 'ÐÐµÐ·Ð¾Ð¿Ð°ÑÐ½Ð°Ñ ÑÐºÑÐ¿Ð»ÑÐ°ÑÐ°ÑÐ¸Ñ Ð¾Ð±ÑÐµÐºÑÐ°' },
                        { value: 'Ð­Ð½ÐµÑÐ³ÐµÑÐ¸ÑÐµÑÐºÐ°Ñ ÑÑÑÐµÐºÑÐ¸Ð²Ð½Ð¾ÑÑÑ', label: 'Ð­Ð½ÐµÑÐ³ÐµÑÐ¸ÑÐµÑÐºÐ°Ñ ÑÑÑÐµÐºÑÐ¸Ð²Ð½Ð¾ÑÑÑ' },
                        { value: 'ÐÐ±ÐµÑÐ¿ÐµÑÐµÐ½Ð¸Ðµ Ð´Ð¾ÑÑÑÐ¿Ð° Ð¸Ð½Ð²Ð°Ð»Ð¸Ð´Ð¾Ð²', label: 'ÐÐ±ÐµÑÐ¿ÐµÑÐµÐ½Ð¸Ðµ Ð´Ð¾ÑÑÑÐ¿Ð° Ð¸Ð½Ð²Ð°Ð»Ð¸Ð´Ð¾Ð²' },
                        { value: 'ÐÐµÑÐ¾Ð¿ÑÐ¸ÑÑÐ¸Ñ Ð¿Ð¾ Ð³ÑÐ°Ð¶Ð´Ð°Ð½ÑÐºÐ¾Ð¹ Ð¾Ð±Ð¾ÑÐ¾Ð½Ðµ Ð¸ Ð¿ÑÐµÐ´ÑÐ¿ÑÐµÐ¶Ð´ÐµÐ½Ð¸Ñ ÑÑÐµÐ·Ð²ÑÑÐ°Ð¹Ð½ÑÑ ÑÐ¸ÑÑÐ°ÑÐ¸Ð¹', label: 'ÐÑÐ°Ð¶Ð´Ð°Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð¾ÑÐ¾Ð½Ð°' },
                        { value: 'Ð¡Ð¼ÐµÑÐ½Ð°Ñ Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÐ°ÑÐ¸Ñ', label: 'Ð¡Ð¼ÐµÑÐ½Ð°Ñ Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÐ°ÑÐ¸Ñ' },
                        { value: 'ÐÐ½Ð°Ñ Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÐ°ÑÐ¸Ñ', label: 'ÐÐ½Ð°Ñ Ð´Ð¾ÐºÑÐ¼ÐµÐ½ÑÐ°ÑÐ¸Ñ' }
                      ]}
                      multy={false}
                      action={changeCaseTags}
                      actionType={"NEW_CASE"}
                      actionParams={[]}
                      showIcon={true}
                      icon={null}
                      iconStyles={{
                        marginTop: '-12px',
                        marginLeft: '6px',
                        width: '34px',
                      }}
                    />
                  </EditProjectsEducationFork.ContentLine>
                  <EditProjectsEducationFork.ContentLine style={{ justifyContent: 'space-around', margin: '30px 0px 40px' }}>
                    <ButtonComponent
                      inner={"Ð¡Ð¾ÑÑÐ°Ð½Ð¸ÑÑ Ð½Ð¾Ð²ÑÐ¹ Ð¿ÑÐ¾ÐµÐºÑ"} 
                      type='CONTAINED_DEFAULT' 
                      action={sendCase}
                      actionData={null}
                      widthType={'px'}
                      widthValue={240}
                      children={""}
                      childrenCss={undefined}
                      iconSrc={null}
                      iconCss={undefined}
                      muiIconSize={30}
                      MuiIconChildren={ArrowUpwardIcon}
                      css={{
                        position: 'relative',
                        boxSizing: 'border-box',
                        padding: '4px',
                        backgroundColor: blueColor2,
                        color: 'white',
                        width: '56px',
                        height: '43px',
                      }}
                    />
                  </EditProjectsEducationFork.ContentLine>
                </EditProjectsEducationFork.Container>
              </React.Fragment>
              : contentType === 'EditEducationCC'
            
              /* ---------------------------------------- */
              /* Ð±Ð°Ð·Ð¾Ð²Ð¾Ðµ Ð¾ÐºÐ½Ð¾ Ð´Ð»Ñ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ñ Ð¾Ð¿ÑÐ° ÑÐ°Ð±Ð¾ÑÑ
              /* ---------------------------------------- */
  
              ? <React.Fragment>
                  <EditProjectsEducationFork.Container style={{ paddingTop: '40px', height: 'auto', minHeight: '100vh' }} backgroundColor={backgroundColor}>
                    <EditProjectsEducationFork.CloseIconContainer>
                      <EditProjectsEducationFork.CloseIcon onClick={showrightContent}>
                        <img
                          alt={""} 
                          src={closeIcon}  
                        />
                      </EditProjectsEducationFork.CloseIcon>
                    </EditProjectsEducationFork.CloseIconContainer>
                    <EditProjectsEducationFork.ContentLine style={{ justifyContent: 'space-between', marginBottom: '0px' }}>
                      <h3 style={{ fontSize: '25px', margin: 0, marginBottom: 0 }}>ÐÐ°Ð½Ð½ÑÐµ Ð¾Ð± Ð¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°Ð½Ð¸Ð¸</h3>
                    </EditProjectsEducationFork.ContentLine>

                    { Array(educationCounter).fill(null).map((item, index) => <React.Fragment>  
                      <EditProjectsEducationFork.ContentLine style={{ marginTop: '22px' }}>
                        <InputComponent
                          type={'TEXT_INPUT_OUTLINE_NEW_EDUCATION_SKILLS'}
                          valueType='text'
                          required={false}
                          widthType={'%'}
                          widthValue={77}
                          heightValue={'50px'}
                          label={"ÐÐ°Ð·Ð²Ð°Ð½Ð¸Ðµ ÐºÑÑÑÐ° Ð¸Ð»Ð¸ ÑÑÐµÐ±Ð½Ð¾Ð³Ð¾ Ð·Ð°Ð²ÐµÐ´ÐµÐ½Ð¸Ñ"}
                          isError={false}
                          isDisabled={false}
                          labelShrinkLeft={"0px"}
                          innerLabel={null}
                          store={[ "EDUCATION_BLOCK_1_TITLE", () => null ]}
                          css={{
                            fontSize: '12px',
                            position: 'relative',
                            boxSizing: 'border-box',
                            marginBottom: '0px',
                            marginTop: '0px',
                            backgroundColor: 'white'
                          }}
                        />
                        <span style={{ display: 'block', width: '16px' }}/>
                        <div style={{ display: 'block', width: '23%' }}>
                          <InputComponent
                            type={'TEXT_INPUT_OUTLINE_NEW_EDUCATION_SKILLS'}
                            valueType='text'
                            required={false}
                            widthType={'%'}
                            widthValue={100}
                            heightValue={'50px'}
                            label={"ÐÐ¾Ð´ Ð¾ÐºÐ¾Ð½ÑÐ°Ð½Ð¸Ñ"}
                            isError={false}
                            isDisabled={false}
                            labelShrinkLeft={"0px"}
                            innerLabel={null}
                            store={[ "EDUCATION_BLOCK_1_FINISH", () => null ]}
                            css={{
                              fontSize: '12px',
                              position: 'relative',
                              boxSizing: 'border-box',
                              marginBottom: '0px',
                              marginTop: '0px',
                              backgroundColor: 'white'
                            }}
                          />
                        </div>
                        { index === educationCounter - 1 && educationCounter > 1 && <span
                          onClick={() => setEducationCounter(prev => prev - 1)}
                          style={{
                            display: 'flex',
                            flexDirection: 'row',
                            alignItems: 'center',
                            justifyContent: 'space-around',
                            position: 'absolute',
                            left: '100%',
                            marginLeft: '14px',
                            width: '24px',
                            height: '24px',
                            borderRadius: '50%',
                            backgroundColor: 'rgb(217, 231, 240)',
                            marginRight: '10px',
                            cursor: 'pointer'
                          }}
                        >
                          <img
                            alt={""}
                            src={plus}
                            style={{ display: 'block', width: '14px', transform: 'rotate(45deg)' }}
                          />
                        </span> }
                      </EditProjectsEducationFork.ContentLine>
                      <EditProjectsEducationFork.ContentLine style={{ marginTop: '16px' }}>
                        <InputComponent
                          type={'TEXT_INPUT_OUTLINE_NEW_EDUCATION_SKILLS'}
                          valueType='text'
                          required={false}
                          widthType={'%'}
                          widthValue={100}
                          heightValue={'50px'}
                          label={"Ð¡Ð¿ÐµÑÐ¸Ð°Ð»ÑÐ½Ð¾ÑÑÑ Ð¸Ð»Ð¸ Ð¿Ð¾Ð²ÑÑÐµÐ½Ð¸Ðµ ÐºÐ²Ð°Ð»Ð¸ÑÐ¸ÐºÐ°ÑÐ¸Ð¸"}
                          isError={false}
                          isDisabled={false}
                          labelShrinkLeft={"0px"}
                          innerLabel={null}
                          store={[ "EDUCATION_BLOCK_1_SPECIAL", () => null ]}
                          css={{
                            fontSize: '12px',
                            position: 'relative',
                            boxSizing: 'border-box',
                            marginBottom: '0px',
                            marginTop: '0px',
                            backgroundColor: 'white'
                          }}
                        />
                      </EditProjectsEducationFork.ContentLine>
                    </React.Fragment> )}

                    <EditProjectsEducationFork.ContentLine>
                      <div 
                        onClick={() => { false && setEducationCounter(prev => prev < 3 ? prev + 1 : prev) }}
                        style={{ 
                          display: 'flex', 
                          flexDirection: 'row', 
                          alignItems: 'center', 
                          marginTop: '20px',
                          marginBottom: '20px', 
                          cursor: 'pointer'
                        }}
                      >
                        <span
                          style={{
                            display: 'flex',
                            flexDirection: 'row',
                            alignItems: 'center',
                            justifyContent: 'space-around',
                            position: 'relative',
                            width: '24px',
                            height: '24px',
                            borderRadius: '50%',
                            backgroundColor: 'rgb(217, 231, 240)',
                            marginRight: '10px',
                            cursor: 'pointer',
                            filter: educationCounter < 3 ? 'grayscale(0)' : 'grayscale(1)'
                          }}
                        >
                          <img
                            alt={""}
                            src={plus}
                            style={{ display: 'block', width: '14px' }}
                          />
                        </span>
                        <span>ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ Ð¼ÐµÑÑÐ¾ Ð¾Ð±ÑÑÐµÐ½Ð¸Ñ ( ÐÑÐµÐ¼ÐµÐ½Ð½Ð¾ Ð·Ð°Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð°Ð½Ð½Ð¾ 20.08 )</span>
                      </div>
                    </EditProjectsEducationFork.ContentLine>
                    <EditProjectsEducationFork.ContentLine style={{ justifyContent: 'space-around', margin: '19px 0px 30px' }}>
                      <ButtonComponent
                        inner={"Ð¡Ð¾ÑÑÐ°Ð½Ð¸ÑÑ Ð¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°Ð½Ð¸Ðµ"} 
                        type='CONTAINED_DEFAULT' 
                        action={sendEducation}
                        actionData={null}
                        widthType={'px'}
                        widthValue={240}
                        children={""}
                        childrenCss={undefined}
                        iconSrc={null}
                        iconCss={undefined}
                        muiIconSize={30}
                        MuiIconChildren={ArrowUpwardIcon}
                        css={{
                          position: 'relative',
                          boxSizing: 'border-box',
                          padding: '4px',
                          backgroundColor: blueColor2,
                          color: 'white',
                          width: '56px',
                          height: '43px',
                        }}
                      />
                    </EditProjectsEducationFork.ContentLine>
                    <EditProjectsEducationFork.ContentLine style={{ justifyContent: 'space-between', marginBottom: '0px', marginTop: '8px' }}>
                      <h3 style={{ fontSize: '25px', margin: 0, marginBottom: 0 }}>ÐÐ¿ÑÑ ÑÐ°Ð±Ð¾ÑÑ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ</h3>
                    </EditProjectsEducationFork.ContentLine>

                    { Array(skillCounter).fill(null).map((item, index) => <React.Fragment>
                      
                      { index > 0 && 
                        
                        <span
                          style={{
                            display: 'block',
                            position: 'relative',
                            width: '100%',
                            textAlign: 'center',
                            marginTop: '19px',
                            opacity: 0.8
                          }}
                        >
                          ÐÐ¾Ð²Ð¾Ðµ Ð¼ÐµÑÑÐ¾ ÑÐ°Ð±Ð¾ÑÑ
                        </span> 
                        
                      }

                      <EditProjectsEducationFork.ContentLine style={{ marginTop: '22px' }}>
                        <InputComponent
                          type={'TEXT_INPUT_OUTLINE_NEW_EDUCATION_SKILLS'}
                          valueType='text'
                          required={false}
                          widthType={'%'}
                          widthValue={100}
                          heightValue={'50px'}
                          label={"ÐÐ°Ð·Ð²Ð°Ð½Ð¸Ðµ Ð¾ÑÐ³Ð°Ð½Ð¸Ð·Ð°ÑÐ¸Ð¸"}
                          isError={false}
                          isDisabled={false}
                          labelShrinkLeft={"0px"}
                          innerLabel={null}
                          store={[ "JOB_BLOCK_1_TITLE", () => null ]}
                          css={{
                            fontSize: '12px',
                            position: 'relative',
                            boxSizing: 'border-box',
                            marginBottom: '0px',
                            marginTop: '0px',
                            backgroundColor: 'white'
                          }}
                        />
                        { index === skillCounter - 1 && skillCounter > 1 && <span
                          onClick={() => setSkillCounter(prev => prev - 1)}
                          style={{
                            display: 'flex',
                            flexDirection: 'row',
                            alignItems: 'center',
                            justifyContent: 'space-around',
                            position: 'absolute',
                            left: '100%',
                            marginLeft: '14px',
                            width: '24px',
                            height: '24px',
                            borderRadius: '50%',
                            backgroundColor: 'rgb(217, 231, 240)',
                            marginRight: '10px',
                            cursor: 'pointer'
                          }}
                        >
                          <img
                            alt={""}
                            src={plus}
                            style={{ display: 'block', width: '14px', transform: 'rotate(45deg)' }}
                          />
                        </span> }
                      </EditProjectsEducationFork.ContentLine>
                      <EditProjectsEducationFork.ContentLine style={{ marginTop: '16px' }}>
                        <InputComponent
                          type={'TEXT_INPUT_OUTLINE_NEW_EDUCATION_SKILLS'}
                          valueType='text'
                          required={false}
                          widthType={'%'}
                          widthValue={100}
                          heightValue={'50px'}
                          label={"Ð¡Ð°Ð¹Ñ Ð¾ÑÐ³Ð°Ð½Ð¸Ð·Ð°ÑÐ¸Ð¸"}
                          isError={false}
                          isDisabled={false}
                          labelShrinkLeft={"0px"}
                          innerLabel={null}
                          store={[ "JOB_BLOCK_1_SITE", () => null ]}
                          css={{
                            fontSize: '12px',
                            position: 'relative',
                            boxSizing: 'border-box',
                            marginBottom: '0px',
                            marginTop: '0px',
                            backgroundColor: 'white'
                          }}
                        />
                      </EditProjectsEducationFork.ContentLine>
                      <EditProjectsEducationFork.ContentLine style={{ marginTop: '16px' }}>
                        <div style={{ display: 'block', width: '27%', paddingRight: '16px' }}>
                          <SelectFieldPercent 
                            placeholder={"ÐÐ°ÑÐ°Ð»Ð¾ ÑÐ°Ð±Ð¾ÑÑ"}
                            params={{ width: 100, mb: '0px', height: 50 }}
                            data={[
                              { value: '1', label: 'ÐÐµÑÑÑ - Ð¯Ð½Ð²Ð°ÑÑ' },
                            ]}
                            multy={false}
                            action={setSpec}
                            actionType={"AUTH_SPEC_TYPE"}
                            actionParams={[]}
                            showIcon={true}
                            icon={null}
                            iconStyles={{
                              marginTop: '-12px',
                              marginLeft: '6px',
                              width: '34px',
                            }}
                          />
                        </div>
                        <div style={{ display: 'block', width: '23%' }}>
                          <InputComponent
                            type={'TEXT_INPUT_OUTLINE_NEW_EDUCATION_SKILLS'}
                            valueType='text'
                            required={false}
                            widthType={'%'}
                            widthValue={100}
                            heightValue={'50px'}
                            label={"ÐÐ²ÐµÐ´Ð¸ÑÐµ Ð³Ð¾Ð´"}
                            isError={false}
                            isDisabled={false}
                            labelShrinkLeft={"0px"}
                            innerLabel={null}
                            store={[ "JOB_BLOCK_1_SY", () => null ]}
                            css={{
                              fontSize: '12px',
                              position: 'relative',
                              boxSizing: 'border-box',
                              marginBottom: '0px',
                              marginTop: '0px',
                              backgroundColor: 'white'
                            }}
                          />
                        </div>
                        <span style={{ display: 'block', width: '16px' }}/>
                        <div style={{ display: 'block', width: '27%', paddingRight: '16px' }}>
                          <SelectFieldPercent 
                            placeholder={"ÐÐºÐ¾Ð½ÑÐ°Ð½Ð¸Ðµ ÑÐ°Ð±Ð¾ÑÑ"}
                            params={{ width: 100, mb: '0px', height: 50 }}
                            data={[
                              { value: '1', label: 'ÐÐµÑÑÑ - Ð¯Ð½Ð²Ð°ÑÑ' },
                            ]}
                            multy={false}
                            action={setSpec}
                            actionType={"AUTH_SPEC_TYPE"}
                            actionParams={[]}
                            showIcon={true}
                            icon={null}
                            iconStyles={{
                              marginTop: '-12px',
                              marginLeft: '6px',
                              width: '34px',
                            }}
                          />
                        </div>
                        <div style={{ display: 'block', width: '23%' }}>
                          <InputComponent
                            type={'TEXT_INPUT_OUTLINE_NEW_EDUCATION_SKILLS'}
                            valueType='text'
                            required={false}
                            widthType={'%'}
                            widthValue={100}
                            heightValue={'50px'}
                            label={"ÐÐ²ÐµÐ´Ð¸ÑÐµ Ð³Ð¾Ð´"}
                            isError={false}
                            isDisabled={false}
                            labelShrinkLeft={"0px"}
                            innerLabel={null}
                            store={[ "JOB_BLOCK_1_FY", () => null ]}
                            css={{
                              fontSize: '12px',
                              position: 'relative',
                              boxSizing: 'border-box',
                              marginBottom: '0px',
                              marginTop: '0px',
                              backgroundColor: 'white'
                            }}
                          />
                        </div>
                      </EditProjectsEducationFork.ContentLine>
                      <EditProjectsEducationFork.ContentLine style={{ marginTop: '6px' }}>
                        <div style={{ display: 'block', width: '27%' }} />
                        <div style={{ display: 'block', width: '23%' }} />
                        <span style={{ display: 'block', width: '16px' }}/>
                        <div style={{ display: 'block', width: '27%' }}>
                          <FormGroup style={{ width: '100%', fontSize: '13px' }}>
                            <FormControlLabel 
                              control={
                                <Checkbox 
                                  disabled
                                  checked={false} 
                                  onChange={() => {}} 
                                />
                              } 
                              label="ÐÐ¾ Ð½Ð°ÑÑÐ¾ÑÑÐµÐµ Ð²ÑÐµÐ¼Ñ"
                            />
                          </FormGroup>
                        </div>
                        <div style={{ display: 'block', width: '23%' }} />
                      </EditProjectsEducationFork.ContentLine>
                      <EditProjectsEducationFork.ContentLine style={{ marginTop: '18px' }}>
                        <InputComponent
                          type={'TEXT_INPUT_OUTLINE_NEW_EDUCATION_SKILLS'}
                          valueType='text'
                          required={false}
                          widthType={'%'}
                          widthValue={100}
                          heightValue={'50px'}
                          label={"ÐÐ°ÑÐ° Ð´Ð¾Ð»Ð¶Ð½Ð¾ÑÑÑ Ð² Ð¾ÑÐ³Ð°Ð½Ð¸Ð·Ð°ÑÐ¸Ð¸"}
                          isError={false}
                          isDisabled={false}
                          labelShrinkLeft={"0px"}
                          innerLabel={null}
                          store={[ "JOB_BLOCK_1_JOB", () => null ]}
                          css={{
                            fontSize: '12px',
                            position: 'relative',
                            boxSizing: 'border-box',
                            marginBottom: '0px',
                            marginTop: '0px',
                            backgroundColor: 'white'
                          }}
                        />
                      </EditProjectsEducationFork.ContentLine>
                      <EditProjectsEducationFork.ContentLine style={{ marginTop: '16px' }}>
                        <InputComponent
                          type={'TEXT_INPUT_OUTLINE_NEW_EDUCATION_SKILLS'}
                          valueType='text'
                          required={false}
                          widthType={'%'}
                          widthValue={100}
                          heightValue={'50px'}
                          label={"ÐÐ¿Ð¸ÑÐ¸ÑÐµ Ð¿Ð¾Ð´ÑÐ¾Ð±Ð½Ð¾ Ð²Ð°ÑÐ¸ Ð¾Ð±ÑÐ·Ð°Ð½Ð½Ð¾ÑÑÐ¸ Ð½Ð° ÑÑÐ¾Ð¹ Ð´Ð¾Ð»Ð¶Ð½Ð½Ð¾ÑÑÐ¸"}
                          isError={false}
                          isDisabled={false}
                          labelShrinkLeft={"0px"}
                          innerLabel={null}
                          store={[ "JOB_BLOCK_1_JOB_TASKS", () => null ]}
                          css={{
                            fontSize: '12px',
                            position: 'relative',
                            boxSizing: 'border-box',
                            marginBottom: '0px',
                            marginTop: '0px',
                            backgroundColor: 'white'
                          }}
                        />
                      </EditProjectsEducationFork.ContentLine>
                    </React.Fragment> )}

                    <EditProjectsEducationFork.ContentLine>
                      <div 
                        onClick={() => { false && setSkillCounter(prev => prev < 6 ? prev + 1 : prev) }}
                        style={{ 
                          display: 'flex', 
                          flexDirection: 'row', 
                          alignItems: 'center', 
                          marginTop: '20px',
                          marginBottom: '20px', 
                          cursor: 'pointer'
                        }}
                      >
                        <span
                          style={{
                            display: 'flex',
                            flexDirection: 'row',
                            alignItems: 'center',
                            justifyContent: 'space-around',
                            position: 'relative',
                            width: '24px',
                            height: '24px',
                            borderRadius: '50%',
                            backgroundColor: 'rgb(217, 231, 240)',
                            marginRight: '10px',
                            cursor: 'pointer',
                            filter: skillCounter < 6 ? 'grayscale(0)' : 'grayscale(1)'
                          }}
                        >
                        <img
                          alt={""}
                          src={plus}
                          style={{ display: 'block', width: '14px' }}
                        />
                      </span>
                        <span>ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ Ð¼ÐµÑÑÐ¾ ÑÐ°Ð±Ð¾ÑÑ ( ÐÑÐµÐ¼ÐµÐ½Ð½Ð¾ Ð·Ð°Ð±Ð»Ð¾ÐºÐ¸ÑÐ¾Ð²Ð°Ð½Ð½Ð¾ 20.08 )</span>
                      </div>
                    </EditProjectsEducationFork.ContentLine>
                    <EditProjectsEducationFork.ContentLine style={{ justifyContent: 'space-around', margin: '19px 0px 48px' }}>
                      <ButtonComponent
                        inner={"Ð¡Ð¾ÑÑÐ°Ð½Ð¸ÑÑ Ð¾Ð¿ÑÑ ÑÐ°Ð±Ð¾ÑÑ"} 
                        type='CONTAINED_DEFAULT' 
                        action={sendSkill}
                        actionData={null}
                        widthType={'px'}
                        widthValue={240}
                        children={""}
                        childrenCss={undefined}
                        iconSrc={null}
                        iconCss={undefined}
                        muiIconSize={30}
                        MuiIconChildren={ArrowUpwardIcon}
                        css={{
                          position: 'relative',
                          boxSizing: 'border-box',
                          padding: '4px',
                          backgroundColor: blueColor2,
                          color: 'white',
                          width: '56px',
                          height: '43px',
                        }}
                      />
                    </EditProjectsEducationFork.ContentLine>
                    
                  </EditProjectsEducationFork.Container>
                </React.Fragment> : <React.Fragment></React.Fragment> }

        </ShadowContainerInner>
      </ShadowContainer>
    </React.Fragment>
  )

}

export default RightContentContainer